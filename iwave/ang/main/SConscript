import os

imports = ' cpplist liblist libname libdirlist'

try:  # madagascar version
    Import('env root pkgdir bindir libdir' + imports)
#    print libdir
#    print libdirlist
    env = env.Clone()
    env.Append(CPPPATH=cpplist,LIBS=liblist,LIBPATH=libdirlist+[libdir])
    cxx =  'c++' in env.get('API',[])
except:  # autonomous version
    Import('vars' + imports)
    root = None
    # initialize build environment
    env = Environment(ENV = os.environ,
                      variables = vars,
                      CC={'CC' : '${CC}'},
                      CFLAGS={'CFLAGS' : '${CFLAGS}'},
                      CCFLAGS={'CCFLAGS' : '${CCFLAGS}'},
                      CXX={'CXX' : '${CXX}'},
                      CXXFLAGS={'CXXFLAGS' : '${CXXFLAGS}'},
                      LINKFLAGS={'LINKFLAGS' : '${LINKFLAGS}'},
                      CPPPATH = cpplist, 
                      LIBS = liblist, 
                      LIBPATH = libdirlist)
    cxx = env.get('CXX')
    
# this version assumes that all source files in this directory
# define main programs

# find sources
csrcs=Glob('*.c')
ccsrcs=Glob('*.cc') + Glob('*.cpp')

# if any found, build main
cprogs = []
ccprogs = []

if len(csrcs) > 0:
    for prog in csrcs:
        if root:
            prout = os.path.splitext(str(prog))[0]
            cprogs.append(prout)
        else:
            prout = os.path.splitext(str(prog))[0] + '.x'
        exe = env.Program(prout,prog)

        # Madagascar installation
        if root:
            env.Install(bindir,exe)

if len(ccsrcs) > 0:

    for prog in ccsrcs:
        if root:
            prout = os.path.splitext(str(prog))[0]
            ccprogs.append(prout)
        else:
            prout = os.path.splitext(str(prog))[0] + '.x'

        if cxx:
            exe = env.Program(prout,prog)
        elif root:
            exe = env.RSF_Place('sf'+prout,None,var='C++')

        # Madagascar installation
        if root:
            env.Install(bindir,exe)

# Madagascar self-docs
if root:
    main = 'sf%s.py' % libname
    main = main.replace('++','pp')
    
    cdocs = map(lambda prog: env.Doc(prog, '%s.c' % prog, lang='c'), cprogs)
    ccdocs = map(lambda prog: env.Doc(prog, '%s.cc' % prog, lang='c++'), ccprogs)
    env.Depends(cdocs,'#/framework/rsf/doc.py')
    env.Depends(ccdocs,'#/framework/rsf/doc.py')

    doc = env.RSF_Docmerge(main,cdocs + ccdocs)
    env.Install(pkgdir,doc)
