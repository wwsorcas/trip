from rsf.proj import *
#from newbatch import tripExec
import os

penv = {'stampede' :  { 'batch'    : 'slurm',
                        'queue'    : 'normal',
                        'acct'     : 'FDTD3D-Cont',
                        'mail'     : 'symes@caam.rice.edu',
			'launcher' : 'ibrun'
                      },
         'davinci' :  { 'batch'    : 'slurm',
                        'queue'    : 'trip',
                        'acct'     : 'symes',
                        'mail'     : 'symes@caam.rice.edu',
			'launcher' : 'ibrun'
                      }
       }

#######################################################################
###################### LOCAL DEFINITIONS ##############################
#######################################################################

RSFSRC   = os.getenv('RSFSRC')
CWPROOT  = os.getenv('CWPROOT')
IWAVE    = os.getenv('IWAVE')
MPSCODE  = os.getenv('MPSCODE')
thispath = os.getcwd() 
TESTROOT = thispath + '/../src/main'

stdmdl      = MPSCODE + '/main/genmodel.x' #'sfstandardmodel'
tg_setup    = MPSCODE + '/main/tg_setup.x'
tgs_n_cat   = MPSCODE + '/main/tgs_n_cat.x'
replicate   = MPSCODE + '/main/replicate.x'
my_waveform = MPSCODE + '/main/my_waveform.x'

test_acd_scal   = TESTROOT + '/test_acd_scal.x'
test_acd_canscal   = TESTROOT + '/test_acd_canscal.x'
test_asg_scal_p    = TESTROOT + '/test_asg_scal_p.x'
test_asg_canscal_p = TESTROOT + '/test_asg_canscal_p.x'

test_asg_canscal_v = TESTROOT + '/test_asg_canscal_v.x'
test_asg_canvec_p  = TESTROOT + '/test_asg_canvec_p.x'
test_asg_canvec_v  = TESTROOT + '/test_asg_canvec_v.x'
test_asg_exvec_p   = TESTROOT + '/test_asg_exvec_p.x'
test_asg_exvec_v   = TESTROOT + '/test_asg_exvec_v.x'
test_asg_scal_v    = TESTROOT + '/test_asg_scal_v.x'

sunull     = CWPROOT + '/bin/sunull' 
sushw      = CWPROOT + '/bin/sushw'
suwaveform = CWPROOT + '/bin/suwaveform' 
suhtmath   = CWPROOT + '/bin/suhtmath'
suconv     = CWPROOT + '/bin/suconv'
sutxtaper  = CWPROOT + '/bin/sutxtaper'
suplane    = CWPROOT + '/bin/suplane'
sugain     = CWPROOT + '/bin/sugain'
suwind     = CWPROOT + '/bin/suwind'
suspike    = CWPROOT + '/bin/suspike'
sufilter   = CWPROOT + '/bin/sufilter'

# dummy target
Flow('cout0.txt',None,'touch $TARGET')

OUTFILE = 'OUTFILE.txt'
Flow(OUTFILE,None,'touch $TARGET')

jobs = []

#######################################################################


#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
# MPS_IWAVELOVOP TESTING MODULE: (last mod 07-08-16)
#       
# There are three main tests for verifying MPS_conv:
#   [] compilation and runtime success
#   [] compare output of IWaveLOVOp+MPS_to_RHS and MPS_IWaveLOVOp
#   [] adjoint test of MPS_IWaveLOVOp
#
# This script will call test executables for running tests on different
# source-reciever configurations, on varying driver data and src types.
# The core test kernel code in ../include/test_kernel.hh
#
# basic_test.x, unlike the other test executables, will run a suite of
# basic tests on core code kernels related to MPS_IWaveLOVOp in this case.
#---------------------------------------------------------------------#
#---------------------------------------------------------------------#


#######################################################################
#######################################################################
# Building useful wavelets
#######################################################################
#######################################################################

Flow('wlt_null.su',None,
     sunull +' nt=101 dt=0.004 ntr=1',
     stdin=0)

Flow('wlt_ricker.su',None,
     my_waveform +' CWPROOT='+CWPROOT+' output=${TARGETS[0]}'+\
     ' nt=101 dt=0.004 fpeak=10 type=2 scal=10 cit=51',
     stdin=0,stdout=0)

Flow('wlt_gaussd.su',None,
     my_waveform +' CWPROOT='+CWPROOT+' output=${TARGETS[0]}'+\
     ' nt=101 dt=0.004 fpeak=10 type=2 scal=10 cit=101',
     stdin=0,stdout=0)

Flow('wlt_delta.su',None,
     suspike +' nt=201 dt=0.004 ntr=1 ix1=1 it1=101 | '+\
     sufilter +' f=100,110 amps=1.,1. | '+\
     sugain +' scale=250 | '+\
     sushw +' key=delrt a=-400',
     stdin=0)


#######################################################################
#######################################################################
# Building models
#######################################################################
#######################################################################

c_min = 3
c_max = 3
rho   = 1

choose = {
'dn': '2',
'vp': '0',
'bm': '1',
'by': '3',
'csq': '4'
}

label = {
'dn': 'Density',
'vp': 'Velocity',
'bm': 'Bulk Modulus',
'by': 'Buoyancy',
'csq': 'Velocity Squared'
}

unit = {
'bm': 'GPa',
'by': 'cm\^3\_/g',
'csq': 'km\^2\_/s\^2'
}


#~~~~~~~~~~~~#
# 2-D models #
#~~~~~~~~~~~~#

#depth-axis
f1 = 0.0
e1 = 400.0
d1 = 20
n1=int((e1-f1)/d1)+1 #nz

#horizontal-axis
f2 = 0.0 
e2 = 2000.0
d2 = 20
n2=int((e2-f2)/d2)+1 #nx


cmd = stdmdl + ' model=0 choose=' + str(choose['bm'])+\
    ' c_min='+ str(c_min) +' c_max='+ str(c_max) +' rho='+ str(rho)+\
    ' o1=' + str(f1) + ' n1=' + str(n1) + ' d1=' + str(d1)+\
    ' o2=' + str(f2) + ' n2=' + str(n2) + ' d2=' + str(d2)+\
    ' o3=0.0 n3=1 d3=1.0 '+\
    ' label1=Depth unit1=m label2=Distance unit2=m'+\
    ' label=' + label['bm'] + ' unit=' + unit['bm'] +\
    ' datapath='+ thispath +' hfile=${TARGETS[0]}'
Flow( [ 'bmod_2D.rsf','bmod_2D.rsf@' ],None,
      cmd,stdin=0,stdout=0)

cmd = stdmdl + ' model=0 choose=' + str(choose['by'])+\
    ' c_min='+ str(c_min) +' c_max='+ str(c_max) +' rho='+ str(rho)+\
    ' o1=' + str(f1) + ' n1=' + str(n1) + ' d1=' + str(d1)+\
    ' o2=' + str(f2) + ' n2=' + str(n2) + ' d2=' + str(d2)+\
    ' o3=0.0 n3=1 d3=1.0 '+\
    ' label1=Depth unit1=m label2=Distance unit2=m'+\
    ' label=' + label['by'] + ' unit=' + unit['by'] +\
    ' datapath='+ thispath +' hfile=${TARGETS[0]}'
Flow( [ 'buoy_2D.rsf','buoy_2D.rsf@' ],None,
      cmd,stdin=0,stdout=0)

cmd = stdmdl + ' model=0 choose=' + str(choose['csq'])+\
    ' c_min='+ str(c_min) +' c_max='+ str(c_max) +' rho='+ str(rho)+\
    ' o1=' + str(f1) + ' n1=' + str(n1) + ' d1=' + str(d1)+\
    ' o2=' + str(f2) + ' n2=' + str(n2) + ' d2=' + str(d2)+\
    ' o3=0.0 n3=1 d3=1.0 '+\
    ' label1=Depth unit1=m label2=Distance unit2=m'+\
    ' label=' + label['csq'] + ' unit=' + unit['csq'] +\
    ' datapath='+ thispath +' hfile=${TARGETS[0]}'
Flow( [ 'csq_2D.rsf','csq_2D.rsf@' ],None,
      cmd,stdin=0,stdout=0)

#~~~~~~~~~~~~#
# 3-D models #
#~~~~~~~~~~~~#

#depth-axis
f1 = 0.0
e1 = 400.0
d1 = 20
n1=int((e1-f1)/d1)+1 #nz

#horizontal-axis
f2 = 0.0 
e2 = 2000.0
d2 = 20
n2=int((e2-f2)/d2)+1 #nx

#other-axis
f3 = 0.0 
e3 = 2000.0
d3 = 20
n3=int((e3-f3)/d3)+1 #nx

cmd = stdmdl + ' model=0 choose=' + str(choose['bm'])+\
    ' c_min='+ str(c_min) +' c_max='+ str(c_max) +' rho='+ str(rho)+\
    ' o1=' + str(f1) + ' n1=' + str(n1) + ' d1=' + str(d1)+\
    ' o2=' + str(f2) + ' n2=' + str(n2) + ' d2=' + str(d2)+\
    ' o3=' + str(f3) + ' n3=' + str(n3) + ' d3=' + str(d3)+\
    ' label1=Depth unit1=m label2=Distance unit2=m label3=Distance unit3=m'+\
    ' label=' + label['bm'] + ' unit=' + unit['bm'] +\
    ' datapath='+ thispath +' hfile=${TARGETS[0]}'
Flow( [ 'bmod_3D.rsf', 'bmod_3D.rsf@' ],None,
      cmd,stdin=0,stdout=0)

cmd = stdmdl + ' model=0 choose=' + str(choose['by'])+\
    ' c_min='+ str(c_min) +' c_max='+ str(c_max) +' rho='+ str(rho)+\
    ' o1=' + str(f1) + ' n1=' + str(n1) + ' d1=' + str(d1)+\
    ' o2=' + str(f2) + ' n2=' + str(n2) + ' d2=' + str(d2)+\
    ' o3=' + str(f3) + ' n3=' + str(n3) + ' d3=' + str(d3)+\
    ' label1=Depth unit1=m label2=Distance unit2=m label3=Distance unit3=m'+\
    ' label=' + label['by'] + ' unit=' + unit['by'] +\
    ' datapath='+ thispath +' hfile=${TARGETS[0]}'
Flow( [ 'buoy_3D.rsf', 'buoy_3D.rsf@' ],None,
      cmd,stdin=0,stdout=0)

cmd = stdmdl + ' model=0 choose=' + str(choose['csq'])+\
    ' c_min='+ str(c_min) +' c_max='+ str(c_max) +' rho='+ str(rho)+\
    ' o1=' + str(f1) + ' n1=' + str(n1) + ' d1=' + str(d1)+\
    ' o2=' + str(f2) + ' n2=' + str(n2) + ' d2=' + str(d2)+\
    ' o3=' + str(f3) + ' n3=' + str(n3) + ' d3=' + str(d3)+\
    ' label1=Depth unit1=m label2=Distance unit2=m label3=Distance unit3=m'+\
    ' label=' + label['csq'] + ' unit=' + unit['csq'] +\
    ' datapath='+ thispath +' hfile=${TARGETS[0]}'
Flow( [ 'csq_3D.rsf', 'csq_3D.rsf@' ],None,
      cmd,stdin=0,stdout=0)



#######################################################################
#######################################################################
# Building hdr and MPS files
#######################################################################
#######################################################################


#~~~~~~~~~~#
# 2-D case #
#~~~~~~~~~~#

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_d  = 1
sx_n  = int((sx_e-sx_o)/sx_d)+1
selev = -203

#receiver parameters
gx_o  = 0     # starting x coord
gx_e  = 2000  # ending x coord
gx_d  = 20    # distance between  
gx_n  = int((gx_e-gx_o)/gx_d)+1
gelev = -100 # receiver depth

ntr = gx_n*sx_n

#time axis
T  = 0.8   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

#header file
cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow('hdr_2D.su',None,cmd,stdin=0)

cmd = sunull +' nt='+ str(nt*2) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow('hdr_2D_g.su',None,cmd,stdin=0)


#MPS files
cmd = sushw + ' key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j=1 | '+\
      sushw + ' key=delrt a=-400 '
Flow('MPS_scal_2D.su','wlt_ricker.su',cmd)

cmd = sushw + ' key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j=1'
Flow('delta_scal_2D.su','wlt_delta.su',cmd)

cmd = tgs_n_cat +' CWPROOT='+CWPROOT+' N=3'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[2]} wlt_2=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw +' <tmp_MPS.su key=selev a='+str(selev)+' | '+\
      sushw +' key=sx a='+str(sx_o)+' c='+str(sx_d)+' j=3 | '+\
      sushw +' key=delrt a=0'+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow('MPS_canscal_2D.su',
     ['wlt_null.su','wlt_ricker.su','wlt_gaussd.su'],
     cmd, stdin=0, stdout=0)

cmd = tgs_n_cat +' CWPROOT='+CWPROOT+' N=3'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}'+\
      ' out=tmp_MPS.su && '+\
      sushw +' <tmp_MPS.su key=selev a='+str(selev)+' | '+\
      sushw +' key=sx a='+str(sx_o)+' c='+str(sx_d)+' j=3'+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow('delta_canscal_2D.su','wlt_delta.su',cmd,
     stdin=0, stdout=0)


#~~~~~~~~~~#
# 3-D case #
#~~~~~~~~~~#

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_d  = 1
sx_n  = int((sx_e-sx_o)/sx_d)+1
selev = -203
sy    = 1003

#receiver parameters
gx_o  = 0     # starting x coord
gx_e  = 2000  # ending x coord
gx_d  = 20    # distance between  
gx_n  = int((gx_e-gx_o)/gx_d)+1
gelev = -100 # receiver depth
gy    = 1000

ntr = gx_n*sx_n

#time axis
T  = 0.8   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

#header file
cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=sy a='+ str(sy) +' | '+\
      sushw +' key=gelev a='+ str(gelev) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gy a='+ str(gy) +' | '+\
      sushw +' key=delrt a=0 '
Flow('hdr_3D.su',None,cmd,stdin=0)

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=sy a='+ str(sy) +' | '+\
      sushw +' key=gelev a='+ str(gelev) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_d) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gy a='+ str(gy) +' | '+\
      sushw +' key=delrt a=0 '
Flow('hdr_3D_g.su',None,cmd,stdin=0)

#MPS files
cmd = sushw + ' key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j=1 | '+\
      sushw + ' key=sy a='+ str(sy) +' j=1 '
Flow('MPS_scal_3D.su','wlt_ricker.su',cmd)

cmd = sushw + ' key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_d) +' j=1 | '+\
      sushw + ' key=sy a='+ str(sy) +' j=1 '
Flow('delta_scal_3D.su','wlt_delta.su',cmd)

cmd = tgs_n_cat +' CWPROOT='+CWPROOT+' N=4'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[2]} wlt_2=${SOURCES[1]} wlt_3=${SOURCES[2]}'+\
      ' out=tmp_MPS.su && '+\
      sushw +' <tmp_MPS.su key=selev a='+str(selev)+' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+str(sx_d)+' j=4 | '+\
      sushw +' key=sy a='+ str(sy) +' j=4 '+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow('MPS_canscal_3D.su',['wlt_null.su','wlt_ricker.su','wlt_gaussd.su'],
     cmd,stdin=0, stdout=0)

cmd = tgs_n_cat +' CWPROOT='+CWPROOT+' N=4'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]} wlt_3=${SOURCES[0]}'+\
      ' out=tmp_MPS.su && '+\
      sushw +' <tmp_MPS.su key=selev a='+str(selev)+' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+str(sx_d)+' j=4 | '+\
      sushw +' key=sy a='+ str(sy) +' j=4 '+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow('delta_canscal_3D.su','wlt_delta.su',cmd,
     stdin=0, stdout=0)



#######################################################################
#######################################################################
# TEST: ACD_SCAL_2D_0
#    - acd driver 2D
#    - pressure data
#    - pressure source: single scal MPS, order 0
#                       f(x,t) = F(t) delta(x)
#######################################################################
#######################################################################

jobname = 'acd_scal_2D_0'

output = ['acd_scal_2D_0_data.su', 
          'acd_scal_2D_0_data_g.su',
          'acd_scal_2D_0_data_re.su', 
          'acd_scal_2D_0_MPS.su',
          'acd_scal_2D_0_delta.su',
          'RHS_0_acd_scal_2D_0_MPS.su',
          'RHS_0_acd_scal_2D_0_delta.su',
          'acd_scal_2D_0_MPS_adj.su', 
          'acd_scal_2D_0_MPS_adj_re.su']

input = ['csq_2D.rsf', 
         'hdr_2D.su', 
         'MPS_scal_2D.su', 
         'delta_scal_2D.su',
         'hdr_2D_g.su']

cmd = ' /bin/cp ${SOURCES[1]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[1]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[1]} ${TARGETS[2]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[7]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[8]} && '+\
      test_acd_scal+\
      ' csq=${SOURCES[0]}'+\
      ' data_p=${TARGETS[0]}'+\
      ' source_p=${TARGETS[5]}'+\
      ' deriv=0 adjoint=0 cfl=0.75 order=2'+\
      ' cmin=1.0 cmax=4.0'+\
      ' dt=2'+\
      ' appx_ord=4'+\
      ' MPS_ord_0=0 MPS_ord_1=0'+\
      ' MPS_file=${TARGETS[3]}'+\
      ' MPS_delta=${TARGETS[4]}'+\
      ' data_p_g=${SOURCES[4]}'+\
      ' data_p_re=${TARGETS[2]}'+\
      ' MPS_adj=${TARGETS[7]}'+\
      ' MPS_adj_re=${TARGETS[8]}'+\
      ' driver=acd'+\
      ' data_type=pressure'+\
      ' src_type=pressure'+\
      ' jobname='+str(jobname)
      #' outfile='+str(OUTFILE)+\
Flow(output,input,cmd,stdin=0,stdout=0)



#######################################################################
#######################################################################
# TEST: ACD_CANSCAL_2D_0
#    - acd driver 2D
#    - pressure data
#    - pressure source: single canscal MPS, order 1
#######################################################################
#######################################################################

jobname = 'acd_canscal_2D_0'

output = ['acd_canscal_2D_0_data.su', 
          'acd_canscal_2D_0_data_g.su',
          'acd_canscal_2D_0_data_re.su', 
          'acd_canscal_2D_0_MPS.su',
          'acd_canscal_2D_0_delta.su',
          'RHS_0_acd_canscal_2D_0_MPS.su',
          'RHS_0_acd_canscal_2D_0_delta.su',
          'acd_canscal_2D_0_MPS_adj.su', 
          'acd_canscal_2D_0_MPS_adj_re.su']
input = ['csq_2D.rsf', 
         'hdr_2D.su', 
         'MPS_canscal_2D.su', 
         'delta_canscal_2D.su',
         'hdr_2D_g.su']

cmd = ' /bin/cp ${SOURCES[1]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[1]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[1]} ${TARGETS[2]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[7]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[8]} && '+\
      test_acd_canscal+\
      ' csq=${SOURCES[0]}'+\
      ' data_p=${TARGETS[0]}'+\
      ' source_p=${TARGETS[5]}'+\
      ' deriv=0 adjoint=0 cfl=0.75 order=2'+\
      ' cmin=1.0 cmax=7.0 dmin=0.8 dmax=3.0'+\
      ' nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0'+\
      ' dt=2'+\
      ' appx_ord=4'+\
      ' MPS_ord=1'+\
      ' MPS_file=${TARGETS[3]}'+\
      ' MPS_delta=${TARGETS[4]}'+\
      ' data_p_g=${SOURCES[4]}'+\
      ' data_p_re=${TARGETS[2]}'+\
      ' MPS_adj=${TARGETS[7]}'+\
      ' MPS_adj_re=${TARGETS[8]}'+\
      ' driver=acd'+\
      ' data_type=pressure'+\
      ' src_type=pressure'+\
      ' jobname='+str(jobname)
#      ' outfile='+str(OUTFILE)+\
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
#######################################################################
# TEST: ASG_SCAL_2D_P_0
#    - asg driver 2D
#    - pressure data
#    - pressure source: single scal MPS, order 0
#######################################################################
#######################################################################

jobname = 'asg_scal_2D_p_0'

output = ['asg_scal_2D_p_0_data_p.su', 
          'asg_scal_2D_p_0_data_p_g.su',
          'asg_scal_2D_p_0_data_p_re.su', 
          'asg_scal_2D_p_0_MPS.su',
          'asg_scal_2D_p_0_delta.su',
          'RHS_0_asg_scal_2D_p_0_MPS.su',
          'RHS_0_asg_scal_2D_p_0_delta.su',
          'asg_scal_2D_p_0_MPS_adj.su', 
          'asg_scal_2D_p_0_MPS_adj_re.su']
input = ['bmod_2D.rsf', 
         'buoy_2D.rsf',
         'hdr_2D.su', 
         'MPS_scal_2D.su', 
         'delta_scal_2D.su',
         'hdr_2D_g.su']

cmd = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[2]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[4]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[7]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[8]} && '+\
      test_asg_scal_p+\
      ' bulkmod=${SOURCES[0]}'+\
      ' buoyancy=${SOURCES[1]}'+\
      ' data_p=${TARGETS[0]}'+\
      ' source_p=${TARGETS[5]}'+\
      ' deriv=0 adjoint=0 cfl=0.75 order=2'+\
      ' cmin=1.0 cmax=7.0 dmin=0.8 dmax=3.0'+\
      ' nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0'+\
      ' dt=2'+\
      ' appx_ord=4'+\
      ' MPS_ord_0=0 MPS_ord_1=0'+\
      ' MPS_file=${TARGETS[3]}'+\
      ' MPS_delta=${TARGETS[4]}'+\
      ' data_p_g=${SOURCES[5]}'+\
      ' data_p_re=${TARGETS[2]}'+\
      ' MPS_adj=${TARGETS[7]}'+\
      ' MPS_adj_re=${TARGETS[8]}'+\
      ' driver=asg'+\
      ' data_type=pressure'+\
      ' src_type=pressure'+\
      ' jobname='+str(jobname)
#      ' outfile='+str(OUTFILE)+\
Flow(output,input,cmd,stdin=0,stdout=0)

#######################################################################
#######################################################################
# TEST: ASG_SCAL_3D_P_0
#    - asg driver 3D
#    - pressure data
#    - pressure source: single scal MPS, order 0
#######################################################################
#######################################################################

jobname = 'asg_scal_3D_p_0'

output = ['asg_scal_3D_p_0_data_p.su', 
          'asg_scal_3D_p_0_data_p_g.su',
          'asg_scal_3D_p_0_data_p_re.su', 
          'asg_scal_3D_p_0_MPS.su',
          'asg_scal_3D_p_0_delta.su',
          'RHS_0_asg_scal_3D_p_0_MPS.su',
          'RHS_0_asg_scal_3D_p_0_delta.su',
          'asg_scal_3D_p_0_MPS_adj.su', 
          'asg_scal_3D_p_0_MPS_adj_re.su']
input = ['bmod_3D.rsf', 
         'buoy_3D.rsf',
         'hdr_3D.su', 
         'MPS_scal_3D.su', 
         'delta_scal_3D.su']

cmd = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[2]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[4]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[7]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[8]} && '+\
      test_asg_scal_p+\
      ' bulkmod=${SOURCES[0]}'+\
      ' buoyancy=${SOURCES[1]}'+\
      ' data_p=${TARGETS[0]}'+\
      ' source_p=${TARGETS[5]}'+\
      ' deriv=0 adjoint=0 cfl=0.75 order=2'+\
      ' cmin=1.0 cmax=7.0 dmin=0.8 dmax=3.0'+\
      ' nl1=250 nr1=250 nl2=250 nr2=250 nl3=250 nr3=250 pmlampl=1.0'+\
      ' dt=2'+\
      ' appx_ord=4'+\
      ' MPS_ord_0=0 MPS_ord_1=0 MPS_ord_2=0'+\
      ' MPS_file=${TARGETS[3]}'+\
      ' MPS_delta=${TARGETS[4]}'+\
      ' data_p_g=${TARGETS[1]}'+\
      ' data_p_re=${TARGETS[2]}'+\
      ' MPS_adj=${TARGETS[7]}'+\
      ' MPS_adj_re=${TARGETS[8]}'+\
      ' driver=asg'+\
      ' data_type=pressure'+\
      ' src_type=pressure'+\
      ' jobname='+str(jobname)
#      ' outfile='+str(OUTFILE)+\
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
#######################################################################
# TEST: ASG_CANSCAL_2D_P_0
#    - asg driver 2D
#    - pressure data
#    - pressure source: single canscal MPS, order 1
#######################################################################
#######################################################################

jobname = 'asg_canscal_2D_p_0'

output = ['asg_canscal_2D_p_0_data_p.su', 
          'asg_canscal_2D_p_0_data_p_g.su',
          'asg_canscal_2D_p_0_data_p_re.su', 
          'asg_canscal_2D_p_0_MPS.su',
          'asg_canscal_2D_p_0_delta.su',
          'RHS_0_asg_canscal_2D_p_0_MPS.su',
          'RHS_0_asg_canscal_2D_p_0_delta.su',
          'asg_canscal_2D_p_0_MPS_adj.su', 
          'asg_canscal_2D_p_0_MPS_adj_re.su']
input = ['bmod_2D.rsf', 
         'buoy_2D.rsf',
         'hdr_2D.su', 
         'MPS_canscal_2D.su', 
         'delta_canscal_2D.su']

cmd = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[2]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[4]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[7]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[8]} && '+\
      test_asg_canscal_p+\
      ' bulkmod=${SOURCES[0]}'+\
      ' buoyancy=${SOURCES[1]}'+\
      ' data_p=${TARGETS[0]}'+\
      ' source_p=${TARGETS[5]}'+\
      ' deriv=0 adjoint=0 cfl=0.75 order=2'+\
      ' cmin=1.0 cmax=7.0 dmin=0.8 dmax=3.0'+\
      ' nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0'+\
      ' dt=2'+\
      ' appx_ord=4'+\
      ' MPS_ord=1'+\
      ' MPS_file=${TARGETS[3]}'+\
      ' MPS_delta=${TARGETS[4]}'+\
      ' data_p_g=${TARGETS[1]}'+\
      ' data_p_re=${TARGETS[2]}'+\
      ' MPS_adj=${TARGETS[7]}'+\
      ' MPS_adj_re=${TARGETS[8]}'+\
      ' driver=asg'+\
      ' data_type=pressure'+\
      ' src_type=pressure'+\
      ' jobname='+str(jobname)
#      ' outfile='+str(OUTFILE)+\
Flow(output,input,cmd,stdin=0,stdout=0)


End()
