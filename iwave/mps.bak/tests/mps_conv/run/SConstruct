from rsf.proj import *
from newbatch import tripExec
import os

penv = {'stampede' :  { 'batch'    : 'slurm',
                        'queue'    : 'normal',
                        'acct'     : 'FDTD3D-Cont',
                        'mail'     : 'symes@caam.rice.edu',
			'launcher' : 'ibrun'
                      },
         'davinci' :  { 'batch'    : 'slurm',
                        'queue'    : 'trip',
                        'acct'     : 'symes',
                        'mail'     : 'symes@caam.rice.edu',
			'launcher' : 'ibrun'
                      }
       }

#######################################################################
###################### LOCAL DEFINITIONS ##############################
#######################################################################

RSFSRC   = os.getenv('RSFSRC')
CWPROOT  = os.getenv('CWPROOT')
IWAVE    = os.getenv('IWAVE')
MPSCODE  = os.getenv('MPSCODE')
thispath = os.getcwd()
TESTROOT = thispath + '/../src/main'

stdmdl      = MPSCODE + '/main/genmodel.x' #'sfstandardmodel'
tg_setup    = MPSCODE + '/main/tg_setup.x'
tgs_n_cat   = MPSCODE + '/main/tgs_n_cat.x'
replicate   = MPSCODE + '/main/replicate.x'
my_waveform = MPSCODE + '/main/my_waveform.x'

basic_test         = TESTROOT + '/basic_test.x'
test_acd_scal      = TESTROOT + '/test_acd_scal.x'
test_acd_canscal   = TESTROOT + '/test_acd_canscal.x'
test_asg_canscal_p = TESTROOT + '/test_asg_canscal_p.x'
test_asg_canscal_v = TESTROOT + '/test_asg_canscal_v.x'
test_asg_canvec_p  = TESTROOT + '/test_asg_canvec_p.x'
test_asg_canvec_v  = TESTROOT + '/test_asg_canvec_v.x'
test_asg_exvec_p   = TESTROOT + '/test_asg_exvec_p.x'
test_asg_exvec_v   = TESTROOT + '/test_asg_exvec_v.x'
test_asg_scal_p    = TESTROOT + '/test_asg_scal_p.x'
test_asg_scal_v    = TESTROOT + '/test_asg_scal_v.x'

sunull     = CWPROOT + '/bin/sunull' 
sushw      = CWPROOT + '/bin/sushw'
suwaveform = CWPROOT + '/bin/suwaveform' 
suhtmath   = CWPROOT + '/bin/suhtmath'
suconv     = CWPROOT + '/bin/suconv'
sutxtaper  = CWPROOT + '/bin/sutxtaper'
suplane    = CWPROOT + '/bin/suplane'
sugain     = CWPROOT + '/bin/sugain'
suwind     = CWPROOT + '/bin/suwind'
suspike    = CWPROOT + '/bin/suspike'
sufilter   = CWPROOT + '/bin/sufilter'

#dummy target
Flow('cout0.txt',None,'touch $TARGET')

OUTFILE = 'OUTFILE.txt'
Flow(OUTFILE,None,'touch $TARGET')

jobs = []

#######################################################################


#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
# MPS_CONV TESTING MODULE: (last mod 07-08-16)
#       
# There are three main tests for verifying MPS_conv:
#   [] compilation and runtime success
#   [] replicate data via convolution and comparison with normal driver
#   [] adjoint test of convolution op
#
# This script will call test executables for running tests on different
# source-reciever configurations, on varying driver data and src types.
# The core test kernel code in ../include/test_kernel.hh
#
# basic_test.x, unlike the other test executables, will run a suite of
# basic tests on core code kernels related to MPS_conv in this case.
#---------------------------------------------------------------------#
#---------------------------------------------------------------------#


#######################################################################
#######################################################################
# Build useful wavelets
#######################################################################
#######################################################################

output = ['wlt_null.su']
cmd = sunull +' nt=201 dt=0.004 ntr=1'
Flow(output,None,cmd,stdin=0)

output = ['wlt_ricker.su']
cmd = my_waveform +' CWPROOT='+CWPROOT+' output=${TARGETS[0]}'+\
    ' nt=201 dt=0.004 fpeak=10 type=2 scal=20 cit=101'
Flow(output,None,cmd,stdin=0,stdout=0)

output = ['wlt_gaussd.su']
cmd = my_waveform +' CWPROOT='+CWPROOT+' output=${TARGETS[0]}'+\
    ' nt=201 dt=0.004 fpeak=10 type=1 scal=1 cit=101'
Flow(output,None,cmd,stdin=0,stdout=0)

output = ['wlt_delta.su']
cmd = suspike +' nt=201 dt=0.004 ntr=1 ix1=1 it1=101 | '+\
      sugain +' scale=250 | '+\
      sushw + ' key=delrt a=-400'
#cmd = cmd +' | '+ sufilter +' f=100,110 amps=1.,0.'
Flow(output,None,cmd,stdin=0)


#######################################################################
#######################################################################
# Build models
#######################################################################
#######################################################################

c_min = 5
c_max = 5
rho   = 1

mdl_file ={
'bm': 'bmod.rsf',
'by': 'buoy.rsf',
'csq': 'csq.rsf'
} 

model = 0 #homogeneous model

choose = {
'dn': '2',
'vp': '0',
'bm': '1',
'by': '3',
'csq': '4'
}

label = {
'dn': 'Density',
'vp': 'Velocity',
'bm': 'Bulk Modulus',
'by': 'Buoyancy',
'csq': 'Velocity Squared'
}

unit = {
'bm': 'GPa',
'by': 'cm\^3\_/g',
'csq': 'km\^2\_/s\^2'
}

#depth-axis
f1 = 0.0
e1 = 2000.0
d1 = 20
n1=int((e1-f1)/d1)+1 #nz

#horizontal-axis
f2 = 0.0 
e2 = 2000.0
d2 = 20
n2=int((e2-f2)/d2)+1 #nx

for m in ('bm','by','csq'):
   #build commands
    cmd = stdmdl + ' model=' + str(model) + ' choose=' + str(choose[m])+\
        ' c_min='+ str(c_min) +' c_max='+ str(c_max) +' rho='+ str(rho)+\
        ' o1=' + str(f1) + ' n1=' + str(n1) + ' d1=' + str(d1)+\
        ' o2=' + str(f2) + ' n2=' + str(n2) + ' d2=' + str(d2)+\
        ' o3=0.0 n3=1 d3=1.0 label1=Depth unit1=m label2=Distance unit2=m'+\
        ' label=' + label[m] + ' unit=' + unit[m]+\
        ' datapath='+ thispath +' hfile=' + mdl_file[m]
    
    Flow( [ mdl_file[m], mdl_file[m]+'@' ], None,
          cmd,         
          stdin=0,stdout=0)





#######################################################################
#######################################################################
# Basic Test
#######################################################################
#######################################################################
x_file = 'basic_x_file.su'
y_files= 'basic_y_file.su'
k_files= 'basic_k_file.su'
z_file = 'basic_z_file.su'

output = x_file
input = ['wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=1'+\
      ' wlt_0=${SOURCES[0]} '+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(0) + ' | '+\
      sushw + ' key=sx a='+ str(0) +' c='+ str(0) +' j='+str(1)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = k_files
input = ['wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=1'+\
      ' wlt_0=${SOURCES[0]} '+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(0) + ' | '+\
      sushw + ' key=sx a='+ str(0) +' c='+ str(0) +' j='+str(1)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [y_files,z_file]
input = [x_file,k_files,'wlt_null.su']
cmd = '/bin/cp ${SOURCES[2]} ./${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ./${TARGETS[1]} && '+\
      basic_test +' x_file=${SOURCES[0]} '+\
      ' k_files=${SOURCES[1]} '+\
      ' y_files=${TARGETS[0]} '+\
      ' z_file=${TARGETS[1]} '+\
      ' MPS_dim=1 '+\
      ' MPS_idx=1 '
Flow(output,input,cmd,stdin=0,stdout=0) 


#######################################################################
#######################################################################
# TEST: ACD_SCAL_0
#    - ACD driver
#    - pressure data: single trace
#    - pressure source: single MPS order 0
#######################################################################
#######################################################################

#acd I/O files
hdr       = 'acd_scal_0_hdr.su'
data      = 'acd_scal_0_data.su'
source    = 'acd_scal_0_RHS.su'
#mps and conv I/O files
MPS_src   = 'acd_scal_0_MPS.su'
hdr_g     = 'acd_scal_0_hdr_g.su'
data_g    = 'acd_scal_0_data_g.su'
source_g  = 'acd_scal_0_RHS_g.su'
MPS_src_g = 'acd_scal_0_MPS_g.su'
#other I/O files
data_re    = 'acd_scal_0_data_re.su'
MPS_adj    = 'acd_scal_0_MPS_adj.su'
MPS_adj_re = 'acd_scal_0_MPS_adj_re.su'

MPS_ord=0
a_ord=4
MPS_dim=1
MPS_idx=0

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 1900   # starting x coord
gx_e  = 1900  # ending x coord
gx_dx = 25    # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -500 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=200 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) +' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_ricker.su']
cmd = sushw + ' key=delrt a=100 | '+\
      sushw + ' key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
Flow(output,input,cmd,)

output = [MPS_src_g]
input = ['wlt_delta.su']
cmd = sushw + ' key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
Flow(output,input,cmd)


#######################################################################
# Compute data
#######################################################################

output = [data, 
          source, 
          data_g, 
          source_g, 
          data_re, 
          MPS_adj, 
          MPS_adj_re]
input = [mdl_file['csq'], 
         hdr, 
         hdr_g, 
         MPS_src, 
         MPS_src_g]
jobname = 'acd_scal_0'

#pre command
pre = '/bin/cp ${SOURCES[1]} ${TARGETS[0]} && '+\
      '/bin/cp ${SOURCES[2]} ${TARGETS[2]} && '+\
      '/bin/cp ${SOURCES[3]} ${TARGETS[5]} && '+\
      '/bin/cp ${SOURCES[3]} ${TARGETS[6]} '

#test command
cmd = test_acd_scal
#acd args
cmd = cmd +\
    ' csq=${SOURCES[0]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_p=${TARGETS[1]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0'
#cmd = cmd +' dt=1'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' MPS_file=${SOURCES[3]}'+\
    ' data_p_g=${TARGETS[2]}'+\
    ' source_p_g=${TARGETS[3]}'+\
    ' MPS_file_g=${SOURCES[4]}'+\
    ' MPS_ord_0=0 MPS_ord_1=0'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' driver=acd'+\
    ' data_type=pressure'+\
    ' src_type=pressure'+\
    ' data_p_re=${TARGETS[4]}'+\
    ' MPS_adj=${TARGETS[5]}'+\
    ' MPS_adj_re=${TARGETS[6]}'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1 = 1#3
NP2 = 1#2
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+str(NP1)+\
    ' mpi_np2='+str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }


#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe 
                 },
               ]


#######################################################################
#######################################################################
# TEST: ACD_CANSCAL_0
#    - ACD driver
#    - pressure data: single trace
#    - pressure source: single MPS order 0
#######################################################################
#######################################################################

#acd I/O files
hdr       = 'acd_canscal_0_hdr.su'
data      = 'acd_canscal_0_data.su'
source    = 'acd_canscal_0_RHS.su'
#mps and conv I/O files
MPS_src   = 'acd_canscal_0_MPS.su'
hdr_g     = 'acd_canscal_0_hdr_g.su'
data_g    = 'acd_canscal_0_data_g.su'
source_g  = 'acd_canscal_0_RHS_g.su'
MPS_src_g = 'acd_canscal_0_MPS_g.su'
#other I/O files
data_re    = 'acd_canscal_0_data_re.su'
MPS_adj    = 'acd_canscal_0_MPS_adj.su'
MPS_adj_re = 'acd_canscal_0_MPS_adj_re.su'

MPS_ord=0
a_ord=4
MPS_dim=1
MPS_idx=0

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 100  # starting x coord
gx_e  = 1900 # ending x coord
gx_dx = 25  # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -500 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_ricker.su']
cmd = sushw + ' key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
Flow(output,input,cmd,)

output = [MPS_src_g]
input = ['wlt_delta.su']
cmd = sushw + ' key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
Flow(output,input,cmd)


#######################################################################
# Compute data
#######################################################################

output = [data, 
          source, 
          data_g, 
          source_g, 
          data_re, 
          MPS_adj, 
          MPS_adj_re]
input = [mdl_file['csq'], 
         hdr, 
         hdr_g, 
         MPS_src, 
         MPS_src_g]
jobname = 'acd_canscal_0'

#pre command
pre = '/bin/cp ${SOURCES[1]} ${TARGETS[0]} && '+\
      '/bin/cp ${SOURCES[2]} ${TARGETS[2]} && '+\
      '/bin/cp ${SOURCES[3]} ${TARGETS[5]} && '+\
      '/bin/cp ${SOURCES[3]} ${TARGETS[6]} '

#test command
cmd = test_acd_canscal
#acd args
cmd = cmd +\
    ' csq=${SOURCES[0]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_p=${TARGETS[1]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0'
#cmd = cmd +' dt=1'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' MPS_file=${SOURCES[3]}'+\
    ' data_p_g=${TARGETS[2]}'+\
    ' source_p_g=${TARGETS[3]}'+\
    ' MPS_file_g=${SOURCES[4]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' driver=acd'+\
    ' data_type=pressure'+\
    ' src_type=pressure'+\
    ' data_p_re=${TARGETS[4]}'+\
    ' MPS_adj=${TARGETS[5]}'+\
    ' MPS_adj_re=${TARGETS[6]}'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1 = 1#3
NP2 = 1#2
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+str(NP1)+\
    ' mpi_np2='+str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }


#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe 
                 },
               ]


#######################################################################
#######################################################################
# TEST: ACD_CANSCAL_1
#    - ACD driver
#    - pressure data: single trace
#    - pressure source: single canonical MPS order 1
#######################################################################
#######################################################################

#acd I/O files
hdr       = 'acd_canscal_1_hdr.su'
data      = 'acd_canscal_1_data.su'
source    = 'acd_canscal_1_RHS.su'
#mps and conv I/O files
MPS_src   = 'acd_canscal_1_MPS.su'
hdr_g     = 'acd_canscal_1_hdr_g.su'
data_g    = 'acd_canscal_1_data_g.su'
source_g  = 'acd_canscal_1_RHS_g.su'
MPS_src_g = 'acd_canscal_1_MPS_g.su'
#other I/O files
data_re    = 'acd_canscal_1_data_re.su'
MPS_adj    = 'acd_canscal_1_MPS_adj.su'
MPS_adj_re = 'acd_canscal_1_MPS_adj_re.su'

MPS_ord=1
a_ord=4
MPS_dim=3
MPS_idx=2

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 100  # starting x coord
gx_e  = 1900  # ending x coord
gx_dx = 25    # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +'| '+ sushw +' key=delrt a=-250'
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=3'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=3'+\
    ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}'+\
    ' out=tmp_MPS.su && '+\
    sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
    sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
    ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data, 
          source, 
          data_g, 
          source_g, 
          data_re, 
          MPS_adj, 
          MPS_adj_re]
input = [mdl_file['csq'], 
         hdr, 
         hdr_g, 
         MPS_src, 
         MPS_src_g]
jobname = 'acd_canscal_1'

#pre command
pre = '/bin/cp ${SOURCES[1]} ${TARGETS[0]} && '+\
      '/bin/cp ${SOURCES[2]} ${TARGETS[2]} && '+\
      '/bin/cp ${SOURCES[3]} ${TARGETS[5]} && '+\
      '/bin/cp ${SOURCES[3]} ${TARGETS[6]} '

#test command
cmd = test_acd_canscal
#acd args
cmd = cmd +\
    ' csq=${SOURCES[0]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_p=${TARGETS[1]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0'
#cmd = cmd +' dt=1' #units [ms]
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' MPS_file=${SOURCES[3]}'+\
    ' data_p_g=${TARGETS[2]}'+\
    ' source_p_g=${TARGETS[3]}'+\
    ' MPS_file_g=${SOURCES[4]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' driver=acd'+\
    ' data_type=pressure'+\
    ' src_type=pressure'+\
    ' data_p_re=${TARGETS[4]}'+\
    ' MPS_adj=${TARGETS[5]}'+\
    ' MPS_adj_re=${TARGETS[6]}'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST: ACD_CANSCAL_2
#    - acd driver
#    - pressure data: multiple traces
#    - pressure source: four canonical MPS order 1
#######################################################################
#######################################################################

#acd I/O files
hdr       = 'acd_canscal_2_hdr.su'
data      = 'acd_canscal_2_data.su'
source    = 'acd_canscal_2_RHS.su'
#mps and conv I/O files
MPS_src   = 'acd_canscal_2_MPS.su'
hdr_g     = 'acd_canscal_2_hdr_g.su'
data_g    = 'acd_canscal_2_data_g.su'
source_g  = 'acd_canscal_2_RHS_g.su'
MPS_src_g = 'acd_canscal_2_MPS_g.su'
#other I/O files
data_re    = 'acd_canscal_2_data_re.su'
MPS_adj    = 'acd_canscal_2_MPS_adj.su'
MPS_adj_re = 'acd_canscal_2_MPS_adj_re.su'

MPS_ord=1
a_ord=4
MPS_dim=3
MPS_idx=2

#source parameters
sx_o  = 850
sx_e  = 1150
sx_dx = 100
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 100   # starting x coord
gx_e  = 1900  # ending x coord
gx_dx = 25    # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su','wlt_gaussd.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=12'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[2]}' #src 1
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[1]}' #src 2
cmd = cmd +' wlt_9=${SOURCES[0]} wlt_10=${SOURCES[0]} wlt_11=${SOURCES[2]}' #src 3
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw +' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=12'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}' #src 1
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[1]}' #src 2
cmd = cmd +' wlt_9=${SOURCES[0]} wlt_10=${SOURCES[0]} wlt_11=${SOURCES[1]}' #src 3
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data, 
          source, 
          data_g, 
          source_g, 
          data_re, 
          MPS_adj, 
          MPS_adj_re]
input = [mdl_file['csq'], 
         hdr, 
         hdr_g, 
         MPS_src, 
         MPS_src_g]
jobname = 'acd_canscal_2'

#pre command
pre = ' /bin/cp ${SOURCES[1]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[2]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[5]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[6]} '

#test command
cmd = test_acd_canscal
#acd args
cmd = cmd +\
    ' csq=${SOURCES[0]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_p=${TARGETS[1]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0'
#cmd = cmd +' dt=1' #units [ms]
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' MPS_file=${SOURCES[3]}'+\
    ' data_p_g=${TARGETS[2]}'+\
    ' source_p_g=${TARGETS[3]}'+\
    ' MPS_file_g=${SOURCES[4]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' driver=acd'+\
    ' data_type=pressure'+\
    ' src_type=pressure'+\
    ' data_p_re=${TARGETS[4]}'+\
    ' MPS_adj=${TARGETS[5]}'+\
    ' MPS_adj_re=${TARGETS[6]}'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1#2
NP1 = 1
NP2 = 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+str(NP1)+\
    ' mpi_np2='+str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST: ASG_CANSCAL_P_0
#    - asg driver
#    - pressure data: single trace
#    - pressure source: single MPS order 0
#######################################################################
#######################################################################

#asg I/O files
hdr        = 'asg_canscal_p_0_hdr.su'
data_p     = 'asg_canscal_p_0_data_p.su'
source_p   = 'asg_canscal_p_0_RHS_p.su'
#mps and conv I/O files
MPS_src    = 'asg_cancsal_p_0_MPS.su'
hdr_g      = 'asg_canscal_p_0_hdr_g.su'
data_p_g   = 'asg_canscal_p_0_data_p_g.su'
MPS_src_g  = 'asg_canscal_p_0_MPS_g.su'
source_p_g = 'asg_canscal_p_0_RHS_p_g.su'
#other I/files
data_p_re  = 'asg_canscal_p_0_data_p_re.su'

MPS_ord=0
a_ord=4
MPS_dim=1
MPS_idx=0

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900 # starting x coord
gx_e  = 900 # ending x coord
gx_dx = 1  # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=1'+\
      ' wlt_0=${SOURCES[0]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=1'+\
      ' wlt_0=${SOURCES[0]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_p, 
          source_p, 
          data_p_g, 
          source_p_g, 
          data_p_re]
input = [mdl_file['bm'], 
         mdl_file['by'], 
         hdr, 
         hdr_g,
         MPS_src, 
         MPS_src_g]
jobname = 'asg_canscal_p_0'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[2]} '

#test command
cmd = test_asg_canscal_p
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_p=${TARGETS[1]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.5'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_p_g=${TARGETS[2]}'+\
    ' source_p_g=${TARGETS[3]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_p_re=${TARGETS[4]}'+\
    ' driver=asg'+\
    ' data_type=pressure'+\
    ' src_type=pressure'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST: ASG_CANSCAL_P_1
#    - asg driver
#    - pressure data: single trace
#    - pressure source: single canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr        = 'asg_canscal_p_1_hdr.su'
data_p     = 'asg_canscal_p_1_data_p.su'
source_p   = 'asg_canscal_p_1_RHS_p.su'
#mps and conv I/O files
MPS_src    = 'asg_cancsal_p_1_MPS.su'
hdr_g      = 'asg_canscal_p_1_hdr_g.su'
data_p_g   = 'asg_canscal_p_1_data_p_g.su'
MPS_src_g  = 'asg_canscal_p_1_MPS_g.su'
source_p_g = 'asg_canscal_p_1_RHS_p_g.su'
#other I/files
data_p_re  = 'asg_canscal_p_1_data_p_re.su'

MPS_ord=1
a_ord=4
MPS_dim=3
MPS_idx=2

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900 # starting x coord
gx_e  = 900 # ending x coord
gx_dx = 1  # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=3'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=delrt a=0 | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=3'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_p, 
          source_p,
          data_p_g,
          source_p_g, 
          data_p_re]
input = [mdl_file['bm'],
         mdl_file['by'], 
         hdr,
         hdr_g, 
         MPS_src, 
         MPS_src_g]
jobname= 'asg_canscal_p_1'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[2]} '

#test command
cmd = test_asg_canscal_p
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_p=${TARGETS[1]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.5'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_p_g=${TARGETS[2]}'+\
    ' source_p_g=${TARGETS[3]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_p_re=${TARGETS[4]}'+\
    ' driver=asg'+\
    ' data_type=pressure'+\
    ' src_type=pressure'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST: ASG_CANSCAL_P_2
#    - asg driver
#    - pressure data: multiple traces
#    - pressure source: three canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr        = 'asg_canscal_p_2_hdr.su'
data_p     = 'asg_canscal_p_2_data_p.su'
source_p   = 'asg_canscal_p_2_RHS_p.su'
#mps and conv I/O files
MPS_src    = 'asg_cancsal_p_2_MPS.su'
hdr_g      = 'asg_canscal_p_2_hdr_g.su'
data_p_g   = 'asg_canscal_p_2_data_p_g.su'
MPS_src_g  = 'asg_canscal_p_2_MPS_g.su'
source_p_g = 'asg_canscal_p_2_RHS_p_g.su'
#other I/files
data_p_re  = 'asg_canscal_p_2_data_p_re.su'

MPS_ord=1
a_ord=4
MPS_dim=3
MPS_idx=2

#source parameters
sx_o  = 900
sx_e  = 1100
sx_dx = 100
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 100   # starting x coord
gx_e  = 1900  # ending x coord
gx_dx = 25   # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su','wlt_gaussd.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=9'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[2]}' #src 1
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[2]}' #src 2
cmd = cmd +' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=9'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}' #src 1
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[1]}' #src 2
cmd = cmd +' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_p, 
          source_p, 
          data_p_g, 
          source_p_g, 
          data_p_re]
input = [mdl_file['bm'], 
         mdl_file['by'], 
         hdr, 
         hdr_g, 
         MPS_src, 
         MPS_src_g]
jobname='asg_canscal_p_2'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[2]} '

#test command
cmd = test_asg_canscal_p
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_p=${TARGETS[1]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=4'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.5'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_p_g=${TARGETS[2]}'+\
    ' source_p_g=${TARGETS[3]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_p_re=${TARGETS[4]}'+\
    ' driver=asg'+\
    ' data_type=pressure'+\
    ' src_type=pressure'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST : ASG_CANSCAL_V_0
#    - asg driver
#    - velocity data: single trace
#    - pressure source: single canonical MPS order 0
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canscal_v_0_hdr.su'
data_v0     = 'asg_canscal_v_0_data_v0.su'
data_v1     = 'asg_canscal_v_0_data_v1.su'
source_p    = 'asg_canscal_v_0_RHS_p.su'
#mps and conv I/O files
MPS_src     = 'asg_canscal_v_0_MPS.su'
hdr_g       = 'asg_canscal_v_0_hdr_g.su'
data_v0_g   = 'asg_canscal_v_0_data_v0_g.su'
data_v1_g   = 'asg_canscal_v_0_data_v1_g.su'
MPS_src_g   = 'asg_canscal_v_0_MPS_p_g.su'
source_p_g  = 'asg_canscal_v_0_RHS_p_g.su'
#other I/O files
data_v0_re  = 'asg_canscal_v_0_data_v0_re.su'
data_v1_re  = 'asg_canscal_v_0_data_v1_re.su'

MPS_ord=0
a_ord=4
MPS_dim=1
MPS_idx=0

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900  # starting x coord
gx_e  = 900  # ending x coord
gx_dx = 1     # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=1'+\
      ' wlt_0=${SOURCES[0]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=1'+\
      ' wlt_0=${SOURCES[0]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_v0, 
          data_v1,
          source_p, 
          data_v0_g, 
          data_v1_g, 
          source_p_g, 
          data_v0_re, 
          data_v1_re]
input = [mdl_file['bm'],
         mdl_file['by'],
         hdr,
         hdr_g,
         MPS_src,
         MPS_src_g]
jobname='asg_canscal_v_0'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} '

#test command
cmd = test_asg_canscal_v
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_v0=${TARGETS[0]}'+\
    ' data_v1=${TARGETS[1]}'+\
    ' source_p=${TARGETS[2]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.1'
#mps args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_v0_g=${TARGETS[3]}'+\
    ' data_v1_g=${TARGETS[4]}'+\
    ' source_p_g=${TARGETS[5]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_v0_re=${TARGETS[6]}'+\
    ' data_v1_re=${TARGETS[7]}'+\
    ' driver=asg'+\
    ' data_type=velocity'+\
    ' src_type=pressure'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST : ASG_CANSCAL_V_1
#    - asg driver
#    - velocity data: single trace
#    - pressure source: single canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canscal_v_1_hdr.su'
data_v0     = 'asg_canscal_v_1_data_v0.su'
data_v1     = 'asg_canscal_v_1_data_v1.su'
source_p    = 'asg_canscal_v_1_RHS_p.su'
#mps and conv I/O files
MPS_src     = 'asg_canscal_v_1_MPS.su'
hdr_g       = 'asg_canscal_v_1_hdr_g.su'
data_v0_g   = 'asg_canscal_v_1_data_v0_g.su'
data_v1_g   = 'asg_canscal_v_1_data_v1_g.su'
MPS_src_g   = 'asg_canscal_v_1_MPS_p_g.su'
source_p_g  = 'asg_canscal_v_1_RHS_p_g.su'
#other I/O files
data_v0_re  = 'asg_canscal_v_1_data_v0_re.su'
data_v1_re  = 'asg_canscal_v_1_data_v1_re.su'

MPS_ord=1
a_ord=4
MPS_dim=3
MPS_idx=2

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900  # starting x coord
gx_e  = 900  # ending x coord
gx_dx = 1     # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=3'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=3'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_v0, 
          data_v1, 
          source_p, 
          data_v0_g, 
          data_v1_g, 
          source_p_g, 
          data_v0_re, 
          data_v1_re]
input = [mdl_file['bm'],
         mdl_file['by'],
         hdr,
         hdr_g,
         MPS_src,
         MPS_src_g]
jobname = 'asg_canscal_v_1'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} '

#test command
cmd = test_asg_canscal_v
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_v0=${TARGETS[0]}'+\
    ' data_v1=${TARGETS[1]}'+\
    ' source_p=${TARGETS[2]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd + ' dt=1' #units [ms]
#cmd = cmd + ' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.1'
#mps args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_v0_g=${TARGETS[3]}'+\
    ' data_v1_g=${TARGETS[4]}'+\
    ' source_p_g=${TARGETS[5]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_v0_re=${TARGETS[6]}'+\
    ' data_v1_re=${TARGETS[7]}'+\
    ' driver=asg'+\
    ' data_type=velocity'+\
    ' src_type=pressure'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST : ASG_CANSCAL_V_2
#    - asg driver
#    - velocity data: multiple traces
#    - pressure source: two canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canscal_v_2_hdr.su'
data_v0     = 'asg_canscal_v_2_data_v0.su'
data_v1     = 'asg_canscal_v_2_data_v1.su'
source_p    = 'asg_canscal_v_2_source_p.su'
#mps and conv I/O files
MPS_src     = 'asg_canscal_v_2_MPS.su'
hdr_g       = 'asg_canscal_v_2_hdr_g.su'
data_v0_g   = 'asg_canscal_v_2_data_v0_g.su'
data_v1_g   = 'asg_canscal_v_2_data_v1_g.su'
MPS_src_g   = 'asg_canscal_v_2_MPS_p_g.su'
source_p_g  = 'asg_canscal_v_2_RHS_p_g.su'
#other I/O files
data_v0_re  = 'asg_canscal_v_2_data_v0_re.su'
data_v1_re  = 'asg_canscal_v_2_data_v1_re.su'

MPS_ord=1
a_ord=4
MPS_dim=3
MPS_idx=2

#source parameters
sx_o  = 900
sx_e  = 1100
sx_dx = 100
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 100    # starting x coord
gx_e  = 1900   # ending x coord
gx_dx = 25     # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd +' | '+ sushw +' key=delrt a=-250'
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su','wlt_gaussd.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=9'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[2]}' #src 1
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[2]}' #src 2
cmd = cmd +' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=9'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[1]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}' #src 1
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[1]}' #src 2
cmd = cmd +' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_v0, 
          data_v1, 
          source_p, 
          data_v0_g, 
          data_v1_g, 
          source_p_g, 
          data_v0_re, 
          data_v1_re]
input = [mdl_file['bm'],
         mdl_file['by'],
         hdr,
         hdr_g,
         MPS_src,
         MPS_src_g]
jobname = 'asg_canscal_v_2'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} '

#test command
cmd = test_asg_canscal_v
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_v0=${TARGETS[0]}'+\
    ' data_v1=${TARGETS[1]}'+\
    ' source_p=${TARGETS[2]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.1'
#mps args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_v0_g=${TARGETS[3]}'+\
    ' data_v1_g=${TARGETS[4]}'+\
    ' source_p_g=${TARGETS[5]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_v0_re=${TARGETS[6]}'+\
    ' data_v1_re=${TARGETS[7]}'+\
    ' driver=asg'+\
    ' data_type=velocity'+\
    ' src_type=pressure'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1#2
NP1= 1
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST: ASG_CANVEC_P_0
#    - asg driver
#    - pressure data: single trace
#    - velocity source: single canonical MPS order 0
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canvec_p_0_hdr.su'
data_p      = 'asg_canvec_p_0_data_p.su'
source_v0   = 'asg_canvec_p_0_RHS_v0.su'
source_v1   = 'asg_canvec_p_0_RHS_v1.su'
#mps and conv I/O files
MPS_src     = 'asg_canvec_p_0_MPS.su'
hdr_g       = 'asg_canvec_p_0_hdr_g.su'
data_p_g    = 'asg_canvec_p_0_data_p_g.su'
MPS_src_g   = 'asg_canvec_p_0_MPS_g.su'
source_v0_g = 'asg_canvec_p_0_RHS_v0_g.su'
source_v1_g = 'asg_canvec_p_0_RHS_v1_g.su'
#other I/files
data_p_re  = 'asg_canvec_p_0_data_p_re.su'

MPS_ord=0
a_ord=4
MPS_dim=2
MPS_idx=1

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900 # starting x coord
gx_e  = 900 # ending x coord
gx_dx = 1  # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=2'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=2'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_p, 
          source_v0, 
          source_v1, 
          data_p_g, 
          source_v0_g, 
          source_v1_g, 
          data_p_re]
input = [mdl_file['bm'], 
         mdl_file['by'], 
         hdr, 
         hdr_g, 
         MPS_src,
         MPS_src_g]
jobname = 'asg_canvec_p_0'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} '

#test command
cmd = test_asg_canvec_p
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_v0=${TARGETS[1]}'+\
    ' source_v1=${TARGETS[2]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.5'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_p_g=${TARGETS[3]}'+\
    ' source_v0_g=${TARGETS[4]}'+\
    ' source_v1_g=${TARGETS[5]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_p_re=${TARGETS[6]}'+\
    ' driver=asg'+\
    ' data_type=pressure'+\
    ' src_type=velocity'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST: ASG_CANVEC_P_1
#    - asg driver
#    - pressure data: single trace
#    - velocity source: single canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canvec_p_1_hdr.su'
data_p      = 'asg_canvec_p_1_data_p.su'
source_v0   = 'asg_canvec_p_1_RHS_v0.su'
source_v1   = 'asg_canvec_p_1_RHS_v1.su'
#mps and conv I/O files
MPS_src     = 'asg_canvec_p_1_MPS.su'
hdr_g       = 'asg_canvec_p_1_hdr_g.su'
data_p_g    = 'asg_canvec_p_1_data_p_g.su'
MPS_src_g   = 'asg_canvec_p_1_MPS_g.su'
source_v0_g = 'asg_canvec_p_1_RHS_v0_g.su'
source_v1_g = 'asg_canvec_p_1_RHS_v1_g.su'
#other I/files
data_p_re  = 'asg_canvec_p_1_data_p_re.su'

MPS_ord=1
a_ord=4
MPS_dim=6
MPS_idx=5

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900 # starting x coord
gx_e  = 900 # ending x coord
gx_dx = 1  # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
    sushw +' key=delrt a=0 | '+\
    sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
    sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
    sushw +' key=selev a='+ str(selev) + ' | '+\
    sushw +' key=gelev a='+ str(gelev)
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=6'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}'+\
      ' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=6'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}'+\
      ' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_p, 
          source_v0, 
          source_v1,
          data_p_g, 
          source_v0_g, 
          source_v1_g, 
          data_p_re]
input = [mdl_file['bm'], 
         mdl_file['by'], 
         hdr,
         hdr_g,
         MPS_src, 
         MPS_src_g]
jobname = 'asg_canvec_p_0'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} '

#test command
cmd = test_asg_canvec_p
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_v0=${TARGETS[1]}'+\
    ' source_v1=${TARGETS[2]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.5'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_p_g=${TARGETS[3]}'+\
    ' source_v0_g=${TARGETS[4]}'+\
    ' source_v1_g=${TARGETS[5]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_p_re=${TARGETS[6]}'+\
    ' driver=asg'+\
    ' data_type=pressure'+\
    ' src_type=velocity'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST: ASG_CANVEC_P_2
#    - asg driver
#    - pressure data: multiple traces
#    - velocity source: two canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canvec_p_2_hdr.su'
data_p      = 'asg_canvec_p_2_data_p.su'
source_v0   = 'asg_canvec_p_2_RHS_v0.su'
source_v1   = 'asg_canvec_p_2_RHS_v1.su'
#mps and conv I/O files
MPS_src     = 'asg_canvec_p_2_MPS.su'
hdr_g       = 'asg_canvec_p_2_hdr_g.su'
data_p_g    = 'asg_canvec_p_2_data_p_g.su'
MPS_src_g   = 'asg_canvec_p_2_MPS_g.su'
source_v0_g = 'asg_canvec_p_2_RHS_v0_g.su'
source_v1_g = 'asg_canvec_p_2_RHS_v1_g.su'
#other I/files
data_p_re  = 'asg_canvec_p_2_data_p_re.su'

MPS_ord=1
a_ord=4
MPS_dim=6
MPS_idx=5

#source parameters
sx_o  = 900
sx_e  = 1100
sx_dx = 100
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 100   # starting x coord
gx_e  = 1900  # ending x coord
gx_dx = 25    # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=delrt a=0 | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su','wlt_gaussd.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=18'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}' 
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[0]}' #src 1
cmd = cmd +' wlt_9=${SOURCES[0]} wlt_10=${SOURCES[0]} wlt_11=${SOURCES[2]}'
cmd = cmd +' wlt_12=${SOURCES[0]} wlt_13=${SOURCES[0]} wlt_14=${SOURCES[0]}' #src 2
cmd = cmd +' wlt_15=${SOURCES[0]} wlt_16=${SOURCES[0]} wlt_17=${SOURCES[1]}'  
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=18'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}' 
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[0]}' #src 1
cmd = cmd +' wlt_9=${SOURCES[0]} wlt_10=${SOURCES[0]} wlt_11=${SOURCES[1]}' 
cmd = cmd +' wlt_12=${SOURCES[0]} wlt_13=${SOURCES[0]} wlt_14=${SOURCES[0]}' #src 2
cmd = cmd +' wlt_15=${SOURCES[0]} wlt_16=${SOURCES[0]} wlt_17=${SOURCES[1]}'  
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_p, 
          source_v0, 
          source_v1, 
          data_p_g, 
          source_v0_g, 
          source_v1_g, 
          data_p_re]
input = [mdl_file['bm'], 
         mdl_file['by'], 
         hdr, 
         hdr_g, 
         MPS_src, 
         MPS_src_g]
jobname='asg_canvec_p_2'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[3]} '

#test command
cmd = test_asg_canvec_p
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_p=${TARGETS[0]}'+\
    ' source_v0=${TARGETS[1]}'+\
    ' source_v1=${TARGETS[2]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.5'
#mps and conv args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_p_g=${TARGETS[3]}'+\
    ' source_v0_g=${TARGETS[4]}'+\
    ' source_v1_g=${TARGETS[5]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_p_re=${TARGETS[6]}'+\
    ' driver=asg'+\
    ' data_type=pressure'+\
    ' src_type=velocity'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1#2
NP1= 1
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]

#######################################################################
#######################################################################
# TEST : ASG_CANVEC_V_0
#    - asg driver
#    - velocity data: single trace
#    - velocity source: single canonical MPS order 0
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canvec_v_0_hdr.su'
data_v0     = 'asg_canvec_v_0_data_v0.su'
data_v1     = 'asg_canvec_v_0_data_v1.su'
source_v0   = 'asg_canvec_v_0_RHS_v0.su'
source_v1   = 'asg_canvec_v_0_RHS_v1.su'
#mps and conv I/O files
MPS_src     = 'asg_canvec_v_0_MPS.su'
hdr_g       = 'asg_canvec_v_0_hdr_g.su'
data_v0_g   = 'asg_canvec_v_0_data_v0_g.su'
data_v1_g   = 'asg_canvec_v_0_data_v1_g.su'
MPS_src_g   = 'asg_canvec_v_0_MPS_p_g.su'
source_v0_g = 'asg_canvec_v_0_RHS_v0_g.su'
source_v1_g = 'asg_canvec_v_0_RHS_v1_g.su'
#other I/O files
data_v0_re  = 'asg_canvec_v_0_data_v0_re.su'
data_v1_re  = 'asg_canvec_v_0_data_v1_re.su'

MPS_ord=0
a_ord=4
MPS_dim=2
MPS_idx=1

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900  # starting x coord
gx_e  = 900  # ending x coord
gx_dx = 1     # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd + sushw +' key=delrt a=-250 | '
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd + sushw +' key=delrt a=-250 | '
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=2'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=2'+\
      ' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[1]}'+\
      ' out=tmp_MPS.su && '+\
      sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '+\
      sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)+\
      ' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_v0,
          data_v1, 
          source_v0,
          source_v1,
          data_v0_g,
          data_v1_g, 
          source_v0_g,
          source_v1_g, 
          data_v0_re,
          data_v1_re]

input = [mdl_file['bm'],
         mdl_file['by'],
         hdr,
         hdr_g,
         MPS_src,
         MPS_src_g]
jobname = 'asg_canvec_v_0'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[5]} '

#test command
cmd = test_asg_canvec_v
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_v0=${TARGETS[0]}'+\
    ' data_v1=${TARGETS[1]}'+\
    ' source_v0=${TARGETS[2]}'+\
    ' source_v1=${TARGETS[3]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.1'
#mps args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_v0_g=${TARGETS[4]}'+\
    ' data_v1_g=${TARGETS[5]}'+\
    ' source_v0_g=${TARGETS[6]}'+\
    ' source_v1_g=${TARGETS[7]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_v0_re=${TARGETS[8]}'+\
    ' data_v1_re=${TARGETS[9]}'+\
    ' driver=asg'+\
    ' data_type=velocity'+\
    ' src_type=velocity'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST : ASG_CANVEC_V_1
#    - asg driver
#    - velocity data: single trace
#    - velocity source: single canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canvec_v_1_hdr.su'
data_v0     = 'asg_canvec_v_1_data_v0.su'
data_v1     = 'asg_canvec_v_1_data_v1.su'
source_v0   = 'asg_canvec_v_1_RHS_v0.su'
source_v1   = 'asg_canvec_v_1_RHS_v1.su'
#mps and conv I/O files
MPS_src     = 'asg_canvec_v_1_MPS.su'
hdr_g       = 'asg_canvec_v_1_hdr_g.su'
data_v0_g   = 'asg_canvec_v_1_data_v0_g.su'
data_v1_g   = 'asg_canvec_v_1_data_v1_g.su'
MPS_src_g   = 'asg_canvec_v_1_MPS_p_g.su'
source_v0_g = 'asg_canvec_v_1_RHS_v0_g.su'
source_v1_g = 'asg_canvec_v_1_RHS_v1_g.su'
#other I/O files
data_v0_re  = 'asg_canvec_v_1_data_v0_re.su'
data_v1_re  = 'asg_canvec_v_1_data_v1_re.su'

MPS_ord=1
a_ord=4
MPS_dim=6
MPS_idx=5

#source parameters
sx_o  = 1003
sx_e  = 1003
sx_dx = 1
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 900  # starting x coord
gx_e  = 900  # ending x coord
gx_dx = 1     # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd + sushw +' key=delrt a=-250 | '
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd + sushw +' key=delrt a=-250 | '
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=6'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}'
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}'
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=6'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}'
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}'
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_v0, 
          data_v1, 
          source_v0,
          source_v1,
          data_v0_g, 
          data_v1_g, 
          source_v0_g, 
          source_v1_g, 
          data_v0_re, 
          data_v1_re]

input = [mdl_file['bm'],
         mdl_file['by'],
         hdr,
         hdr_g,
         MPS_src,
         MPS_src_g]
jobname = 'asg_canvec_v_1'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[5]} '

#test command
cmd = test_asg_canvec_v
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_v0=${TARGETS[0]}'+\
    ' data_v1=${TARGETS[1]}'+\
    ' source_v0=${TARGETS[2]}'+\
    ' source_v1=${TARGETS[3]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.1'
#mps args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_v0_g=${TARGETS[4]}'+\
    ' data_v1_g=${TARGETS[5]}'+\
    ' source_v0_g=${TARGETS[6]}'+\
    ' source_v1_g=${TARGETS[7]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_v0_re=${TARGETS[8]}'+\
    ' data_v1_re=${TARGETS[9]}'+\
    ' driver=asg'+\
    ' data_type=velocity'+\
    ' src_type=velocity'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1
NP1= 1#2
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]


#######################################################################
#######################################################################
# TEST : ASG_CANVEC_V_2
#    - asg driver
#    - velocity data: multiple traces
#    - velocity source: three canonical MPS order 1
#######################################################################
#######################################################################

#asg I/O files
hdr         = 'asg_canvec_v_2_hdr.su'
data_v0     = 'asg_canvec_v_2_data_v0.su'
data_v1     = 'asg_canvec_v_2_data_v1.su'
source_v0   = 'asg_canvec_v_2_RHS_v0.su'
source_v1   = 'asg_canvec_v_2_RHS_v1.su'
#mps and conv I/O files
MPS_src     = 'asg_canvec_v_2_MPS.su'
hdr_g       = 'asg_canvec_v_2_hdr_g.su'
data_v0_g   = 'asg_canvec_v_2_data_v0_g.su'
data_v1_g   = 'asg_canvec_v_2_data_v1_g.su'
MPS_src_g   = 'asg_canvec_v_2_MPS_p_g.su'
source_v0_g = 'asg_canvec_v_2_RHS_v0_g.su'
source_v1_g = 'asg_canvec_v_2_RHS_v1_g.su'
#other I/O files
data_v0_re  = 'asg_canvec_v_2_data_v0_re.su'
data_v1_re  = 'asg_canvec_v_2_data_v1_re.su'

MPS_ord=1
a_ord=4
MPS_dim=6
MPS_idx=5

#source parameters
sx_o  = 900
sx_e  = 1100
sx_dx = 100
sx_n  = int((sx_e-sx_o)/sx_dx)+1
selev = -1003 


#######################################################################
# Build files containing acquisition geometry information. 
#######################################################################

#receiver parameters
gx_o  = 100    # starting x coord
gx_e  = 1900  # ending x coord
gx_dx = 25    # distance between  
gx_n  = int((gx_e-gx_o)/gx_dx)+1
gelev = -900 # receiver depth

ntr = gx_n*sx_n

T  = 1.0   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
      sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
      sushw +' key=selev a='+ str(selev) + ' | '+\
      sushw +' key=gelev a='+ str(gelev)
#cmd = cmd + sushw +' key=delrt a=-250 | '
Flow(hdr,None,cmd,stdin=0)

T  = 1.5   # final time in seconds
dt = 0.004 # time step size
nt = int(T/dt)+1

cmd = sunull +' nt='+ str(nt) +' ntr='+ str(ntr) +' dt='+ str(dt) +' | '+\
    sushw +' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+ str(gx_n) +' | '+\
    sushw +' key=gx a='+ str(gx_o) +' b='+ str(gx_dx) +' j='+ str(gx_n) +' | '+\
    sushw +' key=selev a='+ str(selev) + ' | '+\
    sushw +' key=gelev a='+ str(gelev)
#cmd = cmd + sushw +' key=delrt a=-250 | '
Flow(hdr_g,None,cmd,stdin=0)


#######################################################################
# Build sources
#######################################################################

#build MPS file
output = [MPS_src]
input = ['wlt_null.su','wlt_ricker.su','wlt_gaussd.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=18'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}' 
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[0]}' #src 1
cmd = cmd +' wlt_9=${SOURCES[0]} wlt_10=${SOURCES[0]} wlt_11=${SOURCES[2]}' 
cmd = cmd +' wlt_12=${SOURCES[0]} wlt_13=${SOURCES[0]} wlt_14=${SOURCES[0]}' #src 2
cmd = cmd +' wlt_15=${SOURCES[0]} wlt_16=${SOURCES[0]} wlt_17=${SOURCES[1]}' 
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)

output = [MPS_src_g]
input = ['wlt_null.su','wlt_delta.su']
cmd = tgs_n_cat +' CWPROOT='+ CWPROOT +' N=18'
cmd = cmd +' wlt_0=${SOURCES[0]} wlt_1=${SOURCES[0]} wlt_2=${SOURCES[0]}' #src 0
cmd = cmd +' wlt_3=${SOURCES[0]} wlt_4=${SOURCES[0]} wlt_5=${SOURCES[1]}' 
cmd = cmd +' wlt_6=${SOURCES[0]} wlt_7=${SOURCES[0]} wlt_8=${SOURCES[0]}' #src 1
cmd = cmd +' wlt_9=${SOURCES[0]} wlt_10=${SOURCES[0]} wlt_11=${SOURCES[1]}' 
cmd = cmd +' wlt_12=${SOURCES[0]} wlt_13=${SOURCES[0]} wlt_14=${SOURCES[0]}' #src 2
cmd = cmd +' wlt_15=${SOURCES[0]} wlt_16=${SOURCES[0]} wlt_17=${SOURCES[1]}' 
cmd = cmd +' out=tmp_MPS.su && '
cmd = cmd + sushw + ' <tmp_MPS.su key=selev a='+ str(selev) + ' | '
cmd = cmd + sushw + ' key=sx a='+ str(sx_o) +' c='+ str(sx_dx) +' j='+str(MPS_dim)
cmd = cmd +' >${TARGETS[0]} && /bin/rm tmp_MPS.su'
Flow(output,input,cmd,stdin=0,stdout=0)


#######################################################################
# Compute data
#######################################################################

output = [data_v0, 
          data_v1, 
          source_v0,
          source_v1,
          data_v0_g, 
          data_v1_g, 
          source_v0_g, 
          source_v1_g, 
          data_v0_re, 
          data_v1_re]

input = [mdl_file['bm'],
         mdl_file['by'],
         hdr,
         hdr_g,
         MPS_src,
         MPS_src_g]
jobname = 'asg_canvec_v_2'

#pre command
pre = ' /bin/cp ${SOURCES[2]} ${TARGETS[0]} && '+\
      ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[4]} && '+\
      ' /bin/cp ${SOURCES[3]} ${TARGETS[5]}  '

#test command
cmd = test_asg_canvec_v
#asg args
cmd = cmd +\
    ' bulkmod=${SOURCES[0]}'+\
    ' buoyancy=${SOURCES[1]}'+\
    ' data_v0=${TARGETS[0]}'+\
    ' data_v1=${TARGETS[1]}'+\
    ' source_v0=${TARGETS[2]}'+\
    ' source_v1=${TARGETS[3]}'+\
    ' deriv=0 adjoint=0 cfl=0.5 order=2'+\
    ' cmin=5.0 cmax=5.0 dmin=1.0 dmax=1.0'
#cmd = cmd +' dt=1' #units [ms]
#cmd = cmd +' nl1=500 nr1=500 nl2=500 nr2=500 pmlampl=0.1'
#mps args
cmd = cmd +\
    ' appx_ord='+ str(a_ord)+\
    ' MPS_ord='+str(MPS_ord)+\
    ' data_v0_g=${TARGETS[4]}'+\
    ' data_v1_g=${TARGETS[5]}'+\
    ' source_v0_g=${TARGETS[6]}'+\
    ' source_v1_g=${TARGETS[7]}'+\
    ' MPS_file=${SOURCES[4]}'+\
    ' MPS_file_g=${SOURCES[5]}'+\
    ' MPS_idx='+str(MPS_idx)
#other args
cmd = cmd +\
    ' data_v0_re=${TARGETS[8]}'+\
    ' data_v1_re=${TARGETS[9]}'+\
    ' driver=asg'+\
    ' data_type=velocity'+\
    ' src_type=velocity'+\
    ' jobname='+str(jobname)
#cmd = cmd +' outfile=../'+str(OUTFILE)
#mpi args
PT = 1#2
NP1= 1
NP2= 1#3
cmd = cmd +\
    ' partask='+ str(PT)+\
    ' mpi_np1='+ str(NP1)+\
    ' mpi_np2='+ str(NP2)
exe = { 'platf':'', 'ppn':str(PT*NP1*NP2) }

#job
jobs = jobs + [{ 'job': jobname,
                 'pre': pre,
                 'cmd': cmd,
                 'src': input,
                 'tgt': output,
                 'exe': exe
                 },
               ]

tripExec(jobs,penv)

End()
