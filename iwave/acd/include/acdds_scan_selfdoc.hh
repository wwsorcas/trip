#ifndef __ACDDS_SCAN_SELFDOC__
#define __ACDDS_SCAN_SELFDOC__

const char * sdoc[] = {
" Differential Semblance objective function scan test based on acoustic ",
" constant density centered difference modeling in 2D or 3D.",
" ",
" Authors: Muhong Zhou, Yin Huang, William W. Symes",
" ",
" Compute differential semblance objective function values along ling ",
" segment in its domain:   ",
" start from csq_beg + HMin * (csq_end - csq_beg)",
" end at     csq_beg + HMax * (csq_end - csq_beg)",
" ",
" Typical parameter list. May be copied, edited, and used for input: either",
" include parameters on command line (for example in Flow), or place",
" in file <foo> and include \"par=<foo>\" on command line. Any parameter",
" included explicitly in command line overrides parameter with same key",
" in par file.",
" ",
"  Invoke single threaded execution by ",
" ",
" \"sfacdds_scan [parameters]  [Madagascar install]\"",
" ",
" or ",
" ",
" \"acdds_scan.x [parameters] [standalone install]\"",
" ",
" or multi-threaded execution using interactive or batch MPI (for which",
" code must be compiled with MPI enabled).",
" ",
" Given values are defaults; non-optional values indicated by corner brackets.",
" ",
" --------------------------- begin parameters ---------------------------",
" ",
" FD info:",
" ",
"          order = 2           spatial half-order",
"            cfl = 0.75        proportion of max dt/dx",
"           cmin = 1.0         min permitted velocity (m/ms) - sanity check",
"           cmax = 4.5         max permitted velocity (m/ms) - used in dt comp",
" ",
" ------------------------------------------------------------------------",
" Source info:",
" ",
"         source = <path>      path to input source data file (traces), ",
" 	                       SU format, source position(s) indicated by",
"                              RECEIVER coordinates (gx, gy, gelev) - may",
"                              prepare input source with correct headers",
"                              using trace/main/towed_array.x",
"        sampord = 1           spatial interp order - 0 (nr nbr) or ",
"                              1 (multilin)",
" ",
" ------------------------------------------------------------------------",
" Trace info:",
" ",
"      datafile  = <path>      input data file, SU format - must exist ",
"                              headers establish acquisition geometry",
" ",
" ------------------------------------------------------------------------",
" Model info:",
" ",
"            csq = <path>      input vel-squared reference file, ",
"                              determines simulation spatial grid,",
"                              only headers used in this application",
"                              but can name same file as initial vel-",
"                              squared model"
" ",
"         csqext = <path>      input extended vel-squared reference file,",
"                              determines extended spatial grid - must be",
"                              compatible with csq [in this version - soon",
"                              to come: autogeneration from csq and data]",
"                              can name same file as output reflectivity",
" ",  
"        csq_beg = <path>      input initial vel-squared",
" ", 
"        csq_end = <path>      input final vel-squared for scan test",
" ",
"       DSWeight = 0.0         differential semblance penalty weight",
" ",
" ------------------------------------------------------------------------",
" SCAN test info:",
" ",
"        NScan =  11           number of points along line segment ",
"        HMin  = -1.0          ",
"        HMax  =  1.0          ",
" ",
" ------------------------------------------------------------------------",
" MPI info:",
" ",
"        mpi_np1 = 1           number of subdomains along axis 1",
"        mpi_np2 = 1           number of subdomains along axis 2",
"        mpi_np3 = 1           number of subdomains along axis 3",
"        partask = 1           number of shots to execute in parallel",
" ",
" ------------------------------------------------------------------------",
" Conjugate Gradient info (inner linear inversion)",
" ",
"    ResidualTol = 100.0*numeric_limits<float>::epsilon()",
"                              relative residual reduction thresshold",
"    GradientTol = 100.0*numeric_limits<float>::epsilon()",
"                              relative gradient reduction threshhold",
"        MaxStep = numeric_limits<float>::max()",
"                              max permitted step length",
"        MaxIter = 10          CG iteration limit",
" ",
" ------------------------------------------------------------------------",
" Output info:",
" ",
"        outfile = \"\"        output filename for optimization - if empty",
"                              string, then output goes to terminal",
" ",
" FD ouput - written to coutxxx.txt on rank xxx",
"       printact = 0           output at every time step",
"                              0 - none",
"                              1 - time step index",
"                              2 - diagnostic messages from main routines",
"                              > 2 - much more, useful only for serious ",
"                                 debugging",
"        dump_pi = 0           dump parallel/dom. decomp info",
"       dump_lda = 0           dump grid data for allocated arrays",
"       dump_ldc = 0           dump grid data for computational arrays",
"       dump_ldr = 0           dump grid data for receive buffers",
"       dump_lds = 0           dump grid data for send buffers",
"      dump_term = 0           dump trace header data",
" ",
" ---------------------------end parameters ------------------------------",
NULL };

#endif
