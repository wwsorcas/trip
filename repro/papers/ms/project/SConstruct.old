#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sucddecon       = os.path.join(CWPROOT,'bin/sucddecon')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
sustack         = os.path.join(CWPROOT,'bin/sustack')
suop            = os.path.join(CWPROOT,'bin/suop')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sumax           = os.path.join(CWPROOT,'bin/sumax')
a2b             = os.path.join(CWPROOT,'bin/a2b')
#if os.getenv('IWAVE'): # local version 
RSFSRC          = os.getenv('RSFSRC')
towed_array     = os.path.join(RSFSRC,'trip/iwave/trace/main/towed_array.x')
acd             = os.path.join(RSFSRC,'trip/iwave/acd/main/acd.x')
acdcgne         = os.path.join(RSFSRC,'trip/iwave/acd/main/acdcgne.x')
acdcheb         = os.path.join(RSFSRC,'trip/iwave/acd/main/acdcheb.x')
acdaltcheb         = os.path.join(RSFSRC,'trip/iwave/acd/main/acdaltcheb.x')
acdlbfgs        = os.path.join(RSFSRC,'trip/iwave/acd/main/acdlbfgs.x')
acdiva          = os.path.join(RSFSRC,'trip/iwave/acd/main/acdiva.x')
acdadjtest      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdadjtest.x')
#else: # Madagascar version
#    towed_array     = 'towed_array'
#    acd             = 'acd'
#    acdcgne         = 'acdcgne'
#    acdcheb         = 'acdcheb'
#    acdlbfgs        = 'acdlbfgs'
#    acdiva          = 'acdiva'
#    acdadjtest      = 'acdadjtest'

Flow('wavelet_base.su', None, suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=250 dt=0.004 | ' + sufilter + ' f=2,5.25,30 | ' + sushw + ' key=delrt a=-1000 ', stdin=0)

Flow('delta.su',None, suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=250 dt=0.004 | ' + sushw + ' key=delrt a=-1000 ', stdin=0)

Flow('deltafrac.su',None,suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=250 dt=0.004 | ' + sushw + ' key=delrt a=-1000 |' + sufrac + ' power=-0.25 phasefac=0.0 verbose=1', stdin=0)

Flow('6km.su',None,
     sunull + ' nt=751 ntr=101 dt=0.004 | ' + 
     sushw + ' key=sx a=5100 c=0 j=101 | ' + 
     sushw + ' key=gx a=4000 b=40 j=101 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=gelev a=-3000 | ' + 
     sushw + ' key=selev a=-10 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 ',
     stdin=0)

Flow('wavelet_6km.su', ['wavelet_base.su', '6km.su'],
     towed_array + 
     '''
     data=${SOURCES[1]} 
     src=${SOURCES[0]} 
     towed=${TARGETS[0]}
     ''',
     stdin=0, stdout=0)

Flow('delta_6km.su', ['delta.su', '6km.su'],
     towed_array + 
     '''
     data=${SOURCES[1]} 
     src=${SOURCES[0]} 
     towed=${TARGETS[0]}
     ''',
     stdin=0, stdout=0)

Flow('deltafrac_6km.su', ['deltafrac.su', '6km.su'],
     towed_array + 
     '''
     data=${SOURCES[1]} 
     src=${SOURCES[0]} 
     towed=${TARGETS[0]}
     ''',
     stdin=0, stdout=0)

Flow('csqhom',None,'makevel n1=500 d1=10 n2=1000 d2=10 o1=0 o2=0 v000=4.0 | put data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m^2/ms^2 esize=4',stdin=0) 
for vlens in range(0,11):
    Flow('csqlens' + str(vlens) + '.rsf', None,'makevel n1=500 d1=10 n2=1000 d2=10 o1=0 o2=0 v000=4.0 dlens=500 tlens=1000 vlens=-' + str(vlens*0.2) + ' x1lens=1500 x2lens=5000 | put data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m^2/ms^2 esize=4',stdin=0) 

oneshot = '''
/bin/cp ${SOURCES[2]} $TARGET && %s 
deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
csq=${SOURCES[1]} source=${SOURCES[0]} data=$TARGET 
''' % acd

# simulation - one shot, hom
Flow('shot6kmhom.su',['wavelet_6km.su','csqhom.rsf','6km.su'],
     oneshot,stdin=0,stdout=-1, workdir='$TARGET.work')

# simulation - one shot, hom, delta
Flow('green6kmhom.su',['delta_6km.su','csqhom.rsf','6km.su'],
     oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')

# simulation - one shot, hom, delta
Flow('green6kmfrac.su',['deltafrac_6km.su','csqhom.rsf','6km.su'],
     oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')

# simulation - one shot, lens, delta
for vlens in range(0,11):
    Flow('green6kmlens' + str(vlens) + '.su',['delta_6km.su','csqlens' + str(vlens) + '.rsf','6km.su'],
         oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')

# simulation - convolve with Green's function 

Flow('shot6kmhom_conv.su',['green6kmhom.su','wavelet_base.su'],
     suconv + ' sufile=${SOURCES[1]} < ${SOURCES[0]} > ${TARGETS[0]}',
     stdin=0, stdout=-1)

for vlens in range(0,11):
    Flow('shot6kmlens' + str(vlens) + '_conv.su',['green6kmlens' + str(vlens) + '.su','wavelet_base.su'],
         suconv + ' sufile=${SOURCES[1]} < ${SOURCES[0]} > ${TARGETS[0]}',
         stdin=0, stdout=-1)


# decon - pad to 4 s, decon
Flow('shot6kmhom_decon.su',['shot6kmhom_conv.su','green6kmhom.su'],
     suwind + ' tmax=6.0  < ${SOURCES[0]} | ' + 
     sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 | ' +
     suwind +' tmin=1 tmax=2 | ' + sushw + ' key=delrt a=-500 > ${TARGETS[0]}',
     stdin=0, stdout=-1)

for vlens in range(0,11):
    Flow('shot6kmlens10_decon' + str(vlens) +'.su',['shot6kmlens10_conv.su','green6kmlens' + str(vlens) + '.su'],
         suwind + ' tmax=6.0  < ${SOURCES[0]} | ' + 
         sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 | ' +
         suwind +' tmin=1 tmax=2 | ' + sushw + ' key=delrt a=-500 > ${TARGETS[0]}',
         stdin=0, stdout=-1)

# decon - pad to 4 s, decon
Flow('shot6kmlens10_decon_hom.su',['shot6kmlens10_conv.su','green6kmhom.su'],
     suwind + ' tmax=6.0  < ${SOURCES[0]} | ' + 
     sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 | ' +
     suwind +' tmin=1 tmax=2 | ' + sushw + ' key=delrt a=-500 > ${TARGETS[0]}',
     stdin=0, stdout=-1)

for vlens in range(0,11):
    Flow(['shot6kmlens10_decon' + str(vlens) + '_tscale.su'],'shot6kmlens10_decon'+ str(vlens) +'.su',
         sugain + ' tpow=1 ')

Flow('shot6kmlens10_decon_hom_tscale.su','shot6kmlens10_decon_hom.su',
     sugain + ' tpow=1 ')

Flow('awicurve.txt',[
     'shot6kmlens10_decon_hom_tscale.su',
     'shot6kmlens10_decon1_tscale.su',
     'shot6kmlens10_decon2_tscale.su',
     'shot6kmlens10_decon3_tscale.su',
     'shot6kmlens10_decon4_tscale.su',
     'shot6kmlens10_decon5_tscale.su',
     'shot6kmlens10_decon6_tscale.su',
     'shot6kmlens10_decon7_tscale.su',
     'shot6kmlens10_decon8_tscale.su',
     'shot6kmlens10_decon9_tscale.su',
     'shot6kmlens10_decon10_tscale.su'],
     sumax + ' mode=rms outpar=jnk < ${SOURCES[0]}; cat jnk >> $TARGET;' +
     sumax + ' mode=rms < ${SOURCES[1]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[2]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[3]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[4]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[5]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[6]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[7]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[8]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[9]} outpar=jnk; cat jnk >> $TARGET; ' +
     sumax + ' mode=rms < ${SOURCES[10]} outpar=jnk; cat jnk >> $TARGET; ' + 
     '/bin/rm -f jnk',
     stdin=0, stdout=-1)

Flow(['awicurve.rsf', 'awicurve.rsf@'], 'awicurve.txt',
     '''
     echo n1=11 > ${TARGETS[0]}; 
     echo o1=0.0 >> ${TARGETS[0]}; 
     echo d1=0.2 >> ${TARGETS[0]}; 
     echo in=awicurve.rsf@ >> ${TARGETS[0]}; 
     echo data_format="native_float" >> ${TARGETS[0]}; 
     echo esize=4 >> ${TARGETS[0]};
     ''' +
     a2b + ' n1=1 <$SOURCE > ${TARGETS[1]}',
     stdin=0,stdout=-1)

Result('shot6kmlens10_conv','shot6kmlens10_conv.su', 'suread endian=0 read=data | put label1=Time label2=Trace unit1=s unit="GPa" | grey mean=y')

Result('csqlens10', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p\^\^2\_" unit="m\^2\_/ms\^2\_" | grey color=c mean=y scalebar=y barreverse=y')

Result('awicurve','graph wanttitle=n plotfat=10')

End()