#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sucddecon       = os.path.join(CWPROOT,'bin/sucddecon')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
sustack         = os.path.join(CWPROOT,'bin/sustack')
suop            = os.path.join(CWPROOT,'bin/suop')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sumax           = os.path.join(CWPROOT,'bin/sumax')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suflip          = os.path.join(CWPROOT,'bin/suflip')
sutxtaper       = os.path.join(CWPROOT,'bin/sutxtaper')
sumute          = os.path.join(CWPROOT,'bin/sumute')
a2b             = os.path.join(CWPROOT,'bin/a2b')
#if os.getenv('IWAVE'): # local version 
MYAPPS          = os.getenv('MYAPPS')
towed_array     = os.path.join(MYAPPS,'trip/iwave/trace/main/towed_array.x')
acd             = os.path.join(MYAPPS,'trip/iwave/acd/main/sim.x')
acdcgne         = os.path.join(MYAPPS,'trip/iwave/acd/main/cg.x')
#else: # Madagascar version
#    towed_array     = 'towed_array'
#    acd             = 'acd'
#    acdcgne         = 'acdcgne'
#    acdcheb         = 'acdcheb'
#    acdlbfgs        = 'acdlbfgs'
#    acdiva          = 'acdiva'
#    acdadjtest      = 'acdadjtest'

Flow('wavelet_base.su', None, suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=251 dt=0.004 | ' + sufilter + ' f=2,5,15,20 | ' + sushw + ' key=delrt a=-1000 ', stdin=0)

#Flow('waveletlo_base.su', None, suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=251 dt=0.004 | ' + sufilter + ' f=1,2.5,7.5,10 | ' + sushw + ' key=delrt a=-1000 ', stdin=0)

Flow('waveletlo_base.su', None, suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=251 dt=0.004 | ' + sufilter + ' f=0.5,1.25,3.75,5 | ' + sushw + ' key=delrt a=-1000 ', stdin=0)

Flow('delta.su',None, suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=250 dt=0.004 | ' + sushw + ' key=delrt a=-1000 ', stdin=0)

Flow('deltafrac.su',None,suspike + ' nt=501 ntr=1 offset=0 ix1=1 nspk=1 it1=250 dt=0.004 | ' + sushw + ' key=delrt a=-1000 |' + sufrac + ' power=-0.5 phasefac=0.0 verbose=1', stdin=0)

Flow('6kmlong.su',None,
     sunull + ' nt=750 ntr=101 dt=0.004 | ' + 
     sushw + ' key=sx a=5100 c=0 j=101 | ' + 
     sushw + ' key=sy a=0 c=0 j=101 | ' + 
     sushw + ' key=gx a=4000 b=30 j=101 | ' + 
     sushw + ' key=gy a=0 b=0 j=101 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=gelev a=-3000 | ' + 
     sushw + ' key=selev a=-10 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 ',
     stdin=0)

Flow('6km.su',None,
     sunull + ' nt=500 ntr=101 dt=0.004 | ' + 
     sushw + ' key=sx a=5100 c=0 j=101 | ' + 
     sushw + ' key=sy a=0 c=0 j=101 | ' + 
     sushw + ' key=gx a=4000 b=30 j=101 | ' + 
     sushw + ' key=gy a=0 b=0 j=101 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=gelev a=-3000 | ' + 
     sushw + ' key=selev a=-10 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 ',
     stdin=0)

Flow('wavelet_6km.su', ['wavelet_base.su', '6km.su'],
     towed_array + 
     '''
     data=${SOURCES[1]} 
     src=${SOURCES[0]} 
     towed=${TARGETS[0]}
     ''',
     stdin=0, stdout=0)

Flow('delta_6km.su', ['delta.su', '6km.su'],
     towed_array + 
     '''
     data=${SOURCES[1]} 
     src=${SOURCES[0]} 
     towed=${TARGETS[0]}
     ''',
     stdin=0, stdout=0)

Flow('deltafrac_6km.su', ['deltafrac.su', '6km.su'],
     towed_array + 
     '''
     data=${SOURCES[1]} 
     src=${SOURCES[0]} 
     towed=${TARGETS[0]}
     ''',
     stdin=0, stdout=0)

Flow('chom',None,'makevel n1=500 d1=10 n2=1000 d2=10 o1=0 o2=0 v000=2.0')
Flow('csqhom.rsf','chom','mul ${SOURCES[0]} | put  data_type=csq '); 
for vlens in range(0,11):
    Flow('csqlens' + str(vlens) + '.rsf', None,'makevel n1=500 d1=10 n2=1000 d2=10 o1=0 o2=0 v000=4.0 dlens=500 tlens=1000 vlens=-' + str(vlens*0.2) + ' x1lens=1500 x2lens=5000 | put data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m^2/ms^2 esize=4',stdin=0) 

Flow('velbigdv',None,'makevel n1=450 d1=10 n2=1000 d2=10 o1=500 o2=0 v000=-0.1 dvdx1=0.0002 | put data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m^2/ms^2 esize=4',stdin=0)
Flow('velbigdvpad','velbigdv','pad beg1=50')
Flow('velbig',['velbigdvpad','chom'],'add ${SOURCES[1]}')
Flow('csqbig',['velbig'],'mul ${SOURCES[0]}')

oneshot = '''
/bin/cp ${SOURCES[2]} $TARGET && %s 
deriv=0 adjoint=0 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
csq=${SOURCES[1]} source=${SOURCES[0]} data=$TARGET 
''' % acd

# simulation - one shot, hom, delta
Flow('green6kmhom.su',['delta_6km.su','csqhom.rsf','6km.su'],
     oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')

# simulation - one shot, hom, delta
Flow('green6kmhomlong.su',['delta_6km.su','csqhom.rsf','6kmlong.su'],
     oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')

# simulation - one shot, hom, delta
Flow('green6kmhom.su',['delta_6km.su','csqhom.rsf','6km.su'],
     oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')

# simulation - one shot, hom, delta
Flow('green6kmhomlong.su',['delta_6km.su','csqhom.rsf','6kmlong.su'],
     oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')
Flow('green6kmhomlongsymm.su','green6kmhomlong.su',
     suflip + ' flip=3 | ' + sushw + ' key=delrt a=-3000 | ' + suwind + ' tmax=3 | ' + suflip + ' flip=3')

# simulation - one shot, hom, delta
Flow('green6kmbiglong.su',['delta_6km.su','csqbig.rsf','6kmlong.su'],
     oneshot,stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')
     
# simulation - one shot, hom
Flow('shot6kmhom.su',['wavelet_6km.su','csqhom.rsf','6km.su'],
     oneshot,stdin=0,stdout=-1, workdir='$TARGET.work')

# simulation - one shot, big
Flow('shot6kmbig.su',['wavelet_6km.su','csqbig.rsf','6km.su'],
     oneshot,stdin=0,stdout=-1, workdir='$TARGET.work')

# simulation - symmetrized
Flow('shot6kmbigsymm.su','shot6kmbig.su',
     suflip + ' flip=3 | ' + sushw + ' key=delrt a=-2000 | ' + suwind + ' tmax=3 | ' + suflip + ' flip=3')     

# residual at hom data = big
Flow('res6kmbighom.su',['shot6kmbig.su','shot6kmhom.su'], suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff ', stdin=0)


# FWI gradient 
Flow('fwigrad6kmbighom',['wavelet_6km.su','csqhom.rsf','res6kmbighom.su'],
     '''add < ${SOURCES[1]} > $TARGET && %s 
     deriv=1 adjoint=1 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=10
     csq=${SOURCES[1]} source=${SOURCES[0]} data=${SOURCES[2]} csq_b1=$TARGET 
     ''' % acd,
     stdin=0,stdout=-1, workdir='$TARGET.work')

# FWI gradient tapered data
Flow('res6kmbighomtap.su','res6kmbighom.su',
     sutxtaper + ' key=tr tr1=20 ')
      
Flow('fwigrad6kmbighomtap',['wavelet_6km.su','csqhom.rsf','res6kmbighomtap.su'],
     '''add < ${SOURCES[1]} > $TARGET && %s 
     deriv=1 adjoint=1 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=10
     csq=${SOURCES[1]} source=${SOURCES[0]} data=${SOURCES[2]} csq_b1=$TARGET 
     ''' % acd,
     stdin=0,stdout=-1, workdir='$TARGET.work')

# FWI objective scan
for i in range(11):
    Flow('csq'+str(i),['csqhom','csqbig'],'add ${SOURCES[0]} ${SOURCES[1]} scale=' + str(i*0.1) + ',' + str((10-i)*0.1) + ' > $TARGET',stdin=0,stdout=-1)
    Flow('shot'+str(i)+'.su',['wavelet_6km.su','csq'+str(i),'6km.su'],
	 oneshot,stdin=0,stdout=-1, workdir='$TARGET.work')
    Flow('res'+str(i)+'.su',['shot'+str(i)+'.su','shot6kmbig.su'],
	 suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff > ${TARGET}',
	 stdin=0,stdout=-1) 
    Flow('res'+str(i),'res'+str(i)+'.su','suread read=data endian=0')
    Flow('l2res'+str(i)+'.txt','res'+str(i),'attr | grep \'2-norm\' | sed s/\'2-norm   =\'//')
Flow('vl2res0.txt', 'l2res0.txt', '/bin/cp ${SOURCE} ${TARGET}', stdin=0, stdout=-1)
for i in range(1,10):
    Flow('vl2res'+str(i)+'.txt',['vl2res'+str(i-1)+'.txt','l2res'+str(i)+'.txt'],'/bin/cp ${SOURCES[0]} ${TARGET}; /bin/cat ${SOURCES[1]} >> ${TARGET}', stdin=0, stdout=-1)
Flow('vl2res10.txt', ['vl2res9.txt','l2res10.txt'], '/bin/cp ${SOURCE} ${TARGET}; /bin/cat  ${SOURCES[1]}>>${TARGET}',stdin=0, stdout=-1)
Flow('vl2res10', 'vl2res10.txt','/bin/echo n1=11 d1=0.1 o1=0.0 data_format="ascii_float" in="vl2res10.txt" >> ${TARGET}',stdin=0)
Flow('fvl2res10','vl2res10','dd form=native type=float')
Flow('fwiscan','fvl2res10','add mode=p ${SOURCE}')

# FWI objective scan - low freq wavelet
for i in range(11):
    Flow('shotlo'+str(i)+'.su',['green'+str(i)+'.su','waveletlo_base.su'],
         suconv + ' sufile=${SOURCES[1]} < ${SOURCES[0]} | ' +
         suwind + ' tmin=0 tmax=2 > ${TARGETS[0]}',
         stdin=0, stdout=-1)
for i in range(11):	 
    Flow('reslo'+str(i)+'.su',['shotlo'+str(i)+'.su','shotlo0.su'],
	 suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff > ${TARGET}',
	 stdin=0,stdout=-1) 
    Flow('reslo'+str(i),'reslo'+str(i)+'.su','suread read=data endian=0')
    Flow('l2reslo'+str(i)+'.txt','reslo'+str(i),'attr | grep \'2-norm\' | sed s/\'2-norm   =\'//')
Flow('vl2reslo0.txt', 'l2reslo0.txt', '/bin/cp ${SOURCE} ${TARGET}', stdin=0, stdout=-1)
for i in range(1,10):
    Flow('vl2reslo'+str(i)+'.txt',['vl2reslo'+str(i-1)+'.txt','l2reslo'+str(i)+'.txt'],'/bin/cp ${SOURCES[0]} ${TARGET}; /bin/cat ${SOURCES[1]} >> ${TARGET}', stdin=0, stdout=-1)
Flow('vl2reslo10.txt', ['vl2reslo9.txt','l2reslo10.txt'], '/bin/cp ${SOURCE} ${TARGET}; /bin/cat  ${SOURCES[1]}>>${TARGET}',stdin=0, stdout=-1)
Flow('vl2reslo10.rsf', 'vl2reslo10.txt','/bin/echo n1=11 d1=0.1 o1=0.0 data_format="ascii_float" in="vl2reslo10.txt" >> ${TARGET}',stdin=0)
Flow('fvl2reslo10.rsf','vl2reslo10.rsf','dd form=native type=float')
Flow('fwiscanlo.rsf','fvl2reslo10.rsf','add mode=p ${SOURCE}')

     

# decon hom
Flow('shot6kmhom_sdecon.su',['shot6kmhom.su','green6kmhom.su'],
     suwind + ' tmax=6.0  < ${SOURCES[0]} | ' + 
     sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 | ' +
     suwind +' tmin=1 tmax=2 | ' + sushw + ' key=delrt a=-500 > ${TARGETS[0]}',
     stdin=0, stdout=-1)

Flow('shot6kmbig_decon.su',['shot6kmbig.su','green6kmhomlong.su'],
     suwind + ' tmax=6.0  < ${SOURCES[0]} | ' + 
     sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 | ' +
     suwind +' tmin=1 tmax=2 | ' + sushw + ' key=delrt a=-500 > ${TARGETS[0]}',
     stdin=0, stdout=-1)

Flow('shot6kmbig_bigdecon.su',['shot6kmbig.su','green6kmbiglong.su'],
     suwind + ' tmax=6.0  < ${SOURCES[0]} | ' + 
     sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 | ' +
     suwind +' tmin=1 tmax=2 | ' + sushw + ' key=delrt a=-500 > ${TARGETS[0]}',
     stdin=0, stdout=-1)

Flow('shot6kmbigsymm_decon.su',['shot6kmbigsymm.su','green6kmhomlongsymm.su'],
      sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 < ${SOURCES[0]} > $TARGET',
      stdin=0,stdout=-1)

Flow('shot6kmbig_conv.su',['green6kmhom.su','shot6kmbig_decon.su'],
     suconv + ' panel=1 sufile=${SOURCES[1]} < ${SOURCES[0]} > ${TARGETS[0]}',
     stdin=0, stdout=-1)

Flow('shot6kmbig_decon_tscale2.su','shot6kmbig_decon.su',sugain + ' tpow=2| ' + suwind + ' tmax=2')

Flow('shot6kmbig_decon_tscale2_tr.su','shot6kmbig_decon_tscale2.su', suflip + ' flip=3 | ' + sushw + ' key=delrt a=-2000| ' + suwind + ' tmax=2.0')

Flow('shot6kmbig_decon_tscale2_tr_decon.su',['shot6kmbig_decon_tscale2_tr.su','green6kmhomlong.su'],
     sucddecon + ' < ${SOURCES[0]} sufile=${SOURCES[1]} panel=1 pnoise=0.00001', stdin=0)

Flow('shot6kmbig_decon_tscale2_tr_decon_tr.su','shot6kmbig_decon_tscale2_tr_decon.su',
     suflip + ' flip=3 | ' + sushw + ' key=delrt a=-500 | ' +
     suwind + ' tmin=0 tmax=2')

Flow('shot6kmbig_decon_tscale2_tr_decon_conv.su',['shot6kmbig_decon.su','shot6kmbig_decon_tscale2_tr_decon.su'],
     suconv + ' panel=1 sufile=${SOURCES[0]} < ${SOURCES[1]}', stdin=0)

Flow('shot6kmbig_decon_tscale2_tr_decon_conv_tr.su','shot6kmbig_decon_tscale2_tr_decon_conv.su',
     suflip + ' flip=3 | ' + sushw + ' key=delrt a=-1000 | ' +
     suwind + ' tmin=0 tmax=2')

# IVA gradient 
Flow(['ivagrad6kmbighom','ivagrad6kmbighomneg'],['delta_6km.su','csqhom.rsf','shot6kmbig_decon_tscale2_tr_decon_conv_tr.su'],
     'add < ${SOURCES[1]} > ${TARGETS[1]} && ' +
     acd + ' ' +
     '''
     deriv=1 adjoint=1 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=10
     csq=${SOURCES[1]} source=${SOURCES[0]} data=${SOURCES[2]} 
     csq_b1=${TARGETS[1]} 
     && 
     add < ${TARGETS[1]} > ${TARGETS[0]} scale=-1
     ''',
     stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')

# IVA objective scan
for i in range(11):
    Flow('green'+str(i)+'.su',
        ['delta_6km.su','csq'+str(i)+'.rsf','6kmlong.su'],
	oneshot,
	stdin=0,stdout=-1, workdir='${TARGETS[0]}.work')
    Flow('green'+str(i)+'m.su','green'+str(i)+'.su',
        sumute + ' key=gx xmute=4000,7000 tmute=2.5,2.5 ntaper=100 mode=1')
    Flow('shot6kmbig_decon_' + str(i) + '.su',
        ['shot6kmbig.su','green'+str(i)+'m.su'],
        suwind + ' tmax=6.0  < ${SOURCES[0]} | ' +
        sucddecon + ' sufile=${SOURCES[1]} panel=1 pnoise=0.00001 | ' +
        suwind +' tmin=1 tmax=2 | ' +
	sushw + ' key=delrt a=-500 > ${TARGETS[0]}',
        stdin=0, stdout=-1)
    Flow('shot6kmbig_decon_'+str(i)+'_tscale.su',
         'shot6kmbig_decon_'+str(i)+'.su',
	 sugain + ' tpow=1| ' + suwind + ' tmax=2')
    Flow('shot6kmbig_decon_'+str(i)+'_tscale',
         'shot6kmbig_decon_'+str(i)+'_tscale.su',
	 'suread read=data endian=0')
    Flow('ivaval'+str(i)+'.txt','shot6kmbig_decon_'+str(i)+'_tscale','attr | grep \'2-norm\' | sed s/\'2-norm   =\'//')
Flow('viva0.txt', 'ivaval0.txt', '/bin/cp ${SOURCE} ${TARGET}', stdin=0, stdout=-1)
for i in range(1,10):
    Flow('viva'+str(i)+'.txt',['viva'+str(i-1)+'.txt','ivaval'+str(i)+'.txt'],'/bin/cp ${SOURCES[0]} ${TARGET}; /bin/cat ${SOURCES[1]} >> ${TARGET}', stdin=0, stdout=-1)
Flow('viva10.txt', ['viva9.txt','ivaval10.txt'], '/bin/cp ${SOURCE} ${TARGET}; /bin/cat  ${SOURCES[1]}>>${TARGET}',stdin=0, stdout=-1)
Flow('viva10.rsf', 'viva10.txt','/bin/echo n1=11 d1=0.1 o1=0.0 data_format="ascii_float" in="viva10.txt" >> ${TARGET}',stdin=0)
Flow('fiva10.rsf','viva10.rsf','dd form=native type=float')
Flow('ivascan.rsf','fiva10.rsf','add mode=p ${SOURCE}')

fwiarr=['fwi0']
fwilist=['fwi0.rsf']
for i in range(1,101):
    fwilist = fwilist + [fwilist[i-1]+' fwi'+str(i)+'.rsf']
    fwiarr = fwiarr + ['fwi'+str(i)]

Flow('fwi0','fwigrad6kmbighom','sfrotate rot2=-300')	
for i in range(1,101):
    Flow('fwi'+str(i),'fwi'+str(i-1),'rotate rot2=6')

Flow('fwishots',fwiarr,'cat axis=3 d=60 o=2100 <' + fwilist[100],stdin=0)
Flow('fwistack','fwishots','stack axis=3 norm=n')

ivaarr=['iva0']
ivalist=['iva0.rsf']
for i in range(1,101):
    ivalist = ivalist + [ivalist[i-1]+' iva'+str(i)+'.rsf']
    ivaarr = ivaarr + ['iva'+str(i)]

Flow('iva0','ivagrad6kmbighom','sfrotate rot2=-300')	
for i in range(1,101):
    Flow('iva'+str(i),'iva'+str(i-1),'rotate rot2=6')

Flow('ivashots',ivaarr,'cat axis=3 d=60 o=2100 <' + ivalist[100],stdin=0)
Flow('ivastack','ivashots','stack axis=3 norm=n')

Result('shot6kmhom','shot6kmhom.su','suread endian=0 read=data | put label1=Time label2=Trace unit1=s unit="GPa" | window min1=1.2 max1=1.8 | grey mean=y wanttitle=n')

Result('shot6kmbig','shot6kmbig.su','suread endian=0 read=data | put label1=Time label2=Trace unit1=s unit="GPa" | window min1=1.2 max1=1.8 | grey mean=y wanttitle=n')

Result('shot6kmbig_decon','shot6kmbig_decon.su','suread endian=0 read=data | put label1=Time label2=Trace unit1=s unit="GPa" | grey mean=y wanttitle=n')

Result('shot6kmbig_bigdecon','shot6kmbig_bigdecon.su','suread endian=0 read=data | put label1=Time label2=Trace unit1=s unit="GPa" | grey mean=y wanttitle=n')

Result('chom', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p" unit="m/ms" | grey minval=1.5 maxval=4 color=j mean=y scalebar=y barreverse=y wanttitle=n')

Result('velbig', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p" unit="m/ms" | grey minval=1.5 maxval=4 color=j mean=y scalebar=y barreverse=y wanttitle=n')

Result('fwigrad6kmbighom','put label1=Depth unit1=m label2=Distance unit2=m label="V\_p" unit="m/ms" | add scale=1.e+6 | clip clip=0.001 | grey color=j mean=y scalebar=y barreverse=y obarnum=0.0 wanttitle=n')

Result('fwigrad6kmbighomtap','put label1=Depth unit1=m label2=Distance unit2=m label="V\_p" unit="m/ms" | add scale=1.e+6 | grey color=j mean=y scalebar=y barreverse=y wanttitle=n')

Result('ivagrad6kmbighom','put label1=Depth unit1=m label2=Distance unit2=m label="V\_p" unit="m/ms" | grey color=j mean=y scalebar=y barreverse=y  clip=1000 minval=-1000 maxval=1000 wanttitle=n')

Result('fwistack','put label1=Depth unit1=m label2=Distance unit2=m label="V\_p" unit="m/ms" | add scale=1.e+6 | clip clip=5.e-3 | grey color=j mean=y scalebar=y barreverse=y obarnum=0.0 wanttitle=n')

Result('ivastack','put label1=Depth unit1=m label2=Distance unit2=m label="V\_p" unit="m/ms" | grey color=j mean=y scalebar=y barreverse=y clip=25000 minval=-25000 maxval=25000 wanttitle=n')

Result('fwiscan','put label1="h" label2="MS_Error" | graph plotfat=4 wanttitle=n')

Result('ivascan','put label1="h" label2="Annihilator Energy" | graph plotfat=4 wanttitle=n')

Result('fwiscanlo','put label1="h" label2="MS_Error" | graph plotfat=4 wanttitle=n')

for i in range(11):
    Result('res'+str(i),'window min1=1.2 max1=1.8 | grey clip=0.0006 title="residual at '+str(1.0-0.1*i)+'*v + ' + str(0.1*i) + '*v0"')
    Result('shot6kmbigdecon'+str(i)+'tscale','shot6kmbig_decon_'+str(i)+'_tscale','window min1=-0.5 max1=0.5 | grey clip=20.0 title="velo = '+str(1.0-0.1*i)+'*v + ' + str(0.1*i) + '*v0"')

Result('waveletbase','wavelet_base.su','suread endian=0 read=data | put label1=Time unit1=s unit="GPa" | graph wanttitle=n')


End()
