from rsf.proj import *
import os

################################# DEFNS ##################################
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sucddecon       = os.path.join(CWPROOT,'bin/sucddecon')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
sustack         = os.path.join(CWPROOT,'bin/sustack')
suop            = os.path.join(CWPROOT,'bin/suop')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sumax           = os.path.join(CWPROOT,'bin/sumax')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suflip          = os.path.join(CWPROOT,'bin/suflip')
sutxtaper       = os.path.join(CWPROOT,'bin/sutxtaper')
a2b             = os.path.join(CWPROOT,'bin/a2b')
suresamp        = os.path.join(CWPROOT,'bin/suresamp')
suamp           = os.path.join(CWPROOT,'bin/suamp')
sufft           = os.path.join(CWPROOT,'bin/sufft')
sushift         = os.path.join(CWPROOT,'bin/sushift')
suflip          = os.path.join(CWPROOT,'bin/suflip')
MYAPPS          = os.getenv('MYAPPS')
sim             = os.path.join(MYAPPS,'trip/iwave/asg/main/sim.x')
green1          = os.path.join(MYAPPS,'trip/iwave/asg/main/green2dt1.x')
green2          = os.path.join(MYAPPS,'trip/iwave/asg/main/green2dt2.x')
deriv           = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYDeriv.x')
conv            = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYCGDecon.x')
taper           = os.path.join(MYAPPS,'trip/iwave/trace/main/taper.x')
dot             = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYDot.x')
norm            = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYNorm.x')
timerev         = os.path.join(MYAPPS,'trip/iwave/trace/main/timerev.x')
#######################################################################

# dummy target
Flow('cout0.txt',None,'/usr/bin/touch $TARGET')

### parameters - three discretization levels

BULK = 4.0
BUOY = 1.0
DX   = [20,10,5]
DT   = [0.008,0.004,0.002]
NX   = [401,801,1601]
NZ   = [201,401,801]
NT   = [626,1251,2501]
NTS  = [251,501,1001]
F1   = [1,1,1]
F2   = [2.5,2.5,2.5]
F3   = [7.5,7.5,7.5]
F4   = [12.5,12.5,12.5]
DF   = 0.248
RZ   = -1000
SZ   = -3000
RX   =  4000
SX   =  3500
TMIN = 1.0
TMAX = 3.0

################ discretization loop

for i in range(0,3):
#for i in [0]:

### point source at z=3000, x=3500 

    Flow('ptsrc'+str(i)+'.su', None, suspike +
         ' nt=' + str(NT[i]) + ' ntr=1 offset=0 ix1=1 nspk=1 it1=' + str((NTS[i]+1)/2) + ' dt=' + str(DT[i]) + ' | ' +
         sufilter + ' f=' +
         str(F1[i]) + ',' + str(F2[i]) + ',' +
         str(F3[i]) + ',' + str(F4[i]) + ' | ' +
         sugain + ' scale=' + str(1.0/(DT[i]*1000)) + ' | ' + 
         sushw + ' key=delrt,gelev,selev,sx,gx' +
         ' a=0,' + str(SZ) + ',' + str(SZ) + ',' + str(SX) + ',' + str(SX) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',
	 stdin=0)

### delta at t=0

    Flow('spike'+str(i)+'.su', None, suspike +
         ' nt=' + str(NT[i]) + ' ntr=1 offset=0 ix1=1' +
	 ' nspk=1 it1=' + str((NTS[i]+1)/2) + ' dt=' + str(DT[i]) + ' | ' +
         sugain + ' scale=' + str(1.0/(DT[i]*1000.0)) + ' | ' + 
         sushw + ' key=delrt,gelev,selev,sx,gx' +
         ' a=' + str(-1000.0*DT[i]*(NTS[i]-1)/2) + ',' + str(SZ) + ',' + str(SZ) + ',' + str(SX) + ',' + str(SX) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',
	 stdin=0)
	 
### point receiver at z=1000, x=4000

    Flow('ptrec'+str(i)+'.su', None, sunull + ' nt=' + str(NT[i]) +
         ' ntr=1 dt=' + str(DT[i]) + ' | ' + 
         sushw + ' key=delrt,gelev,selev,sx,gx' +
         ' a=0,' + str(RZ) + ',' + str(SZ) + ',' + str(SX) + ',' + str(RX) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',
         stdin=0)
	 
### create bulk modulus and buoyancy files

    NXL=NX[i]
    NZL=NZ[i]
    DXL=DX[i]
    DTL=DT[i]

# homog bulk
    Flow('bmh'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BULK) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0)

# homog buoy
    Flow('byh'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Buoyancy unit=cc/g' +
         ' v000=' + str(BUOY) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0) 

# FD simulation

    Flow(['fdtrp' + str(i) + '.su'],
         ['bmh' + str(i),
          'byh' + str(i),
          'ptsrc' + str(i) + '.su',
          'ptrec' + str(i) + '.su'],
          '/bin/cp ${SOURCES[3]} ${TARGETS[0]}; ' +
          sim + 
          '''
          bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
          source_p=${SOURCES[2]} data_p=${TARGETS[0]}
          deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
          dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
          dump_lda=1 dump_ldc=1 dump_term=1 sampord=1
          ''', stdin=0, stdout=-1)

# Green's function

    Flow(['grtrp' + str(i) + '.su',
          'grtrpt1' + str(i) + '.su',
	  'grtrpt2' + str(i) + '.su',
          'grfcnpt1' + str(i) + '.su',
	  'grfcnpt2' + str(i) + '.su'],
         ['ptsrc' + str(i) + '.su',
          'ptrec' + str(i) + '.su'],
	 '/bin/cp ${SOURCES[1]} ${TARGETS[0]} && ' +
	 '/bin/cp ${SOURCES[1]} ${TARGETS[1]} && ' +
	 '/bin/cp ${SOURCES[1]} ${TARGETS[2]} && ' +
	 '/bin/cp ${SOURCES[1]} ${TARGETS[3]} && ' +
	 '/bin/cp ${SOURCES[1]} ${TARGETS[4]} && ' +
	 green1 + ' bulk=' + str(BULK) + ' buoy=' + str(BUOY) + ' out=${TARGETS[3]} && ' +
	 green2 + ' bulk=' + str(BULK) + ' buoy=' + str(BUOY) + ' out=${TARGETS[4]} && ' +
	 conv + ' soln=${TARGETS[3]} data=${TARGETS[1]} kernel=${SOURCES[0]} mode=fwd && ' +
 	 conv + ' soln=${TARGETS[4]} data=${TARGETS[2]} kernel=${SOURCES[0]} mode=fwd && ' +
	 deriv + ' in=${TARGETS[1]} order=2 && ' +
	 deriv + ' in=${TARGETS[2]} order=1 && ' +
	 suop2 + ' ${TARGETS[1]} ${TARGETS[2]} op=sum > ${TARGETS[0]}',
	 stdin=0, stdout=-1)

# compare

    Flow(['difftrp' + str(i) + '.su', 'diffnorm' + str(i) + '.txt'],
         ['grtrp' + str(i) + '.su', 'fdtrp' + str(i) + '.su'],
	 suop2 + ' ${SOURCES[1]} ${SOURCES[0]} op=diff > ${TARGETS[0]} && ' +
	 norm + ' in=${TARGETS[0]} > ${TARGETS[1]}',
	 stdin=0, stdout=-1)
	 
# plots

    Flow(['fdtrp' + str(i) + '.rsf',
          'grtrp' + str(i) + '.rsf',
	  'difftrp' + str(i) + '.rsf'],
         ['fdtrp' + str(i) + '.su',
          'grtrp' + str(i) + '.su',
	  'difftrp' + str(i) + '.su'],
         'suread read=data endian=0 < ${SOURCES[0]} > ${TARGETS[0]} && ' +	  
         'suread read=data endian=0 < ${SOURCES[1]} > ${TARGETS[1]} && ' +	  	  
         'suread read=data endian=0 < ${SOURCES[2]} > ${TARGETS[2]}',
	 stdin=0,stdout=-1)

    Result('plot' + str(i),
         ['fdtrp' + str(i),
          'grtrp' + str(i),
	  'difftrp' + str(i)],
         'cat axis=2 ${SOURCES[1:3]} | window min1=1.0 max1=3.0 | ' + 
         'graph plotcol=5,6,7 plotfat=4,4,4 wanttitle=n label1=t unit1=s label2=Pressure unit2=GPa')

    Flow('ptsrc' + str(i) + '.rsf',
         'ptsrc' + str(i) + '.su',
	 'suread read=data endian=0 | window min1=0.0 max1=2.0')

    Result('ptsrc' + str(i),
           'graph plotcol=5 plotfat=4 wanttitle=n label1=t unit1=s label2=Pressure unit2=GPa')

End()