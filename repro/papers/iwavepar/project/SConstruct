#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from trip.proj import getThreads
from trip.prog import run

import os
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################
######################## LOCAL DEFINITIONS ##################################



# local parallel parameters
lenv = {'stampede2' : { 'nodes'    : 1,
                        'ppn'      : 60,
                        'wall'     : '00:30:00'
                      },
         'davinci' :  { 'nodes'    : 2,
                       	'ppn'      : 16,
                        'wall'     : '00:30:00'
                      },
         'macbook' :  { 'ppn'      : 2},
	 'getafix' :  { 'ppn'      : 10},
	 }

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations. Note that Madagascar commands do not 
######## require abbreviations 
# Example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
suspike         = os.path.join(CWPROOT,'bin/suspike')
MYAPPS          = os.getenv('MYAPPS')
acd             = os.path.join(MYAPPS,'trip/iwave/acd/main/sim.x')

######### fetch list - non-reproducible data fetched from web archive.
# the format for this dictionary is 
#    filename : [<subdir of "data" directory in archive>, <archive URL>]
# Example: 
# fetches = {
#            'line_fix.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
#            'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu'],	
#           }
fetches = {}

######### non-IWAVE flows - include these in standard Madagascar form
# sunull writes to stdout but does not read from stdin, so set
# stdin=0
Flow('hdrcoarse.su', None,
     sunull + ' nt=131 ntr=10 dt=0.04 | ' + 
     sushw + ' key=sx a=12000 c=0 j=400 | ' + 
     sushw + ' key=gx a=5000 b=200 j=400 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=selev a=-2000 | ' + 
     sushw + ' key=gelev a=-200 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 > ${TARGETS[0]} ',
     stdin=0)

Flow('hdr12000.su', None,
     sunull + ' nt=651 ntr=400 dt=0.008 | ' + 
     sushw + ' key=sx a=8000 c=500 j=400 | ' + 
     sushw + ' key=gx a=5000 b=25 j=400 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=selev a=-1875 | ' + 
     sushw + ' key=gelev a=-6 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 > ${TARGETS[0]} ',
     stdin=0)

Flow('hdr8-12km.su', None,
     sunull + ' nt=651 ntr=3600 dt=0.008 | ' + 
     sushw + ' key=sx a=8000 c=500 j=400 | ' + 
     sushw + ' key=gx a=5000 b=25 j=400 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=selev a=-1875 | ' + 
     sushw + ' key=gelev a=-6 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 > ${TARGETS[0]} ',
     stdin=0)

# note: if a filename does not have an embedded ".", it's presumed to
# be the root filename of an rsf.  stdmdl does not read data from
# stdin or write data to stdout (it writes verbose comments and
# warnings, but that's not data) so set both stdin and stdout=0

# grid parameters - fine
N1  = 416
D1  = 25
N2  = 800
D2  = 25

# grid parameters - coarse
#N1  = 52
#D1  = 200
#N2  = 100
#D2  = 200
       
Flow('vel4layer',None,
      '''
      standardmodel
      choose=2 model=10 
      m2_numl=4 m2_val1=1.500 
      m2_rf1=1875 m2_val2=2.0 
      m2_rf2=3600 m2_val3=2.5 
      m2_rf3=6000 m2_val4=3.0 
      hfile=vel4layer.rsf
      ''' + 
      ' n1=' + str(N1) + ' d1=' + str(D1) + ' f1=0' +
      ' n2=' + str(N2) + ' d2=' + str(D2) + ' f2=0' +
      ' o2=0 n3=1 d3=1 o3=0',
      stdin=0, stdout=-1)

# sfadd writes output to stdout, so it must be left active - 
# however there is not pipe input to this command, so stdin=0
Flow('csq4layer','vel4layer',
     'sfadd mode=p ${SOURCES[0]} ${SOURCES[0]} | sfput data_type=csq ', stdin=0)

# smooth csq4layer to make migration velocity model
Flow('csq4layersm','csq4layer','smooth rect1=50 rect2=50 repeat=4')
Flow('csq4layersm2','csq4layer','smooth rect1=5 rect2=5 repeat=4')
Flow('dcsq4layer', ['csq4layer', 'csq4layersm2'],
     'add mode=a scale=1,-1 < csq4layer.rsf csq4layersm2.rsf') 

# create base wavelet (just time series, without source position
# information) via suwaveform
Flow('waveletbase.su','',
     suwaveform + ' type=gaussd fpeak=5 ns=101 | ' + 
     sushw + ' key=delrt  a=-100 > ${TARGETS[0]} ',
     stdin=0)

#Flow('waveletbase.su', None, suspike + ' nt=11 ntr=1 nspk=1 it1=1 ix1=1 offset=0 dt=0.008', stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

# use naming convention: time series stored in waveletbase, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['12000', '8-12km']:
    Flow('wavelet' + foo + '.su', ['waveletbase.su', 'hdr' + foo + '.su'],
         '''
         towed_array 	 
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)



#### debugging flags
#		 ' dump_lda=1 dump_ldc=1 dump_term=1 printact=6 dump_lds=1 dump_ldr=1 dump_pi=1', 

jobs = []

for NP1 in [1,2]:
    for NP2 in [1,2]: 
        jobs = jobs +    [{ 'job': 'shot' + str(NP1) + str(NP2),
                            'pre': '/bin/cp ${SOURCES[0]} ${TARGETS[0]}' ,
			    'cmd': acd  + 
                 	    ' deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=5.0 ' + 
                 	    ' csq=${SOURCES[2]} source=${SOURCES[1]} ' +
                 	    ' data=${TARGETS[0]} sampord=1 ' +
			    ' dump_lda=1 dump_ldc=1 dump_ldr=1 dump_lds=1 dump_pi=1 ' +
                 	    ' mpi_np1=' + str(NP1) + ' mpi_np2=' + str(NP2),
          		    'src': ['hdr12000.su', 'wavelet12000.su', 'csq4layer.rsf'],
	  		    'tgt': ['shot' + str(NP1) + str(NP2) + '.su'],
          		    'exe' : {'platf': 'mpi', 'ppn'   : str(NP1*NP2) }	 
        		  },
			  { 'job': 'born' + str(NP1) + str(NP2),
                            'pre': '/bin/cp ${SOURCES[0]} ${TARGETS[0]}' ,
			    'cmd': acd  + 
                 	    ' deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=5.0 ' + 
                 	    ' csq=${SOURCES[2]} source=${SOURCES[1]} + csq_d1=${SOURCES[3]}' +
                 	    ' data=${TARGETS[0]} sampord=1 ' +
                 	    ' mpi_np1=' + str(NP1) + ' mpi_np2=' + str(NP2),
          		    'src': ['hdr12000.su', 'wavelet12000.su', 'csq4layersm.rsf', 'dcsq4layer.rsf'],
	  		    'tgt': ['born' + str(NP1) + str(NP2) + '.su'],
          		    'exe' : {'platf': 'mpi', 'ppn'   : str(NP1*NP2) }	 
			  },
			  { 'job': 'rtm' + str(NP1) + str(NP2),
          		    'pre': 'sfcp ${SOURCES[2]} ${TARGETS[0]}',
			    'cmd': acd  + 
                 	    ' deriv=1 adjoint=1 nsnaps=10 order=1 cfl=0.5 cmin=1.0 cmax=5.0 ' + 
                 	    ' csq=${SOURCES[2]} source=${SOURCES[1]} csq_b1=${TARGETS[0]}' +
                 	    ' data=${SOURCES[3]} sampord=1 ' +
                 	    ' mpi_np1=' + str(NP1) + ' mpi_np2=' + str(NP2),
          		    'src': ['hdr12000.su', 'wavelet12000.su', 'csq4layersm.rsf', 'born'+str(NP1)+str(NP2)+'.su'],
	  		    'tgt': ['rtm' + str(NP1) + str(NP2) + '.rsf'],
          		    'exe' : {'platf': 'mpi', 'ppn'   : str(NP1*NP2) }	 
			  },
			]

# dom decomp option
PNP1=1
PNP2=2# batch options
print lenv
print 'partask=' + str(getThreads(lenv))

jobs = jobs + [{ 'job': 'shot8-12kmser',
	      	 'pre': '/bin/cp ${SOURCES[0]} ${TARGETS[0]}' ,
	  	 'cmd': acd  + 
          	 ' deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=5.0 ' + 
          	 ' csq=${SOURCES[2]} source=${SOURCES[1]} ' +
          	 ' data=${TARGETS[0]} sampord=1 ',
          	 'src': ['hdr8-12km.su', 'wavelet8-12km.su', 'csq4layer.rsf'],
          	 'tgt': ['shot8-12kmser.su'],
               },
	       { 'job': 'shot8-12kmomp',
	      	 'pre': '/bin/cp ${SOURCES[0]} ${TARGETS[0]}' ,
	  	 'cmd': acd  + 
          	 ' deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=5.0 ' + 
          	 ' csq=${SOURCES[2]} source=${SOURCES[1]} ' +
          	 ' data=${TARGETS[0]} sampord=1 num_threads=2',
          	 'src': ['hdr8-12km.su', 'wavelet8-12km.su', 'csq4layer.rsf'],
          	 'tgt': ['shot8-12kmomp.su'],
               },
	       { 'job': 'shot8-12km',
	      	 'pre': '/bin/cp ${SOURCES[0]} ${TARGETS[0]}' ,
	  	 'cmd': acd  + 
          	 ' deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=5.0 ' + 
          	 ' csq=${SOURCES[2]} source=${SOURCES[1]} ' +
          	 ' data=${TARGETS[0]} sampord=1 num_threads=1' +
	  	 ' partask=' + str(getThreads(lenv)),
          	 'src': ['hdr8-12km.su', 'wavelet8-12km.su', 'csq4layer.rsf'],
          	 'tgt': ['shot8-12km.su'],
               },
	       { 'job': 'shot8-12kmdd',
	       	 'pre': '/bin/cp ${SOURCES[0]} ${TARGETS[0]}' ,
	       	 'cmd': acd  + 
               	 ' deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=5.0 ' + 
               	 ' csq=${SOURCES[2]} source=${SOURCES[1]} ' +
               	 ' data=${TARGETS[0]} sampord=1 num_threads=1' +
	       	 ' partask=' + str(getThreads(lenv)/(PNP1*PNP2)) +
		 ' mpi_np1=' + str(PNP1) + ' mpi_np2=' + str(PNP2),
               	 'src': ['hdr8-12km.su', 'wavelet8-12km.su', 'csq4layer.rsf'],
               	 'tgt': ['shot8-12kmdd.su'],
               },
              ]

run(jobs,lenv)

Result('csq4layer', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p\^\^2\_" unit="m\^2\_/ms\^2\_" | grey color=c mean=y scalebar=y barreverse=y')

Result('csq4layersm', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p\^\^2\_" unit="m\^2\_/ms\^2\_" | grey color=c mean=y scalebar=y barreverse=y')

Result('dcsq4layer', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p\^\^2\_" unit="m\^2\_/ms\^2\_" | grey color=c mean=y scalebar=y barreverse=y')

for NP1 in [1,2]:
    for NP2 in [1,2]: 

    	Result('shot' + str(NP1) + str(NP2),'shot' + str(NP1) + str(NP2) + '.su', 'suread endian=0 read=data | put label1=Time label2=Distance d2=0.025 o2=5 unit1=s unit2=km label=Pressure unit=GPa | grey scalebar=y barreverse=y clip=0.1')

	Result('born' + str(NP1) + str(NP2),'born' + str(NP1) + str(NP2) + '.su', 'suread endian=0 read=data | put label1=Time label2=Trace unit1=s label=Pressure unit=GPa | grey scalebar=y barreverse=y')

	Result('rtm' + str(NP1) + str(NP2), 'put label1=Depth unit1=m label2 = Distance unit2=m label="V\_p\^\^2\_" unit="m\^2\_/ms\^2\_" |window max1=8000 min2=5000 max2=15000 | grey color=c mean=y clip=0.0001 scalebar=y barreverse=y')

Result('shot8-12km','shot8-12km.su', 'suread endian=0 read=data | put label1=Time label2=Distance d2=0.025 o2=5 unit1=s unit2=km label=Pressure unit=GPa | sfgrey scalebar=y barreverse=y clip=0.0001')

Result('shot8-12kmdd','shot8-12kmdd.su', 'suread endian=0 read=data | put label1=Time label2=Distance d2=0.025 o2=5 unit1=s unit2=km label=Pressure unit=GPa |sfgrey scalebar=y barreverse=y  clip=0.0001')

End()


