from rsf.proj import *
from trip.proj import getnum
import os

####################### EDIT TO CHOOSE BETWEEN ########################
################ MADAGASCAR AND STANDALONE INSTALLS ###################
#asg = 'asg'
#stdmdl='standardmodel'
################################# OR ##################################
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sucddecon       = os.path.join(CWPROOT,'bin/sucddecon')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
sustack         = os.path.join(CWPROOT,'bin/sustack')
suop            = os.path.join(CWPROOT,'bin/suop')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sumax           = os.path.join(CWPROOT,'bin/sumax')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suflip          = os.path.join(CWPROOT,'bin/suflip')
sutxtaper       = os.path.join(CWPROOT,'bin/sutxtaper')
a2b             = os.path.join(CWPROOT,'bin/a2b')
suresamp        = os.path.join(CWPROOT,'bin/suresamp')
suamp           = os.path.join(CWPROOT,'bin/suamp')
sufft           = os.path.join(CWPROOT,'bin/sufft')
sushift         = os.path.join(CWPROOT,'bin/sushift')
MYAPPS          = os.getenv('MYAPPS')
asg             = os.path.join(MYAPPS,'trip/iwave/asg/main/sim.x')
asg0cgne        = os.path.join(MYAPPS,'trip/iwave/asg/main/sse.x')
asgfwi          = os.path.join(MYAPPS,'trip/iwave/asg/main/fwi.x')
deriv           = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYDeriv.x')
tscale          = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYTraceScale.x')
#######################################################################

# dummy target
Flow('cout0.txt',None,'touch $TARGET')


BASIC='../data'

# build list of data to import
SRCLIST=[]
#for i in range(3):
for i in range(1):
    SRCLIST.append('bmh'+str(i)+'.rsf')
    SRCLIST.append('byh'+str(i)+'.rsf')
    SRCLIST.append('bmw'+str(i)+'.rsf')
    SRCLIST.append('bml'+str(i)+'.rsf')
    SRCLIST.append('bml'+str(i)+'.rsf')    
    SRCLIST.append('ptph'+str(i)+'.su')
    SRCLIST.append('ptpw'+str(i)+'.su')
    SRCLIST.append('ptpl'+str(i)+'.su')
    SRCLIST.append('ptpt'+str(i)+'.su')    
    for j in range(4):
    	SRCLIST.append('ptsrc'+str(j)+str(i)+'.su')

print SRCLIST

if not os.path.exists(BASIC):
    print 'cannot find data source directory ' + BASIC
    Exit(1)
else:
    for i in SRCLIST:
        SRC = os.path.join(BASIC,i)
        if not os.path.exists(SRC):
            print 'you must build the target ' + SRC
            print 'before building this project' 
            Exit(1)
        Flow(i,SRC,'/bin/cp ' + SRC + ' ' + i, stdin=0, stdout=-1)
          

### medium loop:
### hh = homog data inverted in homog medium
### lh = lens data inverted in homog medium
### ll = lens data inverted in lens medium

# 100 iterations seems to be enough
it=100

# taper parameters - taper in gx only
TP = 'gx:2000,2500,5500,6000'

#for i in range(3):
for i in [0]:


#    for med in ['hh', 'wh', 'lh', 'll']:
    for med in ['lh']:
        exp = med + str(i)

	Flow('cgw0_weight'+exp+'.txt', None, 'echo 0.0')
	Flow('cgw0_bulkupd'+exp, 'bm'+exp[1]+exp[2],'cp')

# eigth full range
        j=3

	w=0
	winit=0.0
	wupdate=10
	bulkupdates=[20,21,22,23,24,25,26,27,28,29,30]
	
	for w in bulkupdates:
    	    Flow(['cgw' + str(w) + '_est_source_p' + exp + '.su',
                  'cgw' + str(w) + '_est_data_p' + exp + '.su',
	      	  'cgw' + str(w) + '_res_data_p' + exp + '.su',
	      	  'cgw' + str(w) + '_res_anni_p' + exp + '.su',
	      	  'cgw' + str(w) +    '_bulkgrad' + exp,
	      	  'cgw' + str(w) + '_bulkpgrad' + exp,
	      	  'cgw' + str(w+1) + '_bulkupd' + exp,
	      	  'cgw' + str(w) + exp + '.rpt',
	      	  'cgw' + str(w+1) + '_weight' + exp +'.txt'],
	     	 ['cgw' + str(w) + '_bulkupd' + exp,
              	  'byh' + exp[2],
      	      	  'ptsrc' + str(j) + exp[2] + '.su',
      	      	  'ptp' + exp[0] + exp[2] + '.su',
	      	  'cgw' + str(w) + '_weight' + exp +'.txt'],
       	      	  sugain + '< ${SOURCES[2]} >${TARGETS[0]} scale=0.0 && ' +
	      	  'add scale=0.0 < ${SOURCES[0]} > ${TARGETS[4]} && ' +
	      	  'add scale=0.0 < ${SOURCES[0]} > ${TARGETS[5]} && ' +
	      	  'add scale=0.0 < ${SOURCES[0]} > ${TARGETS[6]} && ' +	  	  
       	      	  asg0cgne + 
       	      	  '''
       	      	  bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
       	      	  source_p=${TARGETS[0]} data_p=${SOURCES[3]}
	      	  est_data_p=${TARGETS[1]} res_data_p=${TARGETS[2]}
	      	  res_anni_p=${TARGETS[3]}
	      	  bulkmod_grad=${TARGETS[4]} bulkmod_pgrad=${TARGETS[5]}
	      	  bulkmod_upd=${TARGETS[6]}
	      	  rect1=5 rect2=5 repeat=10 nsnaps=20
		  weightout=${TARGETS[8]}
	      	  weightin=${SOURCES[4]}''' +
		  ' MaxAlphaUpdate=' + str(wupdate) + ' ' + 
	      	  '''
	      	  MaxSubSteps=5 MinDecrease=0.01
	      	  RelResUpperBnd=0.2 RelResLowerBnd=0.1 AlphaDecrFac=0.1
       	      	  order=2 cfl=0.5 cmin=1.0 cmax=3.0 sampord=1
       	      	  dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
     	      	  ResidualTol=0.01 GradientTol=0.01 MaxIter=
       	      	  '''  + str(it) + ' taperpars=' + TP +
	      	  ' outfile=${TARGETS[7]}',
	      	  stdin=0, stdout=-1)
	
