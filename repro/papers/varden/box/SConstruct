#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from trip.proj import getThreads
from trip.proj import getCommand
from trip.prog import run

import os

#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

FPROTO = 'free40m'
APROTO = 'absb40m'
#FPROTO = '2shot'
#APROTO = '2surf'

# local parallel parameters
lenv = {'stampede2' : { 'nodes'    : 2,
                        'ppn'      : 38,
                        'wall'     : '02:00:00'
                      },
         'davinci' :  { 'nodes'    : 2,
                       	'ppn'      : 16,
                        'wall'     : '08:00:00'
                      },
         'macbook' :  { 'ppn'      : 2,
	                'FPROTO'   : '2shot',
			'APROTO'   : '2surf'},
	 'getafix' :  { 'ppn'      : 10},
	 }


######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
segyread        = os.path.join(CWPROOT,'bin/segyread')
suwind          = os.path.join(CWPROOT,'bin/suwind')
susort          = os.path.join(CWPROOT,'bin/susort')
sumute          = os.path.join(CWPROOT,'bin/sumute')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suvelan         = os.path.join(CWPROOT,'bin/suvelan')
sunmo           = os.path.join(CWPROOT,'bin/sunmo')
sustack         = os.path.join(CWPROOT,'bin/sustack')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sugazmig        = os.path.join(CWPROOT,'bin/sugazmig')
velconv         = os.path.join(CWPROOT,'bin/velconv')
smooth2         = os.path.join(CWPROOT,'bin/smooth2')
unisam2         = os.path.join(CWPROOT,'bin/unisam2')
transp          = os.path.join(CWPROOT,'bin/transp')
sumigpspi       = os.path.join(CWPROOT,'bin/sumigpspi')
sumigfd         = os.path.join(CWPROOT,'bin/sumigfd')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
sufft           = os.path.join(CWPROOT,'bin/sufft')
suamp           = os.path.join(CWPROOT,'bin/suamp')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suop            = os.path.join(CWPROOT,'bin/suop')
sunull          = os.path.join(CWPROOT,'bin/sunull')
RSFROOT         = os.getenv('RSFROOT')
sfsuread        = os.path.join(RSFROOT,'bin/sfsuread')
MYAPPS          = os.getenv('MYAPPS')
TRIP            = os.path.join(MYAPPS,'trip')
GCCTRIP         = os.path.join(MYAPPS,'gcctrip')
asg             = os.path.join(TRIP,'iwave/asg/main/sim.x')
lin             = os.path.join(TRIP,'iwave/asg/main/cg.x')
borninv         = os.path.join(TRIP,'iwave/asg/main/pcg.x')
acd             = os.path.join(TRIP,'iwave/acd/main/sim.x')
myvalgrind      = os.path.join(MYAPPS,'valgrind/bin/valgrind')
dgrid           = os.path.join(GCCTRIP,'iwave/grid/main/GridDeriv.x')
dsegy           = os.path.join(GCCTRIP,'iwave/trace/main/SEGYDeriv.x')
decon           = os.path.join(GCCTRIP,'iwave/trace/main/SEGYCGDecon.x')
BULK = 6.250
BUOY = 1.000

# background models with extra layer for absorbing boundary good behaviour
Flow('deepbulk', None, 
     '''
     makevel n1=311 n2=401 
     d1=10.0 d2=10.0 o1=-100 v000=%g 
     sfput dim=2 gdim=2 id1=0 id2=1
     label1=Depth label2=Distance
     unit1=m unit2=m
     label=Bulk_modulus unit=GPa''' % BULK,
     stdin=0)
     
Flow('deepbuoy', None, 
     '''
     makevel n1=311 n2=401 
     d1=10.0 d2=10.0 o1=-100 v000=%g | 
     sfput dim=2 gdim=2 id1=0 id2=1
     label1=Depth label2=Distance
     unit1=m unit2=m
     label=Buoyancy unit=cm^3/g
     ''' % BUOY,
     stdin=0)

# Jie's code for generating model perturbation, with my modifications
# n2 = 301 -> 401
# n1 = 301 -> 311
# o1 = 0 -> -100
# makes deep version of model
# Generate reflectivity model

par = dict( n1=311, o1=-100, d1=10,
            n2=401, o2=0, d2=10,
            ref1=1000, ref2=1500 ,ref3=2000 )

Flow('spike',None,'spike n1=%(n1)d o1=%(o1)d d1=%(d1)d label1="Depth" unit1="m"\
 out=stdout' %par)

f=2

Flow('dgauss1','spike',
    '''math output="(x1-%d)" |
      math output="input*exp(-%g*input*input)" |
      scale axis=1| scale axis=1 rscale=1000 out=stdout
      ''' %(par['ref1'],1/(f*par['n1'])))

Flow('dgauss2','spike',
    '''math output="(x1-%d)" |
      math output="input*exp(-%g*input*input)" |
      scale axis=1| scale axis=1 rscale=1000 out=stdout
      ''' %(par['ref2'],1/(f*par['n1'])))

Flow('dgauss3','spike',
    '''math output="(x1-%d)" |
      math output="input*exp(-%g*input*input)" |
      scale axis=1| scale axis=1 rscale=1000 out=stdout
      ''' %(par['ref3'],1/(f*par['n1'])))

Flow('deltav1','dgauss1','''spray axis=2 n=%(n2)d o=%(o2)d  d=%(d2)d | put labe\
l2="Distance" unit2="m" o3=0 d3=%(d1)d out=stdout''' %par)

Flow('deltav2','dgauss2','''spray axis=2 n=%(n2)d o=%(o2)d  d=%(d2)d | put labe\
l2="Distance" unit2="m" o3=0 d3=%(d1)d out=stdout''' %par)

Flow('deltav3','dgauss3','''spray axis=2 n=%(n2)d o=%(o2)d  d=%(d2)d | put labe\
l2="Distance" unit2="m" o3=0 d3=%(d1)d out=stdout''' %par)

Flow('deepdbulk','deltav1 deltav2 deltav3',
     'math output=input+a+b a=${SOURCES[1]} b=${SOURCES[2]} out=stdout  | add scale=0.0004')

# zero for buoyancy
Flow('deepdbuoy', None, 
     '''
     makevel n1=311 n2=401 
     d1=10.0 d2=10.0 o1=-100 v000=0.0 | 
     sfput dim=2 gdim=2 id1=0 id2=1
     label1=Depth label2=Distance
     unit1=m unit2=m
     label=Buoyancy unit=cm^3/g
     ''',
     stdin=0)

# window to free surface 
Flow('bulk','deepbulk','window n1=301 f1=10')
Flow('buoy','deepbuoy','window n1=301 f1=10')
Flow('dbulk','deepdbulk','window n1=301 f1=10')
Flow('dbuoy','deepdbuoy','window n1=301 f1=10')

# subsurface offset extension - pad by zeros
NH=20
DZX=10
OH=-NH*DZX
Flow('extbulk','bulk',
     'add scale=' + str(1.0/DZX) + ' |' +
     'pad beg3=' + str(NH) + ' end3=' + str(NH) + 
     ' | put d3=' + str(DZX) + ' o3=' + str(OH) + ' dim=2 gdim=3 id1=0 id2=1 id3=101 label3=Offset')
Flow('extdeepbulk','deepbulk',
     'add scale=' + str(1.0/DZX) + ' |' +
     'pad beg3=' + str(NH) + ' end3=' + str(NH) + 
     ' | put d3=' + str(DZX) + ' o3=' + str(OH) + ' dim=2 gdim=3 id1=0 id2=1 id3=101 label3=Offset')
Flow('extdbulk','dbulk',
     'add scale=' + str(1.0/DZX) + ' |' +
     'pad beg3=' + str(NH) + ' end3=' + str(NH) + 
     ' | put d3=' + str(DZX) + ' o3=' + str(OH) + ' dim=2 gdim=3 id1=0 id2=1 id3=101 label3=Offset')
Flow('extdeepdbulk','deepdbulk',
     'add scale=' + str(1.0/DZX) + ' |' +
     'pad beg3=' + str(NH) + ' end3=' + str(NH) + 
     ' | put d3=' + str(DZX) + ' o3=' + str(OH) + ' dim=2 gdim=3 id1=0 id2=1 id3=101 label3=Offset')

# source computation
# dirac - includes division by dt
Flow('spike.su', None, suspike + ' nt=1001 ntr=1 offset=0 ix1=1 nspk=1 it1=501 dt=0.001 | ' +  sugain + ' scale=' + str(BULK) + ' | ' + sushw + ' key=delrt a=-500')

# filter to bandpass 
Flow('bandpass.su', 'spike.su', sufilter + ' f=2.5,5,35,40' )

# integrate using trapezoidal rule 
Flow('trapintbandpass.su','bandpass.su','/bin/cp ${SOURCES[0]} ${TARGETS[0]}; ' + dsegy + ' in=${TARGETS[0]} order=-1',stdin=0,stdout=-1)

# create header files
# absorbing surface
Flow('absb40m.su', None, sunull + ' nt=751 ntr=22876 | ' + sushw + ' key=selev,gelev a=0,0     | ' + sushw + ' key=sx,gx,sy,gy,fldr,tracr,tracf,tracl a=500,500,0,0,1,1,1,1 b=0,10,0,0,0,1,1,1 c=40,0,0,0,1,301,0,301 j=301,301,301,301,301,301,301,301 | ' + suchw + ' key1=offset key2=gx key3=sx b=1 c=-1')

# free surface
Flow('free40m.su', None, sunull + ' nt=751 ntr=22876 | ' + sushw + ' key=selev,gelev a=-10,-10     | ' + sushw + ' key=sx,gx,sy,gy,fldr,tracr,tracf,tracl a=500,500,0,0,1,1,1,1 b=0,10,0,0,0,1,1,1 c=40,0,0,0,1,301,0,301 j=301,301,301,301,301,301,301,301 | ' + suchw + ' key1=offset key2=gx key3=sx b=1 c=-1')

# header files for 2 shot simulations
Flow('2surf.su','absb40m.su',suwind + ' key=fldr min=37 max=38')
Flow('2shot.su','free40m.su',suwind + ' key=fldr min=37 max=38')

# create towed streamer source data
for foo in ['absb40m','free40m','2surf','2shot']:
    Flow('wavelet_' + foo + '.su', ['trapintbandpass.su', foo + '.su'],
         '''
         towed_array 
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# derived names
FPDATA = FPROTO + '.su'
FVDSRC = 'wavelet_' + FPROTO + '.su'
APDATA = APROTO + '.su'
AVDSRC = 'wavelet_' + APROTO + '.su'

PTASK = getThreads(lenv)

jobs=   [
	{ 'job': 'born',
          'pre': sugain + ' <${SOURCES[0]} scale=0.0 >$TARGET',
          'src': [FPDATA, FVDSRC, 'bulk', 'buoy', 'dbulk', 'dbuoy'],
          'tgt': ['born.su'],
          'cmd': asg + ' ' + 
		 'deriv=1 adjoint=0 order=4 ' +
		 'cfl=0.5 cmin=1.0 cmax=3.0 dmin=0.8 dmax=3.0 sampord=1 ' +
		 'bulkmod=${SOURCES[2]} buoyancy=${SOURCES[3]} ' +
		 'bulkmod_d1=${SOURCES[4]} buoyancy_d1=${SOURCES[5]} ' +
		 'source_p=${SOURCES[1]} data_p=${TARGETS[0]} ' +
		 'nl1=0 nr1=250 nl2=250 nr2=250 pmlampl=1.0 ' +
		 'partask=' + str(PTASK) + ' ' + 
		 'dump_term=0 dump_lda=0 dump_ldc=0 printact=0',
	},
	{ 'job': 'absborn',
          'pre': sugain + ' <${SOURCES[0]} scale=0.0 >$TARGET',
          'src': [APDATA, AVDSRC, 'deepbulk', 'deepbuoy', 'deepdbulk', 'deepdbuoy'],
          'tgt': ['absborn.su'],
          'cmd': asg + ' ' + 
		 'deriv=1 adjoint=0 order=4 ' +
		 'cfl=0.5 cmin=1.0 cmax=6.0 dmin=0.8 dmax=3.0 sampord=1 ' +
		 'bulkmod=${SOURCES[2]} buoyancy=${SOURCES[3]} ' +
		 'bulkmod_d1=${SOURCES[4]} buoyancy_d1=${SOURCES[5]} ' +
		 'source_p=${SOURCES[1]} data_p=${TARGETS[0]} ' +
		 'nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0 ' +
		 'partask=' + str(PTASK) + ' ' + 
		 'dump_term=0 dump_lda=0 dump_ldc=0 printact=0',
	},
       ]

basecmd = ' deriv=0 order=4 adjtest=0 cfl=0.5 cmin=1.0 cmax=3.0 dmin=0.8 dmax=3.0 sampord=1 maxfreq=0.04 nsnaps=20 freebulkmod=${SOURCES[4]} freebuoyancy=${SOURCES[5]} freebulkmodpert=${SOURCES[6]} absbbulkmod=${SOURCES[7]} absbbuoyancy=${SOURCES[8]} absbbulkmodpert=${SOURCES[9]} freesource_p=${SOURCES[2]} absbsource_p=${SOURCES[3]} freedata_p=${SOURCES[0]} absbdata_p=${SOURCES[1]} pmlwidth=250 pmlampl=1.0 dump_term=0 dump_lda=0 dump_ldc=0 printact=0 num_threads=1 partask=' + str(PTASK) + ' '

prefix = ['born','mig']
suffix = ['.su','.rsf']
cpcmd  = {'free': ['/bin/cp ${SOURCES[0]} ','add scale=0 < ${SOURCES[6]} > '],
          'absb': ['/bin/cp ${SOURCES[1]} ','add scale=0 < ${SOURCES[9]} > ']}
choice = {'free': '1', 'absb': '0'}
output = ['data_p', 'bulkmodpert']

for fa in ['free']:
    for precond in [0, 1]:
        for itmax in [0, 10]:
	    jobs = jobs + [			
	            	  { 'job': fa+'invp'+str(precond) + 'it' + str(itmax),
                       	  'pre': cpcmd[fa][1] + ' ${TARGETS[0]}', 
                       	  'src': ['born.su','absborn.su', FVDSRC, AVDSRC,
	                  	 'bulk', 'buoy', 'extdbulk',
	  	      	  	 'deepbulk','deepbuoy','extdeepdbulk'],
                          'tgt': [fa+'invp'+str(precond) + 'it' + str(itmax) + suffix[1]],
	          	  'cmd': borninv + basecmd + 
                                'freesurface=' + choice[fa] + ' ' +
		     	        'precond=' + str(precond) + ' ' +
				'ResidualTol=0.01 GradientTol=0.01 MaxIter=' + str(itmax) + ' ' + 
				'outfile=cgne.rpt ' +		 
		     	        fa + 'bulkmodpert=${TARGETS[0]} '
	                },
			{ 'job': fa + 'rebornp' + str(precond) + 'it' + str(itmax),
                       	  'pre': cpcmd[fa][0] + ' ${TARGETS[0]}', 			
                       	  'src': ['born.su','absborn.su', FVDSRC, AVDSRC,
	                  	 'bulk', 'buoy', 'extdbulk',
	  	      	  	 'deepbulk','deepbuoy','extdeepdbulk',
				 fa + 'invp' +str(precond) + 'it' + str(itmax) + suffix[1]],
			  'tgt': [fa + 'rebornp' + str(precond) + 'it' + str(itmax) + suffix[0]],	
	          	  'cmd': borninv + basecmd + 
                                'freesurface=' + choice[fa] + ' ' +
		     	        'adjoint=0 precond=0 ' + 
				'ResidualTol=0.01 GradientTol=0.01 MaxIter=0 ' + 
				'outfile=' + fa + 'cgne.rpt ' +		 
		     	        fa + 'bulkmodpert=${SOURCES[10]} ' +
				fa + 'data_p=${TARGETS[0]} '
			}
                ]

run(jobs,lenv)

Result('dbulk','window min2=500 max2=3500 | grey clip=0.4 scalebar=y')
Flow('dbulk150','dbulk','window n2=1 f2=150')

End()