from rsf.proj import *
import os

####################### EDIT TO CHOOSE BETWEEN ########################
################ MADAGASCAR AND STANDALONE INSTALLS ###################
#asg = 'asg'
#stdmdl='standardmodel'
################################# OR ##################################
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sucddecon       = os.path.join(CWPROOT,'bin/sucddecon')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
sustack         = os.path.join(CWPROOT,'bin/sustack')
suop            = os.path.join(CWPROOT,'bin/suop')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sumax           = os.path.join(CWPROOT,'bin/sumax')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suflip          = os.path.join(CWPROOT,'bin/suflip')
sutxtaper       = os.path.join(CWPROOT,'bin/sutxtaper')
a2b             = os.path.join(CWPROOT,'bin/a2b')
suresamp        = os.path.join(CWPROOT,'bin/suresamp')
suamp           = os.path.join(CWPROOT,'bin/suamp')
sufft           = os.path.join(CWPROOT,'bin/sufft')
sushift         = os.path.join(CWPROOT,'bin/sushift')
suweight        = os.path.join(CWPROOT,'bin/suweight')
MYAPPS          = os.getenv('MYAPPS')
asg             = os.path.join(MYAPPS,'trip2.1/iwave/asg/main/asg.x')
asg1            = os.path.join(MYAPPS,'trip2.1/iwave/asg/main/asg1.x')
asgsrcinv       = os.path.join(MYAPPS,'trip2.1/iwave/asg/main/asgsrcinv.x')
poisson         = os.path.join(MYAPPS,'trip2.1/iwave/asg/main/poisson.x')
stdmdl          = os.path.join(MYAPPS,'trip2.1/iwave/grid/main/standardmodel.x')
#######################################################################

# dummy target
Flow('cout0.txt',None,'touch $TARGET')

BULK = 4.0
BUOY = 1.0
DX   = [20,10,5]
DT   = [0.008,0.004,0.002]
NX   = [401,801,1601]
NTR  = [201,401,801]
FTR  = [76,151,301]
NZ   = [201,401,801]
F1   = [1,2,4]
F2   = [2.5,5,10]
F3   = [7.5,15,30]
F4   = [12.5,25,50]
CLIP = [0.08,0.24,0.8]
SCLIP= [20.0,80.0,320.0]
DF   = 0.248
RZ   = 1000
SZ   = 3000
SX   = 3500
TMIN = 0.8
TMAX = 1.8

for i in range(0,3):

    FSCALE = 2.0*DX[i]*BULK

    Flow('pthdr' + str(i) + '.su', None,
         sunull + ' nt=2001 ntr=' + str(NTR[i]) + ' dt=0.002 | ' + 
         sushw + ' key=gx a=2000 b=' + str(DX[i]) + ' j=' + str(NTR[i]) + ' | ' + 
         sushw + ' key=gelev a=-1000',
         stdin=0)

    Flow('srchdr' + str(i) + '.su', None,
         sunull + ' nt=1001 ntr=' + str(NX[i]) + ' dt=0.002 | ' + 
         sushw + ' key=gx a=0 b=' + str(DX[i]) + ' j=' + str(NX[i]) + ' | ' + 
         sushw + ' key=delrt,gelev a=-1000,-3000',
         stdin=0)

### src file point source at x=3500 = left end of line + 1500 m,
### scale by 500 for time delta (dt=0.002) and
### dx for dx integration

    Flow('ptsrc'+str(i)+'.su', None, suspike +
         ' nt=1001 ntr=' + str(NTR[i]) + ' offset=0 ix1=' + str(FTR[i]) + ' nspk=1 it1=500 dt=0.002 | ' +
         sufilter + ' f=' +
	 str(F1[i]) + ',' + str(F2[i]) + ',' +
	 str(F3[i]) + ',' + str(F4[i]) + ' | ' +
         sugain + ' scale=' + str(500.0*DX[i]) + ' | ' + 
         sushw + ' key=delrt,gelev a=-1000,-3000 | ' +
         sushw + ' key=gx a=2000 b=' + str(DX[i]) + ' j=' + str(NTR[i]),
	 stdin=0)

### create bulk modulus and buoyancy files

    NXL=NX[i]
    NZL=NZ[i]
    DXL=DX[i]
    DTL=DT[i]

    Flow('bmh'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BULK) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0) 

    Flow('byh'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BUOY) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0) 

    Flow('bml'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BULK) + 
	 ' x1lens=2000 x2lens=4000 dlens=700 tlens=1500 vlens=-2.4| ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0)

    Result('bmh' + str(i),'transp |grey color=j label1="depth (m)" label2="distance (m)" title="bulk modulus" barlabel=GPa scalebar=y')

    Result('bml' + str(i),'transp |grey color=j label1="depth (m)" label2="distance (m)" title="bulk modulus" barlabel=GPa scalebar=y')

### medium loop:
### hh = homog data inverted in homog medium
### lh = lens data inverted in homog medium
### ll = lens data inverted in lens medium

    for med in ['hh', 'lh', 'll']:

        exp = med + str(i)
    
### simulate data
        Flow('ptp' + exp + '.su ptvz' + exp + '.su',
    	     'bm' + exp[0] + str(i) + ' byh' + str(i) + ' ptsrc' + str(i) + '.su ' +
	     'pthdr' + str(i) + '.su',
             '/bin/cp ${SOURCES[3]} ${TARGETS[0]}; ' +
             '/bin/cp ${SOURCES[3]} ${TARGETS[1]}; ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${SOURCES[2]} data_p=${TARGETS[0]} data_v0=${TARGETS[1]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
	     dump_lda=1 dump_ldc=1 dump_term=1 sampord=1
             ''', stdin=0, stdout=0) 

        Flow('ptvzg'+exp+'.su','ptvz'+exp+'.su',
             sugain + ' scale=-' + str(FSCALE))

### scan from homog to lens
    Flow('ptvzglltap' + str(i) + '.su','ptvzgll' + str(i) + '.su',
         sutxtaper + ' tr1=50 taper=3')

    S=['srcvzhl0_' + str(i) + '.su']
    R=['ptphl0_' + str(i) + '.su']
    for k in range(1,11):
        S.append('srcvzhl' + str(k) + '_' + str(i) + '.su')
        R.append('ptphl' + str(k) + '_' + str(i) + '.su')
	
    for k in range(0,11):    
        Flow('bmhl' + str(k) + '_' + str(i),['bmh'+str(i), 'bml' + str(i)],
             'add mode=a scale=' + str(0.1*k) + ',' + str(1.0-0.1*k) +
	     ' ${SOURCES[1]}')

        Flow([S[k],'A'+S[k]],
    	     'bmhl' + str(k) + '_' + str(i) + ' byh' + str(i) +
	     ' srchdr' + str(i) + '.su ptvzglltap' + str(i) + '.su',
             '/bin/cp ${SOURCES[2]} ${TARGETS[0]} && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_v0=${TARGETS[0]} data_p=${SOURCES[3]}
             deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
	     dump_lda=1 dump_ldc=1 dump_term=1 sampord=1
             ''' + ' && ' +
	     suweight + ' key=gx a=-' + str(SX) + ' b=1 ' +
	     '< ${TARGETS[0]} > ${TARGETS[1]}', stdin=0, stdout=-1)

        Result('srcvzhl' + str(k) + '_' + str(i),
	       'srcvzhl' + str(k) + '_' + str(i) + '.su',
	       'suread endian=0 | grey color=j scalebar=y')
	       
        Flow([R[k],'R'+R[k]],
    	     'bmhl' + str(k) + '_' + str(i) + ' byh' + str(i) +
	     ' ptsrc' + str(i) + '.su pthdr' + str(i) + '.su',
             '/bin/cp ${SOURCES[3]} ${TARGETS[0]} && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${SOURCES[2]} data_p=${TARGETS[0]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
	     dump_lda=1 dump_ldc=1 dump_term=1 sampord=1 && ''' + 
             suop2 + ' ${TARGETS[0]} ' + R[0] + ' op=diff > ${TARGETS[1]}''',
	     stdin=0, stdout=-1)

    Flow('rj'+str(i)+'.rsf', S,
	 '/bin/echo n1=11 d1=0.1 o1=0 data_format=ascii_float in=rj' + str(i) +
	 '.txt > ${TARGETS[0]} && ' +
	 'suread endian=0 < A${SOURCES[0]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// > rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[1]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[2]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[3]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[4]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[5]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[6]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[7]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[8]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[9]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt && ' + 
	 'suread endian=0 < A${SOURCES[10]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rj' + str(i) + '.txt',
	 stdin=0,stdout=-1)

    Flow('j' + str(i), 'rj' + str(i),
         'add ${SOURCE} mode=p')

    Flow('rms'+str(i)+'.rsf', R,
	 '/bin/echo n1=11 d1=0.1 o1=0 data_format=ascii_float in=rms' + str(i) +
	 '.txt > ${TARGETS[0]} && ' +
	 'suread endian=0 < R${SOURCES[0]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// > rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[1]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[2]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[3]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[4]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[5]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[6]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[7]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[8]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[9]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt && ' + 
	 'suread endian=0 < R${SOURCES[10]} | attr want=norm | ' +
	 'sed s/\'  2-norm = \'// >> rms' + str(i) + '.txt',
	 stdin=0,stdout=-1)

    Flow('ols' + str(i), 'rms' + str(i),
         'add ${SOURCE} mode=p')

    Result('ols' + str(i),'graph')

    Result('ptphl0_' + str(i),'ptphl0_'+str(i)+'.su',
           'suread endian=0|window n1=1001|transp|put d1=20 o1=2000 unit1=m unit2=s|grey label1="depth" label2="time" title="sz= 3500 m" color=j barlabel=GPa xinch=6')

    Result('ptphl10_' + str(i),'ptphl10_'+str(i)+'.su',
           'suread endian=0|window n1=1001|transp|put d1=20 o1=2000 unit1=m unit2=s|grey label1="depth" label2="time" title="sz= 3500 m" color=j barlabel=GPa xinch=6')

End()
