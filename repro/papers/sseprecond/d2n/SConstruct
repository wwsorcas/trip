from rsf.proj import *
from trip.proj import getnum
import os

################################# DEFNS ##################################
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sucddecon       = os.path.join(CWPROOT,'bin/sucddecon')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
sustack         = os.path.join(CWPROOT,'bin/sustack')
suop            = os.path.join(CWPROOT,'bin/suop')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sumax           = os.path.join(CWPROOT,'bin/sumax')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suflip          = os.path.join(CWPROOT,'bin/suflip')
sutxtaper       = os.path.join(CWPROOT,'bin/sutxtaper')
a2b             = os.path.join(CWPROOT,'bin/a2b')
suresamp        = os.path.join(CWPROOT,'bin/suresamp')
suamp           = os.path.join(CWPROOT,'bin/suamp')
sufft           = os.path.join(CWPROOT,'bin/sufft')
sushift         = os.path.join(CWPROOT,'bin/sushift')
MYAPPS          = os.getenv('MYAPPS')
asg             = os.path.join(MYAPPS,'trip/iwave/asg/main/sim.x')
asg0cgne        = os.path.join(MYAPPS,'trip/iwave/asg/main/sse.x')
asgfwi          = os.path.join(MYAPPS,'trip/iwave/asg/main/fwi.x')
deriv           = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYDeriv.x')
tscale          = os.path.join(MYAPPS,'trip/iwave/trace/main/SEGYTraceScale.x')
#######################################################################

# dummy target
Flow('cout0.txt',None,'/usr/bin/touch $TARGET')

BULK = 4.0
BUOY = 1.0
DX   = [20,10,5]
DT   = [0.008,0.004,0.002]
NX   = [401,801,1601]
NTR  = [201,401,801]
FTR  = [75,150,300]
NZ   = [201,401,801]
NZTH = [31,31,31]
ZMTH = [2700,2850,2925]
NT   = [626,1251,2501]
NTS  = [251,501,1001]
F1   = [1,2,4]
F2   = [2.5,5,10]
F3   = [7.5,15,30]
F4   = [12.5,25,50]
CLIP = [0.08,0.24,0.8]
SCLIP= [20.0,80.0,320.0]
DF   = 0.248
RZ   = -1000
SZ   = -3000
RXMIN=  2000
SX   =  3500
TMIN = 1.0
TMAX = 3.0

# taper parameters - taper in gx only
TP = 'gx:2000,2500,5500,6000'

#for i in range(0,3):
for i in [0]:

# scale for DtoN map
    PSCALE = 2.0*DX[i]*BULK
    VSCALE = 2.0*DX[i]*BUOY
    
# compute header files for receiver (rechdr) and source (srchdr) lines, at gelev
# = -1000 and -3000 resp.

    Flow('rechdr' + str(i) + '.su', None,
         sunull + ' nt=' + str(NT[i]) +
	 ' ntr=' + str(NTR[i]) +
	 ' dt=' + str(DT[i]) + ' | ' + 
         sushw + ' key=gx a=' + str(RXMIN) +
	 ' b=' + str(DX[i]) +
	 ' j=' + str(NTR[i]) + ' | ' +
         sushw + ' key=gelev,selev,sx' +
	 ' a=' + str(RZ) + ',' + str(SZ) + ',' + str(SX) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',
         stdin=0)
	 

    Flow('srchdr' + str(i) + '.su', None,
         sunull + ' nt=' + str(NTS[i]) +
	 ' ntr=' + str(NTR[i]) +
	 ' dt=' + str(DT[i]) + ' | ' + 
         sushw + ' key=gx a=' + str(RXMIN) +
	 ' b=' + str(DX[i]) +
	 ' j=' + str(NTR[i]) + ' | ' +
         sushw + ' key=gelev,selev,sx' +
	 ' a=' + str(SZ) + ',' + str(SZ) + ',' + str(SX) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',
         stdin=0)

# near receiver lines, gelev=selev +/- delta z

    Flow('nrphdr' + str(i) + '.su', None,
         sunull + ' nt=' + str(NTS[i]) +
	 ' ntr=' + str(NTR[i]) +
	 ' dt=' + str(DT[i]) + ' | ' + 
         sushw + ' key=gx a=' + str(RXMIN) +
	 ' b=' + str(DX[i]) +
	 ' j=' + str(NTR[i]) + ' | ' +
         sushw + ' key=gelev,selev,sx' +
	 ' a=' + str(SZ+DX[i]) + ',' + str(SZ) + ',' + str(SX) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',
         stdin=0)

    Flow('nrmhdr' + str(i) + '.su', None,
         sunull + ' nt=' + str(NTS[i]) +
	 ' ntr=' + str(NTR[i]) +
	 ' dt=' + str(DT[i]) + ' | ' + 
         sushw + ' key=gx a=' + str(RXMIN) +
	 ' b=' + str(DX[i]) +
	 ' j=' + str(NTR[i]) + ' | ' +
         sushw + ' key=gelev,selev,sx' +
	 ' a=' + str(SZ-DX[i]) + ',' + str(SZ) + ',' + str(SX) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',
         stdin=0)

### src file point source at x=3500 = left end of line + 1500 m,
### scale by 500 for time delta (dt=0.002) and
### dx for dx integration

    Flow('ptsrc'+str(i)+'.su', None, suspike +
         ' nt=' + str(NTS[i]) + ' ntr=' + str(NTR[i]) + ' offset=0 ix1=' + str(FTR[i]) + ' nspk=1 it1=' + str(NTS[i]/2) + ' dt=' + str(DT[i]) + ' | ' +
         sufilter + ' f=' +
         str(F1[i]) + ',' + str(F2[i]) + ',' +
         str(F3[i]) + ',' + str(F4[i]) + ' | ' +
         sugain + ' scale=' + str(DX[i]/DT[i]) + ' | ' + 
         sushw + ' key=delrt,gelev,selev,sx' +
	 ' a=0,' + str(SZ) + ',' + str(SZ) + ',' + str(SX) + ' | ' + 
         sushw + ' key=gx a=2000 b=' + str(DX[i]) + ' j=' + str(NTR[i]) + ' | ' +
         suchw + ' key1=offset key2=gx key3=sx c=-1',         
         stdin=0)

### create bulk modulus and buoyancy files

    NXL=NX[i]
    NZL=NZ[i]
    DXL=DX[i]
    DTL=DT[i]

    Flow('bmh'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BULK) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0)

    Flow('byh'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Buoyancy unit=cc/g' +
         ' v000=' + str(BUOY) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0) 

    Flow('bml'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BULK) + 
         ' x1lens=2000 x2lens=4000 dlens=700 tlens=1500 vlens=-2.4| ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0)

    Flow('bmw'+str(i), None, 
         'makevel n1=' + str(NZL) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) + 
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BULK) + 
         ' x1lens=2000 x2lens=4000 dlens=700 tlens=1500 vlens=-0.4| ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0)

    Flow('bmhth'+str(i), None, 
         'makevel n1=' + str(NZTH[i]) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) +
	 ' o1=' + str(ZMTH[i]) +
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Bulk_modulus unit=GPa' +
         ' v000=' + str(BULK) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0)

    Flow('byhth'+str(i), None, 
         'makevel n1=' + str(NZTH[i]) + ' n2=' + str(NXL) +
         ' d1=' + str(DXL) + ' d2=' + str(DXL) +
	 ' o1=' + str(ZMTH[i]) +
         ' label1=Depth label2=Distance' + 
         ' unit1=m unit2=m' + 
         ' label=Buoyancy unit=cc/g' +
         ' v000=' + str(BUOY) + ' | ' +
         ' sfput dim=2 gdim=2 id1=0 id2=1',
         stdin=0) 

    Result('bml' + str(i),'grey color=j scalebar=y')

############### ADJOINT TESTS ##################

# adjoint test - p source to p receivers 

    Flow('adjtestp' + str(i) + '.txt',
        ['bmh' + str(i),
	 'byh' + str(i),
         'rechdr' + str(i) + '.su',
	 'ptsrc' + str(i) + '.su'],
         asg + 
         '''
         bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
         source_p=${SOURCES[3]} data_p=${SOURCES[2]} 
         deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 adjtest=1
         dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
         taperpars=
         ''' + TP, stdin=0)

# adjoint test - vz source to vz receivers

    Flow('adjtestvz' + str(i) + '.txt',
        ['bmh' + str(i),
	 'byh' + str(i),
         'rechdr' + str(i) + '.su',
	 'ptsrc' + str(i) + '.su'],
         asg + 
         '''
         bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
         source_v0=${SOURCES[3]} data_v0=${SOURCES[2]} 
         deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 adjtest=1
         dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
         taperpars=
         ''' + TP, stdin=0)

# adjoint test - p sources to p sources 

    Flow('srcadjtestp' + str(i) + '.txt',
        ['bmh' + str(i),
	 'byh' + str(i),
         'ptsrc' + str(i) + '.su',
	 'ptsrc' + str(i) + '.su'],
         asg + 
         '''
         bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
         source_p=${SOURCES[3]} data_p=${SOURCES[2]} 
         deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 adjtest=1
         dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
         taperpars=
         ''' + TP, stdin=0)

# adjoint test - vz sources to vz sources

    Flow('srcadjtestvz' + str(i) + '.txt',
        ['bmh' + str(i),
	 'byh' + str(i),
         'ptsrc' + str(i) + '.su',
	 'ptsrc' + str(i) + '.su'],
         asg + 
         '''
         bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
         source_v0=${SOURCES[3]} data_v0=${SOURCES[2]} 
         deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 adjtest=1
         dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
         taperpars=
         ''' + TP, stdin=0)

# adjoint test - p sources to near p receivers 

    Flow('nradjtestp' + str(i) + '.txt',
        ['bmhth' + str(i),
	 'byhth' + str(i),
         'nrphdr' + str(i) + '.su',
	 'ptsrc' + str(i) + '.su'],
         asg + 
         '''
         bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
         source_p=${SOURCES[3]} data_p=${SOURCES[2]} 
         deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 adjtest=1
         dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
         taperpars=
         ''' + TP, stdin=0)

# adjoint test - vz sources to near vz receivers

    Flow('nradjtestvz' + str(i) + '.txt',
        ['bmhth' + str(i),
	 'byhth' + str(i),
         'nrphdr' + str(i) + '.su',
	 'ptsrc' + str(i) + '.su'],
         asg + 
         '''
         bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
         source_v0=${SOURCES[3]} data_v0=${SOURCES[2]} 
         deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 adjtest=1
         dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
         taperpars=
         ''' + TP, stdin=0)

################ GENERATE DATA BY BACK-PROPAGATION ################

### medium loop:
### hh = homog data inverted in homog medium
### lh = lens data inverted in homog medium
### ll = lens data inverted in lens medium

    for med in ['hh', 'wh', 'lh', 'll']:

        exp = med + str(i)

### simulate data p, vz traces

        Flow(['recp' + exp + '.su', 'recvz' + exp + '.su'],
             ['bm' + exp[0] + str(i),
	      'byh' + str(i),
	      'ptsrc' + str(i) + '.su',
              'rechdr' + str(i) + '.su'],
             '/bin/cp ${SOURCES[3]} ${TARGETS[0]}; ' +
             '/bin/cp ${SOURCES[3]} ${TARGETS[1]}; ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${SOURCES[2]} data_p=${TARGETS[0]} data_v0=${TARGETS[1]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_lda=1 dump_ldc=1 dump_term=1 sampord=1 taperpars=
             ''' + TP, stdin=0, stdout=-1) 

### scale vz for p source trace
        Flow('recvzg'+exp+'.su','recvz'+exp+'.su',
             sugain + ' scale=-' + str(PSCALE))

### scale p for vz source trace
        Flow('recpg'+exp+'.su','recp'+exp+'.su',
             sugain + ' scale=-' + str(VSCALE))

### backwards propagate scaled vz receiver traces *** as p source data ***,
### read off vz and p at source traces - at this point, by definition,
### srcp = Lambda^T srcvz

        Flow(['srcp' + exp + '.su',
              'srcvz' + exp + '.su'],
             ['bm' + exp[1] + str(i),
	      'byh' + str(i),
	      'ptsrc' + str(i) + '.su',
              'recvzg' + exp + '.su'],
             '/bin/cp ${SOURCES[2]} ${TARGETS[0]}; ' +
             '/bin/cp ${SOURCES[2]} ${TARGETS[1]}; ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_v0=${TARGETS[1]} source_p=${TARGETS[0]}
	     data_p=${SOURCES[3]}
             deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_lda=1 dump_ldc=1 dump_term=1 sampord=1 taperpars=
             ''' + TP, stdin=0, stdout=-1)

### backwards propagate scaled p receiver traces *** as vz source data ***,
### read off vz and p at source traces - at this point, by definition,
### srcp = Lambda^T srcvz

        Flow(['srcpp' + exp + '.su',
              'srcpvz' + exp + '.su'],
             ['bm' + exp[1] + str(i),
	      'byh' + str(i),
	      'ptsrc' + str(i) + '.su',
              'recpg' + exp + '.su'],
             '/bin/cp ${SOURCES[2]} ${TARGETS[0]}; ' +
             '/bin/cp ${SOURCES[2]} ${TARGETS[1]}; ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_v0=${TARGETS[1]} source_p=${TARGETS[0]}
	     data_v0=${SOURCES[3]}
             deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_lda=1 dump_ldc=1 dump_term=1 sampord=1 taperpars=
             ''' + TP, stdin=0, stdout=-1)
	     
# scale for StoD - note minus for p option

        Flow('srcvzg'+exp+'.su',
	     'srcvz'+exp+'.su',
             sugain + ' scale=' + str(PSCALE))

        Flow('srcpvzg'+exp+'.su',
	     'srcpvz'+exp+'.su',
             sugain + ' scale=-' + str(PSCALE))

# scale for DtoS

        Flow('srcpg'+exp+'.su',
	     'srcp'+exp+'.su',
             sugain + ' scale=' + str(VSCALE))


### resimulate data p and vz traces from source computed from backprop
### p traces used as vz source at receiver traces, vz read off and scaled
### at source traces

        Flow(['rerecp' + exp + '.su', 'rerecvz' + exp + '.su'],
             ['bm' + exp[1] + str(i),
	      'byh' + str(i),
	      'srcpvzg' + exp + '.su',
              'rechdr' + str(i) + '.su'],
             '/bin/cp ${SOURCES[3]} ${TARGETS[0]}; ' +
             '/bin/cp ${SOURCES[3]} ${TARGETS[1]}; ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${SOURCES[2]} data_p=${TARGETS[0]} data_v0=${TARGETS[1]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_lda=1 dump_ldc=1 dump_term=1 sampord=1 taperpars=
             ''' + TP, stdin=0, stdout=-1)

### pull out trace 21
        Flow('recp' + exp +'tr21.su', 'recp' + exp + '.su',
	     suwind + ' key=tracl min=21 max=21')
        Flow('rerecp' + exp +'tr21.su', 'rerecp' + exp + '.su',
	     suwind + ' key=tracl min=21 max=21')
	     
### pull out trace 51
        Flow('recp' + exp +'tr51.su', 'recp' + exp + '.su',
	     suwind + ' key=tracl min=51 max=51')
        Flow('rerecp' + exp +'tr51.su', 'rerecp' + exp + '.su',
	     suwind + ' key=tracl min=51 max=51')

### pull out trace 81
        Flow('recp' + exp +'tr81.su', 'recp' + exp + '.su',
	     suwind + ' key=tracl min=81 max=81')
        Flow('rerecp' + exp +'tr81.su', 'rerecp' + exp + '.su',
	     suwind + ' key=tracl min=81 max=81')
	     
# convert to rsf, form differences
        Flow('recp' + exp, 'recp' + exp + '.su',
             'suread read=data endian=0')
        Flow('rerecp' + exp, 'rerecp' + exp + '.su',
             'suread read=data endian=0')
        Flow('recp' + exp + 'tr21', 'recp' + exp + 'tr21.su',
             'suread read=data endian=0')
        Flow('rerecp' + exp + 'tr21', 'rerecp' + exp + 'tr21.su',
             'suread read=data endian=0')
        Flow('recp' + exp + 'tr51', 'recp' + exp + 'tr51.su',
             'suread read=data endian=0')
        Flow('rerecp' + exp + 'tr51', 'rerecp' + exp + 'tr51.su',
             'suread read=data endian=0')
        Flow('recp' + exp + 'tr81', 'recp' + exp + 'tr81.su',
             'suread read=data endian=0')
        Flow('rerecp' + exp + 'tr81', 'rerecp' + exp + 'tr81.su',
             'suread read=data endian=0')	     
	       
        Flow('srcvz' + exp, 'srcvz' + exp + '.su',
             'suread read=data endian=0')
        Flow('srcvzg' + exp, 'srcvzg' + exp + '.su',
             'suread read=data endian=0')
    

################################# graphics #####################################
        Result('reptr51' + exp,['recp' + exp + 'tr51', 'rerecp' + exp + 'tr51'],
               '''
               cat axis=2 ${SOURCES[1:2]} | window min1=1.2 max1=3.0 |
               graph plotcol=4,2 wanttitle=n label2=Pressure unit2=GPa
               ''')
             
        Result('srcvz' + exp,'grey color=j clip=0.08 scalebar=y minval=-0.08 maxval=0.08')
        Result('srcvzg' + exp,'grey color=j clip=0.08 scalebar=y minval=-0.08 maxval=0.08')


#############################################################################

# not particularly accurate attempt to compute DtoN directly

# resimulate pressure SOURCE traces using vz source traces as p source
# resrcp = Lambda srcvzg
# method: simulate receiver traces at sz +/- delta z, alter gz header to sz,
# average. could be done with single time loop but for convenience use two.

        Flow('resrcp_tmpp' + exp + '.su',
            ['bm' + exp[1] + str(i),
	     'byh' + str(i),
	     'srcvzg' + exp + '.su',
	     'nrphdr' + str(i) + '.su'],
             sugain + ' < ${SOURCES[3]} > ${TARGETS[0]} scale=0.0 && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${SOURCES[2]} data_p=${TARGETS[0]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 sampord=1
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_term=0 taperpars=
             ''' + TP, stdin=0, stdout=-1)

        Flow('resrcp_tmpm' + exp + '.su',
            ['bm' + exp[1] + str(i),
	     'byh' + str(i),
	     'srcvzg' + exp + '.su',
	     'nrmhdr' + str(i) + '.su'],
             sugain + ' < ${SOURCES[3]} > ${TARGETS[0]} scale=0.0 && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${SOURCES[2]} data_p=${TARGETS[0]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 sampord=1
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_term=0 taperpars=
             ''' + TP, stdin=0, stdout=-1)

        Flow('avgresrcp' + exp + '.su',
	    ['resrcp_tmpp' + exp + '.su',
	     'resrcp_tmpm' + exp + '.su'],
	     suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=sum | ' +
	     sushw + ' key=gelev a=' + str(SZ) + ' | ' +
	     sugain + ' scale=0.5',
	     stdin=0)

# resimulate pressure SOURCE traces using vz source traces as p source
# resrcp = Lambda srcvzg

        Flow('resrcp' + exp + '.su',
            ['bm' + exp[1] + str(i),
	     'byh' + str(i),
	     'srcvzg' + exp + '.su',
	     'srcp' + exp + '.su'],
             sugain + ' < ${SOURCES[3]} > ${TARGETS[0]} scale=0.0 && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${SOURCES[2]} data_p=${TARGETS[0]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 sampord=1
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_term=1 taperpars=
             ''' + TP, stdin=0, stdout=-1)

# resimulate of vz SOURCE traces using p source traces as vz source

        Flow('resrcvz' + exp + '.su',
            ['bm' + exp[1] + str(i),
	     'byh' + str(i),
	     'srcvz' + exp + '.su',
	     'srcpg' + exp + '.su'],
             sugain + ' < ${SOURCES[2]} > ${TARGETS[0]} scale=0.0 && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_v0=${SOURCES[3]} data_v0=${TARGETS[0]}
             deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=3.0 sampord=1
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_term=0 taperpars=
             ''' + TP, stdin=0, stdout=-1)
             
# adjoint-resimulate pressure SOURCE traces using vz source traces as p source
# aresrcp = Lambda^T srcvzg

        Flow('aresrcp' + exp + '.su',
            ['bm' + exp[1] + str(i),
	     'byh' + str(i),
	     'srcvzg' + exp + '.su',
	     'srcp' + exp + '.su'],
             sugain + ' < ${SOURCES[3]} > ${TARGETS[0]} scale=0.0 && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_p=${TARGETS[0]} data_p=${SOURCES[2]}
             deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 sampord=1
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_term=1 taperpars=
             ''' + TP, stdin=0, stdout=-1)

# adjoint-resimulate of vz SOURCE traces using p source traces as vz source
#
        Flow('aresrcvz' + exp + '.su',
            ['bm' + exp[1] + str(i),
	     'byh' + str(i),
	     'srcvz' + exp + '.su',
	     'srcpg' + exp + '.su'],
             sugain + ' < ${SOURCES[2]} > ${TARGETS[0]} scale=0.0 && ' +
             asg + 
             '''
             bulkmod=${SOURCES[0]} buoyancy=${SOURCES[1]} 
             source_v0=${TARGETS[0]} data_v0=${SOURCES[3]}
             deriv=0 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=3.0 sampord=1
             dmin=0.8 dmax=3.0 nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0
             dump_term=0 taperpars=
             ''' + TP, stdin=0, stdout=-1)

        Flow('dresrcvz' + exp, 'dresrcvz' + exp + '.su',
             'suread read=data endian=0 | put d2=' + str(DX[i]))           
        Flow('srcp' + exp, 'srcp' + exp + '.su',
             'suread read=data endian=0 | put d2=' + str(DX[i]))             
        Flow('resrcp' + exp, 'resrcp' + exp + '.su',
             'suread read=data endian=0 | put d2=' + str(DX[i]))             
        Flow('aresrcp' + exp, 'aresrcp' + exp + '.su',
             'suread read=data endian=0 | put d2=' + str(DX[i]))             
        Flow('dresrcp' + exp + '.su',
             ['srcp' + exp + '.su', 'resrcp' + exp + '.su'],
             suop2 + ' ${SOURCES[1]} ${SOURCES[0]} op=diff',
             stdin=0)
        Flow('dresrcp' + exp, 'dresrcp' + exp + '.su',
             'suread read=data endian=0 | put d2=' + str(DX[i]))
	     
        Result('resrcvz' + exp,'grey color=j clip=0.08 scalebar=y minval=-0.08 maxval=0.08')
        Result('aresrcvz' + exp,'grey color=j clip=0.08 scalebar=y minval=-0.08 maxval=0.08')    	
        Result('dresrcvz' + exp,'grey color=j clip=0.08 scalebar=y minval=-0.08 maxval=0.08')    
        Result('srcp' + exp,'grey color=j clip=0.2 scalebar=y minval=-0.2 maxval=0.2')
        Result('resrcp' + exp,'grey color=j clip=0.2 scalebar=y minval=-0.2 maxval=0.2')
        Result('aresrcp' + exp,'grey color=j clip=0.2 scalebar=y minval=-0.2 maxval=0.2')
        Result('dresrcp' + exp,'grey color=j clip=0.2 scalebar=y minval=-0.2 maxval=0.2')
###########################################################################

End()
