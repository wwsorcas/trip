#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *

import os

#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
a2b             = os.path.join(CWPROOT,'bin/a2b')
b2a             = os.path.join(CWPROOT,'bin/b2a')
farith          = os.path.join(CWPROOT,'bin/farith')
suwind          = os.path.join(CWPROOT,'bin/suwind')
susort          = os.path.join(CWPROOT,'bin/susort')
sumute          = os.path.join(CWPROOT,'bin/sumute')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
sustack         = os.path.join(CWPROOT,'bin/sustack')
sugain          = os.path.join(CWPROOT,'bin/sugain')
transp          = os.path.join(CWPROOT,'bin/transp')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
sufft           = os.path.join(CWPROOT,'bin/sufft')
suamp           = os.path.join(CWPROOT,'bin/suamp')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sufrac          = os.path.join(CWPROOT,'bin/sufrac')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suop            = os.path.join(CWPROOT,'bin/suop')
sunull          = os.path.join(CWPROOT,'bin/sunull')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
sumean          = os.path.join(CWPROOT,'bin/sumean')
RSFROOT         = os.getenv('RSFROOT')
sfsuread        = os.path.join(RSFROOT,'bin/sfsuread')
sfmatmult       = os.path.join(RSFROOT,'bin/sfmatmult')
sfwindow        = os.path.join(RSFROOT,'bin/sfwindow')
sfadd           = os.path.join(RSFROOT,'bin/sfadd')
sfget           = os.path.join(RSFROOT,'bin/sfget')
sfspray         = os.path.join(RSFROOT,'bin/sfspray')
sfcp            = os.path.join(RSFROOT,'bin/sfcp')
MYAPPS          = os.getenv("MYAPPS")
python          = os.path.join(MYAPPS,'conda/miniconda/bin/python')

########### archive - unarchive ##############

DATA='../data'

# build list of data to import
srclist=[]
srclist.append('d11.su')
srclist.append('u11.su')
srclist.append('w11.su')
srclist.append('m.rsf')

# retrieve data
if not os.path.exists(DATA):
    print('cannot find data source directory ' + DATA)
    Exit(1)
else:
    for i in srclist:
        SRC = os.path.join(DATA,i)
        if not os.path.exists(SRC):
            print('you must build the target ' + SRC)
            print('before building this project') 
            Exit(1)
        Flow(i,SRC,'/bin/cp ' + SRC + ' ' + i, stdin=0, stdout=-1)

MSWI='../mswi'

# build list of data to import
reslist=[]
reslist.append('uest0.su')
reslist.append('uest11.su')
reslist.append('sim0.su')
reslist.append('sim11.su')
reslist.append('resimfwi.su')
reslist.append('resimfwi0.su')
reslist.append('mest11.rsf')
reslist.append('mestfwi.rsf')
reslist.append('mestfwi0.rsf')

# retrieve data
if not os.path.exists(MSWI):
    print('cannot find data source directory ' + MSWI)
    Exit(1)
else:
    for i in reslist:
        RES = os.path.join(MSWI,i)
        if not os.path.exists(RES):
            print('you must build the target ' + RES)
            print('before building this project') 
            Exit(1)
        Flow(i,RES,'/bin/cp ' + RES + ' ' + i, stdin=0, stdout=-1)

Flow('residfwi.su', ['d11.su', 'resimfwi.su'], suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff', stdin=0)
Flow('residfwi0.su', ['d11.su', 'resimfwi0.su'], suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff', stdin=0)
Flow('resid0.su', ['d11.su', 'sim0.su'], suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff', stdin=0)
Flow('resid11.su', ['d11.su', 'sim11.su'], suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff', stdin=0)

Result('m','grey minval=2.0 maxval=4.0 scalebar=y color=j xinch=10 yinch=4 wanttitle=n')
Result('mest11','grey minval=2.0 maxval=4.0 scalebar=y color=j xinch=10 yinch=4 wanttitle=n')
Result('mestfwi','grey minval=2.0 maxval=4.0 scalebar=y color=j xinch=10 yinch=4 wanttitle=n')
Result('mestfwi0','grey minval=2.0 maxval=6.0 scalebar=y color=j xinch=10 yinch=4 wanttitle=n')

Result('d11','d11.su', 'suread endian=0 read=data | window min1=1.8 max1=3.2 | grey clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('sim0','sim0.su','suread endian=0 read=data | window min1=1.8 max1=3.2 |grey clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('resid0','resid0.su','suread endian=0 read=data | window min1=1.8 max1=3.2 |grey clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('sim11','sim11.su','suread endian=0 read=data | window min1=1.8 max1=3.2 | grey clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('resid11','resid11.su','suread endian=0 read=data | window min1=1.8 max1=3.2 | grey clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('resimfwi', 'resimfwi.su', 'suread endian=0 read=data | window min1=1.8 max1=3.2 |grey 2.0 clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('residfwi', 'residfwi.su', 'suread endian=0 read=data | window min1=1.8 max1=3.2 |grey 2.0 clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('residfwi0', 'residfwi0.su', 'suread endian=0 read=data | window min1=1.8 max1=3.2 |grey 2.0 clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')
Result('resimfwi0', 'resimfwi0.su', 'suread endian=0 read=data | window min1=1.8 max1=3.2 |grey 2.0 clip=0.008 color=j xinch=10 yinch=4 wanttitle=n')

Result('uest11','uest11.su',
        'suread endian=0 read=data |grey clip=0.02 wanttitle=n')
Result('uest0','uest0.su',
        'suread endian=0 read=data |grey clip=0.02 wanttitle=n')	
End()

