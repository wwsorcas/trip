# build dict of data to import
dd = dict(DATA='camcwd20.su', FILT='fcwu20.su', SRC='fcww20.su', HOM='m0.rsf', BUOY='bym.rsf', COV='cx.rsf')

############################### generic sconstruct ##################################

from rsf.proj import *

import os
import scenv

CWPROOT         = os.getenv('CWPROOT')
RSFROOT         = os.getenv('RSFROOT')
TRIP            = os.getenv('TRIP')
MPIROOT         = os.getenv('MPIROOT')

suconv          = os.path.join(CWPROOT,'bin/suconv')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suop2           = os.path.join(CWPROOT,'bin/suop2')
sfcp            = os.path.join(RSFROOT,'bin/sfcp')
mfexec          = os.path.join(TRIP,'pyrvl/mfexec.py')

BASIC='../data'

# retrieve data
if not os.path.exists(BASIC):
    print('cannot find data source directory ' + BASIC)
    Exit(1)
else:
    for it in dd.keys():
        ITEM = os.path.join(BASIC,dd[it])
        if not os.path.exists(ITEM):
            print('you must build the target ' + ITEM)
            print('before building this project') 
            Exit(1)
        Flow(dd[it],ITEM,'/bin/cp ' + ITEM + ' ' + dd[it], stdin=0, stdout=-1)

# simulator parameters
fdpars = 'order=2 sampord=1 nsnaps=20 cfl=0.5 cmin=1.0 cmax=3.0 dmin=0.8 dmax=3.0' + \
        ' ' + 'nl1=250 nr1=250 nl2=250 nr2=250 pmlampl=1.0 boundstest=True noisy=True partask=3'

# weight operator parameters
smpars = 'rect1=10 rect2=10 repeat=2'

# mswi parameters - fixed alpha, updated alpha
mswipars = 'alpha=0.0001 sigma=0.00001 rho=0.01 kmax=1000 verbose=2'
mswipars_aup0 = 'alpha=0.0 sigma=0.00001 rho=0.01 kmax=1000 verbose=2 etar=0.02 ratminus=0.75 ratplus=1.25'
mswipars_aup1 = 'alpha=0.0 sigma=0.00001 rho=0.01 kmax=1000 verbose=2 etar=0.04 ratminus=0.75 ratplus=1.25'

# line search parameters
lspars = 'lsmax=10 mured=0.5 muinc=1.8 gammared=0.1 gammainc=0.9'

# MSWI m0 - produce filter at homog model
descpars0 = r'descmax=0 desceps=0.01 descverbose=1 descout=\'outfile0.txt\' lsverbose=1'
pars = ' ' + fdpars + ' ' + smpars + ' ' + mswipars + ' ' + descpars0 + ' ' + lspars

Flow(['mest0.rsf', 'uest0.su'],
     [dd['HOM'], dd['DATA'] , dd['FILT'], dd['SRC'], dd['BUOY']],
     sfcp + ' ${SOURCES[0]} ${TARGETS[0]} && ' + \
     ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && ' + \
     mfexec + r' awinum.mswiopt bulkmodout=\'${TARGETS[0]}\' filterout=\'${TARGETS[1]}\'' + \
     r' bulkmodin=\'${SOURCES[0]}\' datain=\'${SOURCES[1]}\' filterin=\'${SOURCES[2]}\'' + \
     r' buoyancy=\'${SOURCES[4]}\' source=\'${SOURCES[3]}\'' + pars, stdin=0, stdout=-1)
    
# MSWI
descpars = r'descmax=12 desceps=0.01 descverbose=1 descout=\'outfilemswi.txt\' lsverbose=1'
#descpars = r'descmax=12 desceps=0.01 descverbose=1 lsverbose=1'
pars = ' ' + fdpars + ' ' + smpars + ' ' + mswipars + ' ' + descpars + ' ' + lspars

Flow(['mestmswi.rsf', 'uestmswi.su'],
     [dd['HOM'], dd['DATA'], dd['FILT'], dd['SRC'], dd['BUOY']],
     sfcp + ' ${SOURCES[0]} ${TARGETS[0]} && ' + \
     ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && ' + \
     mfexec + r' awinum.mswiopt bulkmodout=\'${TARGETS[0]}\' filterout=\'${TARGETS[1]}\'' + \
     r' bulkmodin=\'${SOURCES[0]}\' datain=\'${SOURCES[1]}\' filterin=\'${SOURCES[2]}\'' + \
     r' buoyancy=\'${SOURCES[4]}\' source=\'${SOURCES[3]}\'' + pars, stdin=0, stdout=-1)

Flow('resimmestmswi.su',[dd['DATA'], dd['SRC'], 'mestmswi.rsf', dd['BUOY']],
     ' /bin/cp ${SOURCES[0]} ${TARGETS[0]} && ' + \
     mfexec + r' awinum.asgsim bulkmod=\'${SOURCES[2]}\' data_p=\'${TARGETS[0]}\'' + \
     r' buoyancy=\'${SOURCES[3]}\' source_p=\'${SOURCES[1]}\'' + \
     ' ' + fdpars, stdin=0, stdout=-1)
     
# FWI from final MSWI estimate
descparsfwi = r'descmax=12 desceps=0.01 descverbose=1 descout=\'outfilemswifwi.txt\' lsverbose=1'
fwipars = ' ' + fdpars + ' ' + smpars + ' ' + descparsfwi + ' ' + lspars

Flow('mestmswifwi.rsf',
    ['mestmswi.rsf', dd['DATA'], dd['SRC'], dd['BUOY']],
     sfcp + ' ${SOURCES[0]} ${TARGETS[0]} && ' + \
     mfexec + r' awinum.fwiopt bulkmodout=\'${TARGETS[0]}\'' + \
     	      r' bulkmodin=\'${SOURCES[0]}\' datain=\'${SOURCES[1]}\'' + \
              r' buoyancy=\'${SOURCES[3]}\' source=\'${SOURCES[2]}\'' + \
	      fwipars, stdin=0, stdout=-1)

Flow('resimmestmswifwi.su',[dd['DATA'], dd['SRC'], 'mestmswifwi.rsf', dd['BUOY']],
     ' /bin/cp ${SOURCES[0]} ${TARGETS[0]} && ' + \
     mfexec + r' awinum.asgsim bulkmod=\'${SOURCES[2]}\' data_p=\'${TARGETS[0]}\'' + \
     r' buoyancy=\'${SOURCES[3]}\' source_p=\'${SOURCES[1]}\'' + \
     ' ' + fdpars, stdin=0, stdout=-1)

# produce filter at MSWI + FWI model
descpars1 = r'descmax=0 desceps=0.01 descverbose=1 descout=\'outfilemswifwiuest.txt\' lsverbose=1'
pars = ' ' + fdpars + ' ' + smpars + ' ' + mswipars + ' ' + descpars1 + ' ' + lspars

Flow(['mest1.rsf', 'uest1.su'],
     ['mestmswifwi.rsf', dd['DATA'] , dd['FILT'], dd['SRC'], dd['BUOY']],
     sfcp + ' ${SOURCES[0]} ${TARGETS[0]} && ' + \
     ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && ' + \
     mfexec + r' awinum.mswiopt bulkmodout=\'${TARGETS[0]}\' filterout=\'${TARGETS[1]}\'' + \
     r' bulkmodin=\'${SOURCES[0]}\' datain=\'${SOURCES[1]}\' filterin=\'${SOURCES[2]}\'' + \
     r' buoyancy=\'${SOURCES[4]}\' source=\'${SOURCES[3]}\'' + pars, stdin=0, stdout=-1)


# FWI from final MSWI estimate, finer scale, more its
descparsfwifine = r'descmax=25 desceps=0.01 descverbose=1 descout=\'outfilemswifwifine.txt\' lsverbose=1'
smparsfine = 'rect1=2 rect2=2 repeat=1'
fwiparsfine = ' ' + fdpars + ' ' + smparsfine + ' ' + descparsfwifine + ' ' + lspars

Flow('mestmswifwifine.rsf',
    ['mestmswifwi.rsf', dd['DATA'], dd['SRC'], dd['BUOY']],
     sfcp + ' ${SOURCES[0]} ${TARGETS[0]} && ' + \
     mfexec + r' awinum.fwiopt bulkmodout=\'${TARGETS[0]}\'' + \
     	      r' bulkmodin=\'${SOURCES[0]}\' datain=\'${SOURCES[1]}\'' + \
              r' buoyancy=\'${SOURCES[3]}\' source=\'${SOURCES[2]}\'' + \
	      fwiparsfine, stdin=0, stdout=-1)

Flow('resimmestmswifwifine.su',[dd['DATA'], dd['SRC'], 'mestmswifwifine.rsf', dd['BUOY']],
     ' /bin/cp ${SOURCES[0]} ${TARGETS[0]} && ' + \
     mfexec + r' awinum.asgsim bulkmod=\'${SOURCES[2]}\' data_p=\'${TARGETS[0]}\'' + \
     r' buoyancy=\'${SOURCES[3]}\' source_p=\'${SOURCES[1]}\'' + \
     ' ' + fdpars, stdin=0, stdout=-1)

# produce filter at MSWI + FWI model
descpars2 = r'descmax=0 desceps=0.01 descverbose=1 descout=\'outfilemswifwifineuest.txt\' lsverbose=1'
pars = ' ' + fdpars + ' ' + smparsfine + ' ' + mswipars + ' ' + descpars2 + ' ' + lspars

Flow(['mest2.rsf', 'uest2.su'],
     ['mestmswifwifine.rsf', dd['DATA'] , dd['FILT'], dd['SRC'], dd['BUOY']],
     sfcp + ' ${SOURCES[0]} ${TARGETS[0]} && ' + \
     ' /bin/cp ${SOURCES[2]} ${TARGETS[1]} && ' + \
     mfexec + r' awinum.mswiopt bulkmodout=\'${TARGETS[0]}\' filterout=\'${TARGETS[1]}\'' + \
     r' bulkmodin=\'${SOURCES[0]}\' datain=\'${SOURCES[1]}\' filterin=\'${SOURCES[2]}\'' + \
     r' buoyancy=\'${SOURCES[4]}\' source=\'${SOURCES[3]}\'' + pars, stdin=0, stdout=-1)

# FWI from homogeneous bulk mod
descparsfwi0 = r'descmax=12 desceps=0.01 descverbose=1 descout=\'outfilefwi0.txt\' lsverbose=1'
fwi0pars = ' ' + fdpars + ' ' + smpars + ' ' + descparsfwi0 + ' ' + lspars

Flow('mestfwi0.rsf',
    [dd['HOM'], dd['DATA'], dd['SRC'], dd['BUOY']],
     sfcp + ' ${SOURCES[0]} ${TARGETS[0]} && ' + \
     mfexec + r' awinum.fwiopt bulkmodout=\'${TARGETS[0]}\'' + \
     	      r' bulkmodin=\'${SOURCES[0]}\' datain=\'${SOURCES[1]}\'' + \
              r' buoyancy=\'${SOURCES[3]}\' source=\'${SOURCES[2]}\'' + \
	      fwi0pars, stdin=0, stdout=-1)

Flow('resimmestfwi0.su',[dd['DATA'], dd['SRC'], 'mestfwi0.rsf',dd['BUOY']],
     ' /bin/cp ${SOURCES[0]} ${TARGETS[0]} && ' + \
     mfexec + r' awinum.asgsim bulkmod=\'${SOURCES[2]}\' data_p=\'${TARGETS[0]}\'' + \
     r' buoyancy=\'${SOURCES[3]}\' source_p=\'${SOURCES[1]}\'' + \
     ' ' + fdpars, stdin=0, stdout=-1)

############### residuals

for sim in ['fwi0', 'mswi', 'mswifwi', 'mswifwifine']:
    Flow('residmest' + sim + '.su', ['resimmest' + sim + '.su', dd['DATA']],
        suop2  + ' ${SOURCES[0]} ${SOURCES[1]} op=diff', stdin=0)

############### adapted resimulation at m0 ##################

Flow('resim0.su', ['../data/chwd20.su', 'uest0.su'], suconv + ' panel=1 sufile=${SOURCES[1]} < ${SOURCES[0]} | ' + sugain + ' scale=8.0 | ' + suwind + ' tmin=0.0 tmax=5.0 > ${TARGETS[0]}', stdin=0, stdout=-1)

Flow('resid0.su', ['resim0.su', dd['DATA']], suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff', stdin=0)

End()


