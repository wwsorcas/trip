#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from trip.proj import getThreads
from trip.proj import getCommand
from trip.prog import run
import os

#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################
# local parallel parameters
lenv = {'stampede2' : { 'nodes'    : 2,
                        'ppn'      : 45,
                        'wall'     : '01:00:00'
                      },
         'davinci' :  { 'nodes'    : 2,
                       	'ppn'      : 16,
                        'wall'     : '08:00:00'
                      },
         'macbook' :  { 'ppn'      : 2},
	 'getafix' :  { 'ppn'      : 10},
	 'obelix'  :  { 'ppn'      : 12},
	 }

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
MYAPPS          = os.getenv('MYAPPS')
towed_array     = os.path.join(MYAPPS,'trip/iwave/trace/main/towed_array.x')
taper           = os.path.join(MYAPPS,'trip/iwave/trace/main/taper.x')
acd             = os.path.join(MYAPPS,'trip/iwave/acd/main/sim.x')
acden           = os.path.join(MYAPPS,'trip/iwave/acd/main/sim.x')
acdcgne         = os.path.join(MYAPPS,'trip/iwave/acd/main/cg.x')

fetches = {
    'line100m.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'wavelet_base.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu']
}
for file in fetches.keys():
    Fetch(file,fetches[file][0],server=fetches[file][1])   

# model parameters
NZ=141
NX=444
FX=383
DZX=24
V000=1.5
JZX=6
NSPRAY=60
NH2O=15
NS=60
OH=-480.0
NH=20

Flow('ocean',None,'makevel n1=' + str(NZ) + ' d1=' + str(DZX) + ' n2=' + str(NX) + ' d2=' + str(DZX) +
' o1=0 o2=0 v000=' + str(V000) + ' | put data_type=vel data_format=native_float label1=Depth unit1=m label2=Position unit2=m unit=m/ms esize=4',stdin=0) 
Flow('vel24base','velocity.HH','dd form=native | window j1=' + str(JZX) + ' j2=' + str(JZX))
Flow('vext','vel24base','window f2=' + str(FX) + ' n2=1 | spray axis=2 d=' + str(DZX) + ' n=' + str(NSPRAY))
Flow('extv',['vel24base', 'vext'], 'cat axis=2 d=' + str(DZX) + ' ${SOURCES[1]}')
Flow('vel24',['ocean','extv'],'window n1=' + str(NH2O) + ' f1=0 | cat axis=1 d=' + str(DZX) + ' ${SOURCES[1]}') 
Flow('vel24sm','vel24','smooth rect1=5 rect2=5 repeat=10')
Flow('vel24sm2','vel24','smooth rect1=5 rect2=5 repeat=2')
Flow('vel24sm4','vel24','smooth rect1=5 rect2=5 repeat=4')
Flow('vel24big','vel24','smooth rect1=10 rect2=10 repeat=10')

Flow('csq24','vel24','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm','vel24sm','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm2','vel24sm2','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24big','vel24big','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24noah','ocean','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csqbig80pct',['csq24big.rsf', 'csq24noah.rsf'], 
     'add < ${SOURCES[0]} ${SOURCES[1]} scale=0.8,0.2 > ${TARGETS[0]}')

Flow('dcsq24', ['csq24', 'csq24sm2'],'add mode=a scale=1,-1 < ${SOURCES[0]} ${SOURCES[1]} |window min1=180| sfpad beg1=8') 
Flow('dcsq24_extsr','dcsq24', 
     'spray < ${SOURCES[0]} axis=3 n=' + str(NS) + ' d=1.0 o=0.0| ' +
     'put dim=2 gdim=3 id1=0 id2=1 id3=3 label3=Source')
Flow('dcsq24_extso','dcsq24',
     'pad beg3=' + str(NH) + ' + end3=' + str(NH) + 
     ' | put d3=' + str(DZX) + ' o3=' + str(OH) + ' dim=2 gdim=3 id1=0 id2=1 id3=101 label3=Offset')

# transposes
Flow('csq24bigtr','csq24big','transp | put id1=1 id2=0');
Flow('dcsq24tr','dcsq24','transp | put id1=1 id2=0');
Flow('dcsq24_extsrtr','dcsq24_extsr','transp | put id1=1 id2=0');
Flow('dcsq24_extsotr','dcsq24_extso','transp | put id1=1 id2=0');

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. 

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['line100m']:
    Flow('wavelet_' + foo + '.su', ['wavelet_base.su', foo + '.su'],
         towed_array + 
         '''
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# parallel parameters
NODES=2
PPN=16
PTASK=10
#PTASK=32

# job definition dictionary

jobs = [
        { 'job': 'born',
          'pre': '/bin/cp ${SOURCES[0]} $TARGET',
          'src': ['line100m.su', 'wavelet_line100m.su', 'csq24big', 'dcsq24'],
          'tgt': ['born.su'],
          'cmd': acd + ' ' + 
		 'deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 ' +
		 'csq=${SOURCES[2]} csq_d1=${SOURCES[3]} source=${SOURCES[1]} ' +
		 'data=${TARGETS[0]} dump_term=1 partask=' + str(PTASK),
	},
	{ 'job': 'mig',
          'pre': 'add scale=0.0 < ${SOURCES[3]} > $TARGET',
	  'src': ['born.su', 'wavelet_line100m.su', 'csq24big', 'dcsq24'],
          'tgt': ['mig'],
          'cmd': acd + ' ' + 
		 'deriv=1 adjoint=1 order=2 cfl=0.5 ' +
		 'cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
		 'csq=${SOURCES[2]} csq_b1=$TARGET ' +
		 'source=${SOURCES[1]} ' +
		 'data=${SOURCES[0]} partask=' + str(PTASK),
        },
	{ 'job': 'mig_extsr',
          'pre': 'add scale=0.0 < ${SOURCES[3]} > $TARGET',
	  'src': ['born.su', 'wavelet_line100m.su', 'csq24big', 'dcsq24_extsr'],
          'tgt': ['mig_extsr'],
          'cmd': acd + ' ' + 
		 'deriv=1 adjoint=1 order=2 cfl=0.5 ' +
		 'cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
		 'csq=${SOURCES[2]} csq_b1=$TARGET ' +
		 'source=${SOURCES[1]} ' +
		 'taperpars=\'sx:3000,4000,7900,8900;offset:200,500,2275,2575\' ' + 
		 'data=${SOURCES[0]} partask=' + str(PTASK),
        },
	{ 'job': 'mig_extsotr',
          'pre': 'add scale=0.0 < ${SOURCES[3]} > $TARGET',
	  'src': ['born.su', 'wavelet_line100m.su', 'csq24bigtr', 'dcsq24_extsotr'],
          'tgt': ['mig_extsotr'],
          'cmd': acd + ' ' + 
		 'deriv=1 adjoint=1 order=2 cfl=0.5 ' +
		 'cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
		 'csq=${SOURCES[2]} csq_b1=$TARGET ' +
		 'source=${SOURCES[1]} ' +
		 'data=${SOURCES[0]} partask=' + str(PTASK),
        },
     ]

run(jobs,lenv)

# post-process for so mig
Flow('mig_extso','mig_extsotr','transp | put id1=0 id2=1 label1=Depth label2=Position')

# figures
Result('csq24big','grey color=j mean=y scalebar=y barreverse=y')
Result('dcsq24','grey color=j mean=y scalebar=y barreverse=y')
Result('born','born.su', 'suread endian=0  read=data | put n2=96 n3=60 | window j3=6 | put n2=960 n3=1label1=Time label2=Trace unit1=s | grey')
Result('mig','window max1=2000 min2=2000 max2=9000 | grey color=j clip=2.e-8')
Result('migsr','mig_extsr','window max1=2000 min2=2000 max2=9000 min3=20 max3=50 | byte | grey3 clip=2.e-8 frame1=40 frame2=175 frame3=16 point1=0.8 point2=0.8 color=j')
Result('migso','mig_extso','window max1=2000 min2=2000 max2=9000 | byte | grey3 clip=2.e-8 frame1=40 frame2=175 frame3=20 point1=0.8 point2=0.8 color=j')
End()
