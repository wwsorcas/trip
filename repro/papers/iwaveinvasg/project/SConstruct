#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from trip.proj import getThreads
from trip.proj import getCommand
from trip.prog import run
import os

#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################
# local parallel parameters
lenv = {'stampede2' : { 'nodes'    : 2,
                        'ppn'      : 45,
                        'wall'     : '01:00:00'
                      },
         'davinci' :  { 'nodes'    : 2,
                       	'ppn'      : 16,
                        'wall'     : '08:00:00'
                      },
         'macbook' :  { 'ppn'      : 2},
	 'getafix' :  { 'ppn'      : 10},
	 'obelix'  :  { 'ppn'      : 12},
	 }

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
segyread        = os.path.join(CWPROOT,'bin/segyread')
suwind          = os.path.join(CWPROOT,'bin/suwind')
susort          = os.path.join(CWPROOT,'bin/susort')
sumute          = os.path.join(CWPROOT,'bin/sumute')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suvelan         = os.path.join(CWPROOT,'bin/suvelan')
sunmo           = os.path.join(CWPROOT,'bin/sunmo')
sustack         = os.path.join(CWPROOT,'bin/sustack')
sugain          = os.path.join(CWPROOT,'bin/sugain')
sugazmig        = os.path.join(CWPROOT,'bin/sugazmig')
velconv         = os.path.join(CWPROOT,'bin/velconv')
smooth2         = os.path.join(CWPROOT,'bin/smooth2')
unisam2         = os.path.join(CWPROOT,'bin/unisam2')
transp          = os.path.join(CWPROOT,'bin/transp')
sumigpspi       = os.path.join(CWPROOT,'bin/sumigpspi')
sumigfd         = os.path.join(CWPROOT,'bin/sumigfd')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
sufft           = os.path.join(CWPROOT,'bin/sufft')
suamp           = os.path.join(CWPROOT,'bin/suamp')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
suop2           = os.path.join(CWPROOT,'bin/suop2')
MYAPPS          = os.getenv('MYAPPS')
towed_array     = os.path.join(MYAPPS,'trip/iwave/trace/main/towed_array.x')
taper           = os.path.join(MYAPPS,'trip/iwave/trace/main/taper.x')
asg             = os.path.join(MYAPPS,'trip/iwave/asg/main/sim.x')
asgfwi          = os.path.join(MYAPPS,'trip/iwave/asg/main/fwi.x')

fetches = {
    'line100m.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'wavelet_base.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu']
}
for file in fetches.keys():
    Fetch(file,fetches[file][0],server=fetches[file][1])   

Flow('2shot.su','line100m.su',suwind + ' key=fldr min=3000 max=3100')

# model parameters
NZ=141
NX=444
FX=383
DZX=24
V000=1.5
JZX=6
NSPRAY=60
NH2O=15
NS=60
OH=-480.0
NH=20

Flow('ocean',None,'makevel n1=' + str(NZ) + ' d1=' + str(DZX) + ' n2=' + str(NX) + ' d2=' + str(DZX) +
' o1=0 o2=0 v000=' + str(V000) + ' | put data_type=vel data_format=native_float label1=Depth unit1=m label2=Position unit2=m unit=m/ms esize=4',stdin=0) 
Flow('vel24base','velocity.HH','dd form=native | window j1=' + str(JZX) + ' j2=' + str(JZX))
Flow('vext','vel24base','window f2=' + str(FX) + ' n2=1 | spray axis=2 d=' + str(DZX) + ' n=' + str(NSPRAY))
Flow('extv',['vel24base', 'vext'], 'cat axis=2 d=' + str(DZX) + ' ${SOURCES[1]}')
Flow('vel24',['ocean','extv'],'window n1=' + str(NH2O) + ' f1=0 | cat axis=1 d=' + str(DZX) + ' ${SOURCES[1]}') 
Flow('vel24sm','vel24','smooth rect1=5 rect2=5 repeat=10')
Flow('vel24sm2','vel24','smooth rect1=5 rect2=5 repeat=2')
Flow('vel24sm4','vel24','smooth rect1=5 rect2=5 repeat=4')
Flow('vel24big','vel24','smooth rect1=10 rect2=10 repeat=10')

Flow('bulk24','vel24','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('bulk24sm','vel24sm','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('bulk24sm2','vel24sm2','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('bulk24big','vel24big','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('bulk24noah','ocean','add mode=p ${SOURCES[0]} |put data_type=csq')

Flow('dbulk24', ['bulk24', 'bulk24sm2'],'add mode=a scale=1,-1 < ${SOURCES[0]} ${SOURCES[1]} |window min1=180| sfpad beg1=8') 
Flow('dbulk24_extsr','dbulk24', 
     'spray < ${SOURCES[0]} axis=3 n=' + str(NS) + ' d=1.0 o=0.0| ' +
     'put dim=2 gdim=3 id1=0 id2=1 id3=3 label3=Source')
Flow('dbulk24_extso','dbulk24',
     'pad beg3=' + str(NH) + ' + end3=' + str(NH) + 
     ' | put d3=' + str(DZX) + ' o3=' + str(OH) + ' dim=2 gdim=3 id1=0 id2=1 id3=101 label3=Offset')

# transposes
Flow('bulk24bigtr','bulk24big','transp | put id1=1 id2=0');
Flow('dbulk24tr','dbulk24','transp | put id1=1 id2=0');
Flow('dbulk24_extsrtr','dbulk24_extsr','transp | put id1=1 id2=0');
Flow('dbulk24_extsotr','dbulk24_extso','transp | put id1=1 id2=0');

# unit buoyancy
Flow('buoy24','bulk24','add scale=0.0| add add=1.0')

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. 

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['line100m','2shot']:
    Flow('wavelet_' + foo + '.su', ['wavelet_base.su', foo + '.su'],
         towed_array + 
         '''
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# parallel parameters
NODES=2
PPN=16
PTASK=12
#PTASK=32

# pre-cooked exes
exe_serial  = {}
exe_getafix = {'platf':'mpi', 'ppn':str(PTASK)}
exe_stampede_4hr = {'platf':'stampede','nodes':str(NODES),'ppn':str(PPN),'wall':'04:00:00'}
exe_stampede_10min = {'platf':'stampede','nodes':str(NODES),'ppn':str(PPN),'wall':'00:10:00'}
exe_stampede_30min = {'platf':'stampede','nodes':str(NODES),'ppn':str(PPN),'wall':'00:30:00'}
# choose
#this_exe = exe_stampede_10min
this_exe = exe_getafix

# job definition dictionary

jobs = [
        { 'job': 'unborn',
          'pre': '/bin/cp ${SOURCES[0]} $TARGET',
          'src': ['2shot.su', 'wavelet_2shot.su', 'bulk24', 'buoy24'],
          'tgt': ['unborn.su'],
          'cmd': asg + ' ' + 
		 'deriv=0 adjoint=0 order=2 ' +
		 'cfl=0.5 cmin=1.0 cmax=6.0 dmin=0.8 dmax=3.0 sampord=1 ' +
		 'bulkmod=${SOURCES[2]} buoyancy=${SOURCES[3]} ' +
		 'source_p=${SOURCES[1]} data_p=${TARGETS[0]} ' +
		 'dump_term=1 printact=1',
	},
     ]
#
run(jobs,lenv)

End()
