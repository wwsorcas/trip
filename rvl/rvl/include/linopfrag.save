  template<class Scalar>
  class LinCombLinearOp: public LinearOp<Scalar> {
  
  private:
  
    vector< LinearOp<Scalar>* > ops;
    vector<Scalar> w;
  
    // default constructor--disabled
    LinCombLinearOp();

  protected:

    virtual LinearOp<Scalar> * clone() const {
      return new LinCombLinearOp<Scalar>(*this);
    }
      
    void apply(const Vector<Scalar> & x, 
	       Vector<Scalar> & y) const {
      try {
	for (int i=0;i<(int)(ops.getSize());i++) {
	  if (!ops[i]) {
	    RVLException e;
	    e<<"Error: LinCombLinearOp::apply\n";
	    e<<"operator "<<i<<" has not been initialized\n";
	    throw e;
	  }
	}
	Vector<Scalar> z(ops[0]->getRange()); // z in the range
	y.zero();
	for (int i=0;i<(int)(ops.getSize());i++) {
	  ops[i]->applyOp(x,z);
	  y.linComb(w[i],z);
	}
      }
      catch (RVLException & e) {
	e<<"\ncalled from LinCombLinearOp::apply\n";
	throw e;
      }
    }

    void applyAdj(const Vector<Scalar> & x,
		  Vector<Scalar> & y) const {
      try {
	for (int i=0;i<(int)(ops.getSize());i++) {
	  if (!ops[i]) {
	    RVLException e;
	    e<<"Error: LinCombLinearOp::applyAdj\n";
	    e<<"operator "<<i<<" has not been initialized\n";
	    throw e;
	  }
	}
	Vector<Scalar> z(ops[0]->getDomain());  // z in the domain
	y.zero();
	for (int i=0;i<(int)(ops.getSize());i++) {
	  ops[i]->applyAdjOp(x,z);
	  y.linComb(w[i],z);
	}
      }
      catch (RVLException & e) {
	e<<"\ncalled from LinCombLinearOp::applyAdj\n";
	throw e;
      }
    }

  public:
  
    LinCombLinearOp(int n)
      : ops(n,NULL),w(n,0.0) {}

    LinCombLinearOp(const LinCombLinearOp<Scalar> & lc)
      : ops(lc.ops.getSize(),NULL),w(lc.w.getSize(),0.0) {
      try {
	int num = lc.ops.getSize();
	for (int i=0;i<num;i++) {
	  if ((lc.ops)[i]) {
	    ops[i] = (lc.ops)[i]->clone();
	    w[i]=(lc.w)[i];
	  }
	}
      }
      catch (RVLException & e) {
	e<<"\ncalled from LinCombLinearOp constructor\n";
	throw e;
      }
    }
  
    LinCombLinearOp(Scalar a1,LinearOp<Scalar> & op1,
		    Scalar a2,LinearOp<Scalar> & op2)
      : ops(2),w(2) {
      try {
	ops[0]=op1.clone();
	ops[1]=op2.clone();
	w[0]=a1;
	w[1]=a2;
	if ((ops[0]->getDomain() != ops[1]->getDomain()) ||
	    (ops[0]->getRange()  != ops[2]->getRange())) {
	  RVLException e;
	  e<<"Error: LinCombLinearOp constructor\n";
	  e<<"incompatible domains or ranges\n";
	  e<<"\n";
	  e<<"**** operator 1:\n";
	  op1.write(e);
	  e<<"\n";
	  e<<"**** operator 2:\n";
	  op2.write(e);
	  e<<"\n";
	  throw e;
	}
      }
      catch (RVLException & e) {
	e<<"\ncalled from LinCombLinearOp::LinCombLinearOp\n";
	throw e;
      }
    }

    ~LinCombLinearOp() {
      for (int i=0;i<ops.getSize();i++) {
	if (ops[i]) delete ops[i];
      }
      ops.clear();
      w.clear();
    }

    /** access to domain and range */
    const Space<Scalar> & getDomain() const {
      int i=0;
      while (!ops[i] && i < ops.getSize()) i++;
      if (i==ops.getSize()) {
	RVLException e;
	e<<"Error: LinCombLinearOp::getDomain\n";
	e<<"operator list not initialized\n";
	throw e;
      }
      return ops[i]->getDomain();
    }

    const Space<Scalar> & getRange() const {
      int i=0;
      while (!ops[i] && i < ops.getSize()) i++;
      if (i==ops.getSize()) {
	RVLException e;
	e<<"Error: LinCombLinearOp::getDomain\n";
	e<<"operator list not initialized\n";
	throw e;
      }
      return ops[i]->getRange();
    }

    /** push is used for initializing the terms in the linear combination.
	A reference to the next operator (L) and its weight (a) must be
	given. */
    void push(LinearOp<Scalar> & L,Scalar a) {
      try {
	int num = ops.getSize();
	if (num > 0) {
	  if ((ops[num-1]->getDomain() != L.getDomain()) ||
	      (ops[num-1]->getRange()  != L.getRange())) {
	    RVLException e;
	    e<<"Error: LinCombLinearOp::push\n";
	    e<<"incompatible domains or ranges\n";
	    e<<"\n";
	    e<<"**** last operator in stack:\n";
	    ops[num-1]->write(e);
	    e<<"\n";
	    e<<"**** operator to be added:\n";
	    L.write(e);
	    e<<"\n";
	    throw e;
	  }
	}
	ops.push_back(L.clone());
	w.push_back(a);
      }
      catch (RVLException & e) {
	e<<"\ncalled from LinCombLinearOp::push\n";
	throw e;
      }
    }

    /**  Method to access the weights for the linear combination */
    void setWeights(vector<Scalar> & _w) { w.copy(_w); }
    void getWeights(vector<Scalar> & _w) { _w.copy(w); }
  
    // report
    ostream & write(ostream & str) const {
      str<<"LinComb LinearOperator - build on\n";
      for (int i=0;i<(int)(ops.getSize());++i) {
	str<<"*** operator "<<i<<":\n";
	ops[i]->write(str);
	str<<"*** scaled by "<<w[i]<<"\n";
      }
      return str;
    }
  };
