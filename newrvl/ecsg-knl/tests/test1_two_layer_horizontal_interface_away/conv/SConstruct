#!/bin/python
#   GOAL:
#       check convergence rate of composite/uniform grid schemes on a 3D
#       two layer model separated by a horizontal material interface,
#       material interface is away from the grid interface.
#   NOTICE:
#   source is tweaking by equation1=16*equation0, equation2=16^2*equation0

#=====================================================
#   INIT ENVIRONMENT
from rsf.proj import*
import math
import os
import platform
import sys

ECSG = os.getenv('ECSG')
main = os.path.join(ECSG,'main')

if platform.system()=='Darwin':
    num_threads=1
elif platform.system()=='Linux':
    num_threads=16
    env=Environment(ENV={'OMP_NUM_THREADS':os.environ['OMP_NUM_THREADS'],
                    'OMP_PROC_BIND':os.environ['OMP_PROC_BIND'],
                    'OMP_PLACES':os.environ['OMP_PLACES']})
else:
    os._exit(1)



#=====================================================
#   INIT BYH/S11/S13 PAR FIELDS
file_list=['byh', 'sxx', 'sxz']

# compute byh,sxx,sxz
Flow('mask_byh', 'data/rho','''mask min=1 | scale dscale=1.0''')
Flow('byh0',['mask_byh', 'data/rho'],
     '''math x=${SOURCES[0]} y=${SOURCES[1]}
         output="x/y" ''',stdin=0)
Flow('sxx0',['data/rho','data/vp'],
     '''math x=${SOURCES[0]} y=${SOURCES[1]}
         output="y*y*x" ''',stdin=0)
Flow('sxz0',['data/rho','data/vp','data/vs'],
     '''math x=${SOURCES[0]} y=${SOURCES[1]} z=${SOURCES[2]}
         output="(y*y-2*z*z)*x" ''',stdin=0)

nz=321 #nz-1 must be divisble by 16
nx=321 #nx-1 must be divisble by 8
dx=0.5

for i in range(3):
    Flow(file_list[i]+str(1),file_list[i]+str(0),'''window j1=2 j2=2 j3=2''')
    Flow(file_list[i]+str(2),file_list[i]+str(1),'''window j1=2 j2=2 j3=2''')
    
    Flow(file_list[i]+'0a',file_list[i]+str(0),'''
        window f3=0 n3=%d'''%(nz/4*2+1))
    Flow(file_list[i]+'1a',file_list[i]+'0a','''window j1=2 j2=2 j3=2''')
    Flow(file_list[i]+'2a',file_list[i]+'1a','''window j1=2 j2=2 j3=2''')
    
    Flow(file_list[i]+'0b',file_list[i]+str(0),'''
        window f3=%d j1=2 j2=2 j3=2'''%(nz/4*2))
    Flow(file_list[i]+'1b',file_list[i]+'0b','''window j1=2 j2=2 j3=2''')
    Flow(file_list[i]+'2b',file_list[i]+'1b','''window j1=2 j2=2 j3=2''')



#=====================================================
#   SETUP SIMULATION TIME SAMPLE dt
#dt = 0.5/4/math.sqrt(3)*cfl #unit[ms], cfl in (0,1)
dt=0.072
movie_dt=3500*dt #multiplier has to be 4 divisible
nframe=20
src_duration = round(200/dt)
#   make sure src duration
if movie_dt*nframe<src_duration*dt:
    print "source is not fully injected!"
    os._exit(1)



#=====================================================
#   SET SOURCE
fpeak=15
pi = math.atan(1)*4.
ricker_tmp = (pi**2)*(fpeak**2)
ricker_pars = {
    'src_x':round(nx/8.)*4*dx,
    'src_y':round(nx/8.)*4*dx,
    'src_z':round(nz*0.3/4)*4*dx,
    'src_nt0':src_duration,
    'src_nt1':src_duration/2,
    'src_nt2':src_duration/4,
    'src_dt0':dt/1000., #because src_dt is of unit [s]
    'src_dt1':dt/1000.*2, #because src_dt is of unit [s]
    'src_dt2':dt/1000.*4, #because src_dt is of unit [s]
    'tmp':ricker_tmp,
    'delrt':1/fpeak,
}
print ricker_pars

ricker_pars['equation0']="(1-2*(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))*exp(-(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))"%ricker_pars
ricker_pars['equation1']="(1-2*(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))*exp(-(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))/4"%ricker_pars
ricker_pars['equation2']="(1-2*(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))*exp(-(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))/16"%ricker_pars

Flow('ricker0',None,'''math
    n1=%(src_nt0)d o1=0 d1=%(src_dt0)f output=\"%(equation0)s\"
    n2=1 o2=%(src_x)f
    n3=1 o3=%(src_y)f
    n4=1 o4=%(src_z)f |
    put label1="Time" unit1="s"
    label2="Distance(X)" unit2="m"
    label3="Distance(Y)" unit3="m"
    label4="Distance(Z)" unit4="m"
    '''%ricker_pars)
Result('ricker0','''graph title="Ricker Source" ''')
Flow('ricker1',None,'''math
    n1=%(src_nt1)d o1=0 d1=%(src_dt1)f output=\"%(equation1)s\"
    n2=1 o2=%(src_x)f
    n3=1 o3=%(src_y)f
    n4=1 o4=%(src_z)f |
    put label1="Time" unit1="s"
    label2="Distance(X)" unit2="m"
    label3="Distance(Y)" unit3="m"
    label4="Distance(Z)" unit4="m"
    '''%ricker_pars)
Result('ricker1','''graph title="Ricker Source" ''')
Flow('ricker2',None,'''math
    n1=%(src_nt2)d o1=0 d1=%(src_dt2)f output=\"%(equation2)s\"
    n2=1 o2=%(src_x)f
    n3=1 o3=%(src_y)f
    n4=1 o4=%(src_z)f |
    put label1="Time" unit1="s"
    label2="Distance(X)" unit2="m"
    label3="Distance(Y)" unit3="m"
    label4="Distance(Z)" unit4="m"
    '''%ricker_pars)
Result('ricker2','''graph title="Ricker Source" ''')



#=====================================================
#   SET RECEIVER DATA
n_rec=72
src_x_start=round(nx/8)*4*dx-round(n_rec/2)*4*dx
src_x_interval=4*dx
Flow('x_rec',None,'''math n1=1 d1=1 n2=%d d2=1 output='%f+x2*%f' '''
     %(n_rec,src_x_start,src_x_interval))
Flow('y_rec',None,'''spike n1=1 d1=1 n2=%d d2=1 mag=%f '''
     %(n_rec, ricker_pars['src_y']))
Flow('z_rec',None,'''spike n1=1 d1=1 n2=%d d2=1 mag=%f '''
     %(n_rec, ricker_pars['src_z']-3*4*dx))
Flow('rec_in',['x_rec', 'y_rec', 'z_rec'],'''cat ${SOURCES[1:-1]} axis=1''')



#=====================================================
#=====================================================
#   SIMULATION

#=====================================================
#   UGS
n_test=3
for i in range(n_test):
    dt_ugs=dt*(2**i)
    Flow(['out_ugs%d.txt'%(i), 'energy_ugs'+str(i),
          'rec_out_ugs'+str(i), 'movie_vx_ugs'+str(i)],
         ['ricker'+str(i), 'rec_in', 'byh'+str(i), 'sxx'+str(i), 'sxz'+str(i)],
         main + ''' num_threads=%d num_grids=1 top_bc=1 radius=1
             dt=%f src_type=1 src=${SOURCES[0]}
             buoy_1=${SOURCES[2]} s11_1=${SOURCES[3]} s13_1=${SOURCES[4]}
             check_energy=y energy_trace=${TARGETS[1]}
             movie_dt=%f movie_nt=%d
             movie_vx_flag=y movie_vx_1=${TARGETS[3]}
             check_rec=y rec_in=${SOURCES[1]} rec_out=${TARGETS[2]}
             verb=y
             '''%(num_threads,dt_ugs,movie_dt,nframe), stdin=0)
    Result('movie_vx_ugs'+str(i),
           '''byte gainpanel=all |
               grey4 frame1=%d frame2=%d frame3=%d clip=0.01
               title="V_x (%s)"  flat=y
               '''%(nx/2/2**i,nx/2/2*i,nz/2/2**i,"uni"))
    
    Result('energy_ugs'+str(i),'''sfgraph scalebar=y title="Energy: e(t)" ''')

    file='rec_out_ugs'+str(i)
    Flow(file+'.hh',file,'''cp --out=stdout''')



#=====================================================
#   I-CGS and EC-CGS
test_list = ['ii', 'ec']
title = ['II-CGS', 'EC-CGS']
for i in range(len(test_list)):
    
    test = test_list[i]
    
    for j in range(n_test):
        
        dt_cgs=dt*(2**j)
        Flow(['out_'+test+str(j)+'.txt', 'res_'+test+str(j),
              'movie_vx_1_'+test+str(j), 'movie_vx_2_'+test+str(j),
              'rec_out_'+test+str(j), 'energy_'+test+str(j)],
             ['ricker'+str(j),
              'byh'+str(j)+'a', 'sxx'+str(j)+'a', 'sxz'+str(j)+'a',
              'byh'+str(j)+'b', 'sxx'+str(j)+'b', 'sxz'+str(j)+'b',
              'rec_in'],
             main + ''' num_threads=%d num_grids=2 top_bc=1 imode=%d radius=1
                 dt=%f src_type=1 src=${SOURCES[0]}
                 buoy_1=${SOURCES[1]} s11_1=${SOURCES[2]} s13_1=${SOURCES[3]}
                 buoy_2=${SOURCES[4]} s11_2=${SOURCES[5]} s13_2=${SOURCES[6]}
                 check_energy=y energy_trace=${TARGETS[5]}
                 movie_dt=%f movie_nt=%d
                 movie_vx_flag=y movie_vx_1=${TARGETS[2]} movie_vx_2=${TARGETS[3]}
                 check_rec=y rec_in=${SOURCES[7]} rec_out=${TARGETS[4]}
                 verb=y res_trace=${TARGETS[1]}
                 '''%(num_threads,i,dt_cgs,movie_dt,nframe), stdin=0)
        
        Flow('tmp1_'+test+str(j), 'movie_vx_1_'+test+str(j), '''
            window j1=2 j2=2 j3=2''')
        Flow('tmp2_'+test+str(j), 'movie_vx_2_'+test+str(j), '''window f3=1''')
        Flow('movie_cg_vx_'+test+str(j),
             ['tmp1_'+test+str(j), 'tmp2_'+test+str(j)], '''
                 cat ${SOURCES[1:-1]} axis=3''')
        Result('movie_cg_vx_'+test+str(j),''' byte gainpanel=all |
            grey4 frame1=%d frame2=%d frame3=%d clip=0.01
            title="V_x (%s)"  flat=y
            '''%(nx/4/2**i,nx/4/2**i,nz/4/2**i,title[i]))
        Result('energy_'+test+str(j),'''
            sfgraph scalebar=y title="Energy: e(t)" ''')
        
        file='rec_out_'+test+str(j)
        Flow(file+'.hh',file,'''cp --out=stdout''')



End()


